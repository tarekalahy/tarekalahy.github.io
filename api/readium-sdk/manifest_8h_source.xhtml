<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/ePub/manifest.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('manifest_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">manifest.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="manifest_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  manifest.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-11-29.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3__manifest__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3__manifest__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;ePub3/epub3.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="utfstring_8h.xhtml">ePub3/utilities/utfstring.h</a>&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="iri_8h.xhtml">ePub3/utilities/iri.h</a>&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;ePub3/property_holder.h&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="xml__identifiable_8h.xhtml">ePub3/utilities/xml_identifiable.h</a>&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;ePub3/xml/node.h&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">class </span><a class="code" href="class_package.xhtml">Package</a>;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span><a class="code" href="class_manifest_item.xhtml">ManifestItem</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">class </span><a class="code" href="class_archive_reader.xhtml">ArchiveReader</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="code" href="manifest_8h.xhtml#a11f4cb5d1e0fadc35a0616d6a6b81a1c">   37</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_byte_stream.xhtml">ByteStream</a>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#ifdef SUPPORT_ASYNC</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor"></span><span class="keyword">class </span>AsyncByteStream;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_ASYNC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">typedef</span> shared_ptr&lt;Package&gt;         <a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">PackagePtr</a>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="code" href="manifest_8h.xhtml#a1b90696bcee5ffa74e183f8eb6226044">   45</a></span>&#160;<span class="keyword">typedef</span> shared_ptr&lt;ManifestItem&gt;    <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="code" href="manifest_8h.xhtml#af9beba5f35457db85ef408e3fcf9abbd">   49</a></span>&#160;<span class="keyword">typedef</span> std::map&lt;string, shared_ptr&lt;ManifestItem&gt;&gt;  <a class="code" href="manifest_8h.xhtml#af9beba5f35457db85ef408e3fcf9abbd" title="A map of item-ids to manifest items.">ManifestTable</a>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">// this should just be an enum, but I&#39;m having an inordinately hard time getting the</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">// compiler to let me use it as such</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml">   66</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_item_properties.xhtml">ItemProperties</a></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;#if <a class="code" href="__platform_8h.xhtml#a34ebb2c17c03dd85efc5bed561bda851">EPUB_PLATFORM</a>(WINRT)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    : <span class="keyword">public</span> NativeBridge</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor"></span>{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">enum</span> : <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> {</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441ac8cf8b80e7146b68dda9dc24c39b2741">   75</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441ac8cf8b80e7146b68dda9dc24c39b2741" title="No properties defined.">None</a>                = 0,        </div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa7ecbfc49a806c55e2c18c527371ce85">   76</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa7ecbfc49a806c55e2c18c527371ce85" title="This item is the cover image for the publication.">CoverImage</a>          = 1&lt;&lt;0,     </div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa66dadd5747616c32dc5707a4e45adb5">   77</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa66dadd5747616c32dc5707a4e45adb5" title="This item contains MathML markup.">ContainsMathML</a>      = 1&lt;&lt;1,     </div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a4c661962cb9533e8717d8bb51b5ebb16">   78</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a4c661962cb9533e8717d8bb51b5ebb16" title="This item is the EPUB 3 navigation document for the publication.">Navigation</a>          = 1&lt;&lt;2,     </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a7be49438bc4fa7386998f8ebeb63c4c5">   79</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a7be49438bc4fa7386998f8ebeb63c4c5" title="This item accesses resources located outside the EPUB container.">HasRemoteResources</a>  = 1&lt;&lt;3,     </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441af005fb261de810579c3d5d92c5f4c21f">   80</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441af005fb261de810579c3d5d92c5f4c21f" title="This item has content which uses JavaScript or HTML5 forms.">HasScriptedContent</a>  = 1&lt;&lt;4,     </div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a17b4ce33a844a1abd504acefed81c613">   81</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a17b4ce33a844a1abd504acefed81c613" title="This item contains SVG markup.">ContainsSVG</a>         = 1&lt;&lt;5,     </div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a285c50884fdb6731e91d37f376695473">   82</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a285c50884fdb6731e91d37f376695473" title="This item contains an epub:switch element.">ContainsSwitch</a>      = 1&lt;&lt;6,     </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        </div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a9cc47c1f9a8ae1f2a6b85755d20cc931">   84</a></span>&#160;        <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a9cc47c1f9a8ae1f2a6b85755d20cc931" title="A mask for all standard EPUB 3 properties.">AllPropertiesMask</a>   = (1&lt;&lt;7)-1, </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    };</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    </div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a5958d42adb2b70805e98670603fbac19">   89</a></span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    <a class="code" href="class_item_properties.xhtml#a5958d42adb2b70805e98670603fbac19" title="To avoid the C++ compiler&#39;s reticence for arithmetic on enum types, the value is an unsigned int...">value_type</a>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>    <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; attrStr);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>    <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(<span class="keyword">const</span> <a class="code" href="class_i_r_i.xhtml">IRI</a>&amp; iri);</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#adefc7595122aaa9877b19c7a7bb028ba">  107</a></span>&#160;                    <a class="code" href="class_item_properties.xhtml#adefc7595122aaa9877b19c7a7bb028ba">ItemProperties</a>(value_type v = <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441ac8cf8b80e7146b68dda9dc24c39b2741" title="No properties defined.">None</a>) : _p(v) {}</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a1548783d95f746b1a289634fc7a495e7">  110</a></span>&#160;                    <a class="code" href="class_item_properties.xhtml#a1548783d95f746b1a289634fc7a495e7" title="Copy constructor.">ItemProperties</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o) : _p(o._p) {}</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a93f408a7c18abf6dbf9b8958041c8c7c">  113</a></span>&#160;                    <a class="code" href="class_item_properties.xhtml#a93f408a7c18abf6dbf9b8958041c8c7c" title="C++11 move constructor.">ItemProperties</a>(<a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp;&amp; o) : _p(o._p) {}</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a267ba072ba3eab47a72b13f283af5e71">  114</a></span>&#160;                    <a class="code" href="class_item_properties.xhtml#a267ba072ba3eab47a72b13f283af5e71">~ItemProperties</a>() {}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    </div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8d4e20dcc29ab9712a8ca9789dfb73cf">  124</a></span>&#160;    <span class="keywordtype">bool</span>            <a class="code" href="class_item_properties.xhtml#a8d4e20dcc29ab9712a8ca9789dfb73cf">HasProperty</a>(<a class="code" href="class_item_properties.xhtml#a5958d42adb2b70805e98670603fbac19" title="To avoid the C++ compiler&#39;s reticence for arithmetic on enum types, the value is an unsigned int...">ItemProperties::value_type</a> p)<span class="keyword">             const   </span>{ <span class="keywordflow">return</span> (_p &amp; p) == p; }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    </div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#aa271fe990cf2ea4bc1a6e75408badb1e">  131</a></span>&#160;    <span class="keywordtype">bool</span>            <a class="code" href="class_item_properties.xhtml#aa271fe990cf2ea4bc1a6e75408badb1e">HasProperty</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; p)<span class="keyword">    const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#aa271fe990cf2ea4bc1a6e75408badb1e">HasProperty</a>(p._p); }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    </div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a054e6fafc0e6e675f56c2a464f0c7642">  140</a></span>&#160;    <span class="keywordtype">bool</span>            <a class="code" href="class_item_properties.xhtml#a054e6fafc0e6e675f56c2a464f0c7642" title="Compares two ItemProperties for equality.">operator==</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)<span class="keyword">     const   </span>{ <span class="keywordflow">return</span> _p == o._p; }</div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#afce694ffde7b2d489c4bc291fc4b0590">  143</a></span>&#160;    <span class="keywordtype">bool</span>            <a class="code" href="class_item_properties.xhtml#afce694ffde7b2d489c4bc291fc4b0590" title="Compares an ItemProperties against a property bitfield for equality.">operator==</a>(value_type v)<span class="keyword">                const   </span>{ <span class="keywordflow">return</span> _p == v; }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    </div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8386718763ec853622d2641e8321a023">  147</a></span>&#160;    <span class="keywordtype">bool</span>            <a class="code" href="class_item_properties.xhtml#a8386718763ec853622d2641e8321a023" title="Compares two ItemProperties for inequality.">operator!=</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)<span class="keyword">     const   </span>{ <span class="keywordflow">return</span> _p != o._p; }</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a0529b19e30f50edf3802214d328b9f58">  150</a></span>&#160;    <span class="keywordtype">bool</span>            <a class="code" href="class_item_properties.xhtml#a0529b19e30f50edf3802214d328b9f58" title="Compares an ItemProperties against a property bitfield for inequality.">operator!=</a>(value_type v)<span class="keyword">                const   </span>{ <span class="keywordflow">return</span> _p != v; }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    </div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a483df476485689b893ad28adad874e38">  154</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#a483df476485689b893ad28adad874e38" title="Assignment from another ItemProperties instance.">operator=</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)              { _p = o._p; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#af82cc3d152a158b12c9636c3e48d84a3">  157</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#af82cc3d152a158b12c9636c3e48d84a3" title="Assignment from a property bitfield.">operator=</a>(value_type v)                         { _p = v; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#a483df476485689b893ad28adad874e38" title="Assignment from another ItemProperties instance.">operator=</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; attrStr);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    </div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#af25815b14caead3ff2593aeb783a157d">  164</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>  <a class="code" href="class_item_properties.xhtml#af25815b14caead3ff2593aeb783a157d" title="Returns a new ItemProperties that is the bitwise-OR of two ItemProperties.">operator|</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)<span class="keyword">      const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(_p | o._p); }</div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a8d41c418057dc905a24c7a7136ef0771">  167</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>  <a class="code" href="class_item_properties.xhtml#a8d41c418057dc905a24c7a7136ef0771" title="Returns a new ItemProperties that is the bitwise-OR of this and a property bitfield.">operator|</a>(value_type v)<span class="keyword">                 const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(_p | v); }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    </div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a52b7fad78ed5b49211f61f303479000e">  171</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>  <a class="code" href="class_item_properties.xhtml#a52b7fad78ed5b49211f61f303479000e" title="Returns a new ItemProperties that is the bitwise-AND of two ItemProperties.">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)<span class="keyword">      const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(_p &amp; o._p); }</div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a373ef704ffb572792c266d4972f587ba">  174</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>  <a class="code" href="class_item_properties.xhtml#a373ef704ffb572792c266d4972f587ba" title="Returns a new ItemProperties that is the bitwise-AND of this and a property bitfield.">operator&amp;</a>(value_type v)<span class="keyword">                 const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(_p &amp; v); }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    </div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a7d24b74bfd74a28603f4c9a21e028eb8">  178</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>  <a class="code" href="class_item_properties.xhtml#a7d24b74bfd74a28603f4c9a21e028eb8" title="Returns a new ItemProperties that is the bitwise inverse of this.">operator~</a>()<span class="keyword">                             const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>((~_p)&amp;<a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a9cc47c1f9a8ae1f2a6b85755d20cc931" title="A mask for all standard EPUB 3 properties.">AllPropertiesMask</a>); }</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#ab2243346bfeb04f6c7d7ce41f4646b66">  181</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>  <a class="code" href="class_item_properties.xhtml#ab2243346bfeb04f6c7d7ce41f4646b66" title="Returns a new ItemProperties that is the bitwise-NOT of two ItemProperties.">operator^</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)<span class="keyword">      const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(_p ^ o._p); }</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a396459768ee9be59cb1d954abf714ec6">  184</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>  <a class="code" href="class_item_properties.xhtml#a396459768ee9be59cb1d954abf714ec6" title="Returns a new ItemProperties that is the bitwise-NOT of this and a property bitfield.">operator^</a>(value_type v)<span class="keyword">                 const   </span>{ <span class="keywordflow">return</span> <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(_p ^ v); }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    </div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a79cca3bf02c0774db9f0d3d102866229">  188</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#a79cca3bf02c0774db9f0d3d102866229" title="Assigns the result of a bitwise-OR with another ItemProperties.">operator|=</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)             { _p |= o._p; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#ac322619b9353a0cd012ddf5875bcc388">  191</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#ac322619b9353a0cd012ddf5875bcc388" title="Assigns the result of a bitwise-OR with a property bitfield.">operator|=</a>(value_type v)                        { _p |= v; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    </div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a42db0df5b839fbd4d83069014c6eae0f">  195</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#a42db0df5b839fbd4d83069014c6eae0f" title="Assigns the result of a bitwise-AND with another ItemProperties.">operator&amp;=</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)             { _p &amp;= o._p; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a2890846b35434e39d84ebd394208edb3">  198</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#a2890846b35434e39d84ebd394208edb3" title="Assigns the result of a bitwise-AND with a property bitfield.">operator&amp;=</a>(value_type v)                        { _p &amp;= v; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    </div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#aa0da3f38fb46bd484f1f9645517dab28">  202</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#aa0da3f38fb46bd484f1f9645517dab28" title="Assigns the result of a bitwise-NOT with another ItemProperties.">operator^=</a>(<span class="keyword">const</span> <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; o)             { _p ^= o._p; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a094acb85ae15b16c22c84f4371cebb8e">  205</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#a094acb85ae15b16c22c84f4371cebb8e" title="Assigns the result of a bitwise-NOT with a property bitfield.">operator^=</a>(value_type v)                        { _p ^= v; <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    </div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#aa54de1e96369eae5a44d62e32b85095f">  214</a></span>&#160;    <span class="keyword">operator</span>        <a class="code" href="class_item_properties.xhtml#a5958d42adb2b70805e98670603fbac19" title="To avoid the C++ compiler&#39;s reticence for arithmetic on enum types, the value is an unsigned int...">value_type</a> ()<span class="keyword">                           const   </span>{ <span class="keywordflow">return</span> _p; }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">string</span>          <a class="code" href="class_item_properties.xhtml#a80e26151ede0e3deb177cade4991452b" title="Cast to a string value suitable for use as the properties attribute of an XML manifest item element...">str</a>()                                   <span class="keyword">const</span>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    value_type _p;                                      </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">typedef</span> std::map&lt;string, value_type&gt; PropertyMap;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> PropertyMap PropertyLookupTable;       </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;};</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml">  259</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_manifest_item.xhtml">ManifestItem</a> : <span class="keyword">public</span> <a class="code" href="class_pointer_type.xhtml">PointerType</a>&lt;ManifestItem&gt;, <span class="keyword">public</span> <a class="code" href="class_owned_by.xhtml">OwnedBy</a>&lt;Package&gt;, <span class="keyword">public</span> <a class="code" href="class_property_holder.xhtml">PropertyHolder</a>, <span class="keyword">public</span> <a class="code" href="class_x_m_l_identifiable.xhtml">XMLIdentifiable</a></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor"></span>    , <span class="keyword">public</span> NativeBridge</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor"></span>{</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#ab4c4fde413ae3434688b7efc89afc2f7">  265</a></span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">string</span>              <a class="code" href="class_manifest_item.xhtml#ab4c4fde413ae3434688b7efc89afc2f7">MimeType</a>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                <a class="code" href="class_manifest_item.xhtml">ManifestItem</a>()                                      <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                <a class="code" href="class_manifest_item.xhtml">ManifestItem</a>(const <a class="code" href="class_manifest_item.xhtml">ManifestItem</a>&amp;)                   <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                        </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;public:</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>                <a class="code" href="class_manifest_item.xhtml">ManifestItem</a>(const shared_ptr&lt;<a class="code" href="class_package.xhtml">Package</a>&gt;&amp; owner);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a>                <a class="code" href="class_manifest_item.xhtml">ManifestItem</a>(<a class="code" href="class_manifest_item.xhtml">ManifestItem</a>&amp;&amp;);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    virtual                     ~ManifestItem();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00277"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a3556d3f55bc0435199cbbe794cb0483a">  277</a></span>&#160;    <a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">PackagePtr</a>                  GetPackage()<span class="keyword">                        const   </span>{ <span class="keywordflow">return</span> Owner(); }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span>                ParseXML(shared_ptr&lt;xml::Node&gt; node);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordtype">string</span>                      AbsolutePath()                      <span class="keyword">const</span>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    </div>
<div class="line"><a name="l00284"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#aa76e1f6de50e6dc6d5ad78ab5e1b60e3">  284</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp;               <a class="code" href="class_manifest_item.xhtml#aa76e1f6de50e6dc6d5ad78ab5e1b60e3">Identifier</a>()<span class="keyword">                        const   </span>{ <span class="keywordflow">return</span> XMLIdentifier(); }</div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a6500633867755054026f5adbc95385b9">  285</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp;               <a class="code" href="class_manifest_item.xhtml#a6500633867755054026f5adbc95385b9">Href</a>()<span class="keyword">                              const   </span>{ <span class="keywordflow">return</span> _href; }</div>
<div class="line"><a name="l00286"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#ad4f95ba4cc76cd56b585366c58d78a15">  286</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classstring.xhtml">MimeType</a>&amp;             <a class="code" href="class_manifest_item.xhtml#ad4f95ba4cc76cd56b585366c58d78a15">MediaType</a>()<span class="keyword">                         const   </span>{ <span class="keywordflow">return</span> _mediaType; }</div>
<div class="line"><a name="l00287"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#ae008bbf3bf0adfc7244f7b0c368cbc87">  287</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp;               <a class="code" href="class_manifest_item.xhtml#ae008bbf3bf0adfc7244f7b0c368cbc87">MediaOverlayID</a>()<span class="keyword">                    const   </span>{ <span class="keywordflow">return</span> _mediaOverlayID; }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    shared_ptr&lt;ManifestItem&gt;    MediaOverlay()                      <span class="keyword">const</span>;</div>
<div class="line"><a name="l00290"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#af8b1351ca4cab131d0461bc6bcf1735d">  290</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">string</span>&amp;               <a class="code" href="class_manifest_item.xhtml#af8b1351ca4cab131d0461bc6bcf1735d">FallbackID</a>()<span class="keyword">                        const   </span>{ <span class="keywordflow">return</span> _fallbackID; }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    shared_ptr&lt;ManifestItem&gt;    Fallback()                          <span class="keyword">const</span>;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">// strips any query/fragment from the href before returning</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">string</span>                      BaseHref()                          <span class="keyword">const</span>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// NOTE: the two &quot;HasProperty&quot; functions below test for predefined &quot;_parsedProperties&quot;</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">// on the spine item, not for OPF package metadata.</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="comment">// ... unlike the other HasProperty(std::vector&lt;IRI&gt;&amp; properties) method further below!</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">// (TODO: very confusing API)</span></div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a9bd0a65d74a531ff00a02624de7d5fae">  302</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_item_properties.xhtml#a8d4e20dcc29ab9712a8ca9789dfb73cf">HasProperty</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; property)<span class="keyword"> const</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keyword">auto</span> itemProps = <a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties</a>(property);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">if</span> (itemProps == <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441ac8cf8b80e7146b68dda9dc24c39b2741" title="No properties defined.">ItemProperties::None</a>)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">return</span> _parsedProperties.HasProperty(itemProps);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a464f4f9bd2990192c2ac55820bd590fb">  309</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_item_properties.xhtml#a8d4e20dcc29ab9712a8ca9789dfb73cf">HasProperty</a>(<a class="code" href="class_item_properties.xhtml#a5958d42adb2b70805e98670603fbac19" title="To avoid the C++ compiler&#39;s reticence for arithmetic on enum types, the value is an unsigned int...">ItemProperties::value_type</a> prop)<span class="keyword"> const</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">if</span> (prop == <a class="code" href="class_item_properties.xhtml#a5958d42adb2b70805e98670603fbac19" title="To avoid the C++ compiler&#39;s reticence for arithmetic on enum types, the value is an unsigned int...">ItemProperties::value_type</a>(<a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441ac8cf8b80e7146b68dda9dc24c39b2741" title="No properties defined.">ItemProperties::None</a>))</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">return</span> _parsedProperties.HasProperty(prop);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordtype">bool</span>                        <a class="code" href="class_item_properties.xhtml#a8d4e20dcc29ab9712a8ca9789dfb73cf">HasProperty</a>(<span class="keyword">const</span> std::vector&lt;IRI&gt;&amp; properties)  <span class="keyword">const</span>;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">// fetch any relevant encryption information</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="_forward_8h.xhtml#ad70d87990069a529e83f84dd93bba7e4">EncryptionInfoPtr</a>           GetEncryptionInfo()                 <span class="keyword">const</span>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordtype">bool</span>                        CanLoadDocument()                   <span class="keyword">const</span>;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// one-shot XML document loader</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    shared_ptr&lt;xml::Document&gt;   ReferencedDocument()                <span class="keyword">const</span>;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// stream the data</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    unique_ptr&lt;ByteStream&gt;      Reader()                            <span class="keyword">const</span>;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor">#ifdef SUPPORT_ASYNC</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor"></span>    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    unique_ptr&lt;AsyncByteStream&gt; AsyncReader()                       <span class="keyword">const</span>;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_ASYNC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a39abd8c828aa8e519bd437566b352d95">  338</a></span>&#160;    <span class="keywordtype">string</span>                  <a class="code" href="class_manifest_item.xhtml#a39abd8c828aa8e519bd437566b352d95">_href</a>;</div>
<div class="line"><a name="l00339"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a959e7bec82223bae14f301bbe433cc98">  339</a></span>&#160;    <a class="code" href="classstring.xhtml">MimeType</a>                <a class="code" href="class_manifest_item.xhtml#a959e7bec82223bae14f301bbe433cc98">_mediaType</a>;</div>
<div class="line"><a name="l00340"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a715c895291cb54bcc1fd569dc07d43ca">  340</a></span>&#160;    <span class="keywordtype">string</span>                  <a class="code" href="class_manifest_item.xhtml#a715c895291cb54bcc1fd569dc07d43ca">_mediaOverlayID</a>;</div>
<div class="line"><a name="l00341"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#aca2989ecd896c2e188bd141e58cfa4e2">  341</a></span>&#160;    <span class="keywordtype">string</span>                  <a class="code" href="class_manifest_item.xhtml#aca2989ecd896c2e188bd141e58cfa4e2">_fallbackID</a>;</div>
<div class="line"><a name="l00342"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#aac3ff29491189d727dc3b3be493e1ae1">  342</a></span>&#160;    <a class="code" href="class_item_properties.xhtml">ItemProperties</a>          <a class="code" href="class_manifest_item.xhtml#aac3ff29491189d727dc3b3be493e1ae1">_parsedProperties</a>;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;};</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3__manifest__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d81697a4833f1d44a7e9bc8387132cc4.xhtml">ePub</a></li><li class="navelem"><a class="el" href="manifest_8h.xhtml">manifest.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
