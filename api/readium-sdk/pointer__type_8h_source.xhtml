<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/pointer_type.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('pointer__type_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">pointer_type.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pointer__type_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  pointer_type.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-08-27.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3__pointer_type__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3__pointer_type__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;ePub3/epub3.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml">   70</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_pointer_type.xhtml">PointerType</a> : <span class="keyword">public</span> std::enable_shared_from_this&lt;_Tp&gt;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#ae6755c23435fbdbe8ea60d4c383e72b5">   73</a></span>&#160;    <span class="keyword">typedef</span> std::enable_shared_from_this&lt;_Tp&gt;   <a class="code" href="class_pointer_type.xhtml#ae6755c23435fbdbe8ea60d4c383e72b5">_Base</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#ae1ab47000d4c6f77ce300a54b477d6d0">   74</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::remove_cv&lt;_Tp&gt;::type  <a class="code" href="class_pointer_type.xhtml#ae1ab47000d4c6f77ce300a54b477d6d0">Type</a>;</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">   75</a></span>&#160;    <span class="keyword">typedef</span> std::shared_ptr&lt;Type&gt;               <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a>;</div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a8b24c001b2485ee3ac4d46be4fe0d222">   76</a></span>&#160;    <span class="keyword">typedef</span> std::shared_ptr&lt;const Type&gt;         <a class="code" href="class_pointer_type.xhtml#a8b24c001b2485ee3ac4d46be4fe0d222">ConstPointer</a>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a1640de8234736c4f7d8e27a72db16b57">   79</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a1640de8234736c4f7d8e27a72db16b57">PointerType</a>() : <a class="code" href="class_pointer_type.xhtml#ae6755c23435fbdbe8ea60d4c383e72b5">_Base</a>() {}</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a86916470cbec9e61d10aeebb89b04ef0">   80</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a86916470cbec9e61d10aeebb89b04ef0">PointerType</a>(<span class="keyword">const</span> <a class="code" href="class_pointer_type.xhtml">PointerType</a>&amp; __o) : <a class="code" href="class_pointer_type.xhtml#ae6755c23435fbdbe8ea60d4c383e72b5">_Base</a>(__o) {}</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a79096031ee74f2ff5228db7b2c1272dd">   83</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_pointer_type.xhtml#a79096031ee74f2ff5228db7b2c1272dd">~PointerType</a>() {}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... _Args&gt;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">static</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">New</a>(_Args&amp;&amp; ...__args) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="comment">// a thought: can we do std::make_shared&lt;decltype(*this)&gt; type of thing ?</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Tp&gt;(std::forward&lt;_Args&gt;(__args)...);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class </span>_Sub, <span class="keyword">typename</span>... _Args&gt;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">static</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">typename</span> std::enable_if</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    &lt;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        std::is_base_of&lt;_Tp, _Sub&gt;::value,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Sub&gt;::Pointer</a></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    &gt;::type</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">New</a>(_Args&amp;&amp; ...__args) {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Sub&gt;(std::forward&lt;_Args&gt;(__args)...);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span>, _Sub, <span class="keyword">typename</span> _Arg1&gt;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">static</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">typename</span> std::enable_if</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    &lt;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        std::is_base_of&lt;_Tp, _Sub&gt;::value,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Sub&gt;::Pointer</a></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    &gt;::type</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">  113</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">New</a>(_Arg1 __arg1) {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Sub&gt;(std::forward&lt;_Arg1&gt;(__arg1));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Sub, <span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2&gt;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">static</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">typename</span> std::enable_if</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    &lt;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        std::is_base_of&lt;_Tp, _Sub&gt;::value,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Sub&gt;::Pointer</a></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    &gt;::type</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a653ab55fab0626703d04b0084af545d8">  124</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a653ab55fab0626703d04b0084af545d8">New</a>(_Arg1 __arg1, _Arg2 __arg2) {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Sub&gt;(std::forward&lt;_Arg1, _Arg2&gt;(__arg1, __arg2));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Sub, <span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2, <span class="keyword">typename</span> _Arg3&gt;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">static</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">typename</span> std::enable_if</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    &lt;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        std::is_base_of&lt;_Tp, _Sub&gt;::value,</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Sub&gt;::Pointer</a></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    &gt;::type</div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#ad5eb544faa76b51f13bfe70ed5aa7359">  135</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#ad5eb544faa76b51f13bfe70ed5aa7359">New</a>(_Arg1 __arg1, _Arg2 __arg2, _Arg3 __arg3) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Sub&gt;(std::forward&lt;_Arg1, _Arg2, _Arg3&gt;(__arg1, __arg2, __arg3));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Sub, <span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2, <span class="keyword">typename</span> _Arg3, <span class="keyword">typename</span> _Arg4&gt;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">static</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">typename</span> std::enable_if</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    &lt;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        std::is_base_of&lt;_Tp, _Sub&gt;::value,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Sub&gt;::Pointer</a></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    &gt;::type</div>
<div class="line"><a name="l00146"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a4760b31634185ee43e7f81d00273f462">  146</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a4760b31634185ee43e7f81d00273f462">New</a>(_Arg1 __arg1, _Arg2 __arg2, _Arg3 __arg3, _Arg4 __arg4) {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Sub&gt;(std::forward&lt;_Arg1, _Arg2, _Arg3, _Arg4&gt;(__arg1, __arg2, __arg3, __arg4));</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Sub, <span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2, <span class="keyword">typename</span> _Arg3, <span class="keyword">typename</span> _Arg4, <span class="keyword">typename</span> _Arg5&gt;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">static</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">typename</span> std::enable_if</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    &lt;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        std::is_base_of&lt;_Tp, _Sub&gt;::value,</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Sub&gt;::Pointer</a></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    &gt;::type</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#ac6c1c254a8d892c362ac68e3dbf0e903">  157</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#ac6c1c254a8d892c362ac68e3dbf0e903">New</a>(_Arg1 __arg1, _Arg2 __arg2, _Arg3 __arg3, _Arg4 __arg4, _Arg5 __arg5) {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Sub&gt;(std::forward&lt;_Arg1, _Arg2, _Arg3, _Arg4, _Arg5&gt;(__arg1, __arg2, __arg3, __arg4, __arg5));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Arg1&gt;</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#aafe3f0dde667ab7890d81bb5caadc89f">  162</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#aafe3f0dde667ab7890d81bb5caadc89f">New</a>(_Arg1 __arg1) {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Tp&gt;(std::forward&lt;_Arg1&gt;(__arg1));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2&gt;</div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a22e92b46086b84e21a567443be4cde72">  166</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#a22e92b46086b84e21a567443be4cde72">New</a>(_Arg1 __arg1, _Arg2 __arg2) {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Tp&gt;(std::forward&lt;_Arg1, _Arg2&gt;(__arg1, __arg2));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2, <span class="keyword">typename</span> _Arg3&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a30b5ff632a92c046349e70a8cebeb6e3">  170</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#a30b5ff632a92c046349e70a8cebeb6e3">New</a>(_Arg1 __arg1, _Arg2 __arg2, _Arg3 __arg3) {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Tp&gt;(std::forward&lt;_Arg1, _Arg2, _Arg3&gt;(__arg1, __arg2, __arg3));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2, <span class="keyword">typename</span> _Arg3, <span class="keyword">typename</span> _Arg4&gt;</div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a04b3ee41ea9ca5b1f1276e3048d680f6">  174</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#a04b3ee41ea9ca5b1f1276e3048d680f6">New</a>(_Arg1 __arg1, _Arg2 __arg2, _Arg3 __arg3, _Arg4 __arg4) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Tp&gt;(std::forward&lt;_Arg1, _Arg2, _Arg3, _Arg4&gt;(__arg1, __arg2, __arg3, __arg4));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Arg1, <span class="keyword">typename</span> _Arg2, <span class="keyword">typename</span> _Arg3, <span class="keyword">typename</span> _Arg4, <span class="keyword">typename</span> _Arg5&gt;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a9ea07dd9617da1046d47a0827fc324d0">  178</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#a9ea07dd9617da1046d47a0827fc324d0">New</a>(_Arg1 __arg1, _Arg2 __arg2, _Arg3 __arg3, _Arg4 __arg4, _Arg5 __arg5) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;_Tp&gt;(std::forward&lt;_Arg1, _Arg2, _Arg3, _Arg4, _Arg5&gt;(__arg1, __arg2, __arg3, __arg4, __arg5));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">  183</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> _Base::shared_from_this(); }</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a666b68a483c467918d8543410095a9b7">  184</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a8b24c001b2485ee3ac4d46be4fe0d222">ConstPointer</a> <a class="code" href="class_pointer_type.xhtml#a666b68a483c467918d8543410095a9b7">Ptr</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> _Base::shared_from_this(); }</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a01f277b03ab0f0ed95555e298af2363f">  185</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a8b24c001b2485ee3ac4d46be4fe0d222">ConstPointer</a> <a class="code" href="class_pointer_type.xhtml#a01f277b03ab0f0ed95555e298af2363f">ConstPtr</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> _Base::shared_from_this(); }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Yp&gt;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">inline</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Yp&gt;::Pointer</a></div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#af17b1cea2ddc60a267a9004cc1c87462">  190</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#af17b1cea2ddc60a267a9004cc1c87462">CastPtr</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">return</span> std::dynamic_pointer_cast&lt;_Yp&gt;(_Base::shared_from_this());</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Yp&gt;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml">PointerType&lt;typename std::add_const&lt;_Yp&gt;::type</a>&gt;<a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">::Pointer</a></div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a45e01ceea460285ffa94ed345976ebfb">  195</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#a45e01ceea460285ffa94ed345976ebfb">CastPtr</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">return</span> std::dynamic_pointer_cast&lt;<span class="keyword">const</span> _Yp&gt;(_Base::shared_from_this());</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Yp&gt;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span></div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="code" href="class_pointer_type.xhtml#a57ef0d8963aae3e7be26521fba8eba3e">  201</a></span>&#160;    <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">Pointer</a> <a class="code" href="class_pointer_type.xhtml#a57ef0d8963aae3e7be26521fba8eba3e">CastFrom</a>(<span class="keyword">typename</span> <a class="code" href="class_pointer_type.xhtml#adf22a9d4ec4938b1447535741774729c">PointerType&lt;_Yp&gt;::Pointer</a> __from) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">return</span> std::dynamic_pointer_cast&lt;<a class="code" href="class_pointer_type.xhtml#ae1ab47000d4c6f77ce300a54b477d6d0">Type</a>&gt;(__from);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;};</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3__pointer_type__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="pointer__type_8h.xhtml">pointer_type.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
