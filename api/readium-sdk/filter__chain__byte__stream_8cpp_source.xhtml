<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/ePub/filter_chain_byte_stream.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('filter__chain__byte__stream_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">filter_chain_byte_stream.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="filter__chain__byte__stream_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  filter_chain.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-08-27.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="filter__chain__byte__stream_8h.xhtml">filter_chain_byte_stream.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;../ePub/manifest.h&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="filter_8h.xhtml">filter.h</a>&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="byte__buffer_8h.xhtml">byte_buffer.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="make__unique_8h.xhtml">make_unique.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if !EPUB_OS(WINDOWS)</span></div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="code" href="filter__chain__byte__stream_8cpp.xhtml#aa64afdc6505183049ef1641be9fc5b49">   29</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor"># define memcpy_s(dst, dstLen, src, srcLen) memcpy(dst, src, srcLen)</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="code" href="class_filter_chain_byte_stream.xhtml#ac1951025addace95b605f8031101de52">   34</a></span>&#160;<a class="code" href="class_filter_chain_byte_stream.xhtml#ac1951025addace95b605f8031101de52">FilterChainByteStream::~FilterChainByteStream</a>()</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">//FilterChainByteStream::FilterChainByteStream(std::vector&lt;ContentFilterPtr&gt;&amp; filters, ConstManifestItemPtr &amp;manifestItem)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">//: m_filters(), m_filterContexts(), _needs_cache(false), _cache(), _read_cache()</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">//{</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">//    _input = NULL;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">//    _cache.SetUsesSecureErasure();</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">//    _read_cache.SetUsesSecureErasure();</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">//    for (ContentFilterPtr filter : filters)</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">//    {</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">//        m_filters.push_back(filter);</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">//        m_filterContexts.push_back(std::unique_ptr&lt;FilterContext&gt;(filter-&gt;MakeFilterContext(manifestItem)));</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">//        if (filter-&gt;GetOperatingMode() == ContentFilter::OperatingMode::RequiresCompleteData &amp;&amp; !_needs_cache)</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">//            _needs_cache = true;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">//    }</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">//}</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="code" href="class_filter_chain_byte_stream.xhtml#ad2076c34c77e4a1e635772aaf6e0b12f">   55</a></span>&#160;<a class="code" href="class_filter_chain_byte_stream.xhtml#a14a6c0e8627f9344787be7829f30c190">FilterChainByteStream::FilterChainByteStream</a>(std::unique_ptr&lt;SeekableByteStream&gt;&amp;&amp; input, std::vector&lt;ContentFilterPtr&gt;&amp; filters, <a class="code" href="_forward_8h.xhtml#a80a490c130036fd569bff5aec893ed7e">ConstManifestItemPtr</a> manifestItem)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;: _input(std::move(input)), m_filters(), m_filterContexts(), _needs_cache(false), _cache(), _read_cache(), _cacheHasBeenFilledUp(false)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    _cache.<a class="code" href="class_byte_buffer.xhtml#afadcfc82fa2fa4906889fb00dfdcc8e4">SetUsesSecureErasure</a>();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    _read_cache.<a class="code" href="class_byte_buffer.xhtml#afadcfc82fa2fa4906889fb00dfdcc8e4">SetUsesSecureErasure</a>();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="filter_8h.xhtml#a841ee8380970cd004a352a1e3177f902">ContentFilterPtr</a> filter : filters)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        m_filters.push_back(filter);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        m_filterContexts.push_back(std::unique_ptr&lt;FilterContext&gt;(filter-&gt;MakeFilterContext(manifestItem)));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// We are currently hardcoding _needs_cache to true, because we realized that this is the only way to realiably compute</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// the content length of any resource being read by FilterChainByteStream. Only by processing the raw conten of a given</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// resource through all the filters in the chaing, and storing the result in the cache, that we can reliably stablish the</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// size of the resource after being processed.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    _needs_cache = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="code" href="class_filter_chain_byte_stream.xhtml#a15f93aaf3d558c77acc88004f5c56a73">   74</a></span>&#160;<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> <a class="code" href="class_filter_chain_byte_stream.xhtml#a15f93aaf3d558c77acc88004f5c56a73">FilterChainByteStream::ReadBytes</a>(<span class="keywordtype">void</span>* bytes, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> len)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (len == 0) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> (_needs_cache)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (_cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>() == 0 &amp;&amp; !_cacheHasBeenFilledUp)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            CacheBytes();</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> ReadBytesFromCache(bytes, len);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span> (_read_cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>() &gt; 0)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> toMove = std::min(len, _read_cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="filter__chain__byte__stream_8cpp.xhtml#aa64afdc6505183049ef1641be9fc5b49">::memcpy_s</a>(bytes, len, _read_cache.<a class="code" href="class_byte_buffer.xhtml#aac5f56b73401b5698d22eb2b57fd37c1">GetBytes</a>(), toMove);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        _read_cache.<a class="code" href="class_byte_buffer.xhtml#ad0f430eb0fdc4da5c2883fc2e56da038">RemoveBytes</a>(toMove);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> toMove;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">else</span> </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">if</span> (!_input-&gt;IsOpen())</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> result = _input-&gt;ReadBytes(bytes, len);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">if</span> (result == 0)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        result = FilterBytes(bytes, result);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span> (result == 0)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> toMove = std::min(len, _read_cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>());</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span> (toMove &gt; 0)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <a class="code" href="filter__chain__byte__stream_8cpp.xhtml#aa64afdc6505183049ef1641be9fc5b49">::memcpy_s</a>(bytes, len, _read_cache.<a class="code" href="class_byte_buffer.xhtml#aac5f56b73401b5698d22eb2b57fd37c1">GetBytes</a>(), toMove);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            _read_cache.<a class="code" href="class_byte_buffer.xhtml#ad0f430eb0fdc4da5c2883fc2e56da038">RemoveBytes</a>(toMove);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">return</span> toMove;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> FilterChainByteStream::FilterBytes(<span class="keywordtype">void</span>* bytes, size_type len)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (len == 0) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> result = len;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="class_byte_buffer.xhtml">ByteBuffer</a> buf(reinterpret_cast&lt;uint8_t*&gt;(bytes), len);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    buf.SetUsesSecureErasure();</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_filters.size(); i++)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="filter_8h.xhtml#a841ee8380970cd004a352a1e3177f902">ContentFilterPtr</a> filter = m_filters.at(i);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <a class="code" href="class_filter_context.xhtml">FilterContext</a> * filterContext = m_filterContexts.at(i).get();</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> streamPos = 0;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment">// A filter may support ranges, but may be invoked in a non-HTTP-byte-range scenario</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="class_range_filter_context.xhtml">RangeFilterContext</a> *filterContextRange = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="class_range_filter_context.xhtml">RangeFilterContext</a> *<span class="keyword">&gt;</span>(filterContext);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">if</span> (filterContextRange != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="comment">// ASSERT i == 0 ? (decryption filter always first, can access raw byte stream directly)</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <a class="code" href="class_byte_range.xhtml">ByteRange</a> byteRange;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">if</span> (!_needs_cache)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="comment">// ASSERT m_filters.size() == 1 ? (decryption filter on its own might be subject to sequential consecutive byte chunks)</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">if</span> (!_input-&gt;IsOpen())</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keywordflow">throw</span> std::logic_error(<span class="stringliteral">&quot;ChainLinkProcessor: Byte stream not open?!&quot;</span>);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                streamPos = _input-&gt;Position();</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                byteRange.<a class="code" href="class_byte_range.xhtml#a514f78efa90b5ea65d4d4c6339fab36b">Location</a>((uint32_t)(streamPos - result));</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                byteRange.<a class="code" href="class_byte_range.xhtml#aafbe9fa6b8291fbdaba0728b6b747772">Length</a>((uint32_t)result);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            filterContextRange-&gt;<a class="code" href="class_range_filter_context.xhtml#a5b203d21fe6f5cab96b3de61f8fb7c08">GetByteRange</a>() = byteRange;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            filterContextRange-&gt;<a class="code" href="class_range_filter_context.xhtml#a5d7c81a963360f2ea7648fe9f63b1fae">SetSeekableByteStream</a>(_input.get());</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> filteredLen = 0;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordtype">void</span> *filteredData = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (filterContextRange != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            filteredData = filter-&gt;FilterData(filterContext, <span class="keyword">nullptr</span>, 0, &amp;filteredLen);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            filteredData = filter-&gt;FilterData(filterContext, buf.GetBytes(), buf.GetBufferSize(), &amp;filteredLen);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (filterContextRange != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            filterContextRange-&gt;<a class="code" href="class_range_filter_context.xhtml#a5b203d21fe6f5cab96b3de61f8fb7c08">GetByteRange</a>().<a class="code" href="class_byte_range.xhtml#ab47e13c37e47ef5eab1c6821921c50b3">Reset</a>();</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            filterContextRange-&gt;<a class="code" href="class_range_filter_context.xhtml#ae4b98164d398fd8c659be1f917660190">ResetSeekableByteStream</a>();</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">if</span> (!_needs_cache)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">if</span> (_input-&gt;IsOpen())</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    _input-&gt;Seek(streamPos, std::ios::beg);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">if</span> (filteredData == <span class="keyword">nullptr</span> || filteredLen == 0)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        {</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">if</span> (filteredData != <span class="keyword">nullptr</span> &amp;&amp; filteredData != buf.GetBytes())</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">if</span> (filterContextRange == <span class="keyword">nullptr</span> || reinterpret_cast&lt;uint8_t*&gt;(filteredData) != filterContextRange-&gt;<a class="code" href="class_range_filter_context.xhtml#a913e703b2848f9b7f4971e432d7e8fd9">GetCurrentTemporaryByteBuffer</a>())</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">delete</span>[] <span class="keyword">reinterpret_cast&lt;</span>uint8_t*<span class="keyword">&gt;</span>(filteredData);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        result = filteredLen;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">if</span> (filteredData != buf.GetBytes())</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// NOTE: destroys previous buffer, allocates new memory block! (memcpy)</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            buf = <a class="code" href="class_byte_buffer.xhtml">ByteBuffer</a>(reinterpret_cast&lt;uint8_t*&gt;(filteredData), result);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordflow">if</span> (filterContextRange == <span class="keyword">nullptr</span> || reinterpret_cast&lt;uint8_t*&gt;(filteredData) != filterContextRange-&gt;<a class="code" href="class_range_filter_context.xhtml#a913e703b2848f9b7f4971e432d7e8fd9">GetCurrentTemporaryByteBuffer</a>())</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keyword">delete</span>[] <span class="keyword">reinterpret_cast&lt;</span>uint8_t*<span class="keyword">&gt;</span>(filteredData);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (result &lt; buf.GetBufferSize())</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            buf.RemoveBytes(buf.GetBufferSize() - result, result);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment">// NOTE: destroys previous buffer, allocates new memory block! (memcpy)</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="comment">//buf = ByteBuffer(reinterpret_cast&lt;uint8_t*&gt;(filteredData), result);</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (result &gt; buf.GetBufferSize())</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="comment">// This should never happen! (returned more bytes than could fit!)</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="comment">// NOTE: destroys previous buffer, allocates new memory block! (memcpy)</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            buf = <a class="code" href="class_byte_buffer.xhtml">ByteBuffer</a>(reinterpret_cast&lt;uint8_t*&gt;(filteredData), result);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    _read_cache = std::move(buf);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// ASSERT result == _read_cache.GetBufferSize()</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> FilterChainByteStream::ReadBytesFromCache(<span class="keywordtype">void</span>* bytes, size_type len)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">if</span> (len == 0) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> numToRead = std::min(len, <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a>(_cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>()));</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="filter__chain__byte__stream_8cpp.xhtml#aa64afdc6505183049ef1641be9fc5b49">::memcpy_s</a>(bytes, len, _cache.<a class="code" href="class_byte_buffer.xhtml#aac5f56b73401b5698d22eb2b57fd37c1">GetBytes</a>(), numToRead);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    _cache.<a class="code" href="class_byte_buffer.xhtml#ad0f430eb0fdc4da5c2883fc2e56da038">RemoveBytes</a>(numToRead);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">return</span> numToRead;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keywordtype">void</span> FilterChainByteStream::CacheBytes()</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// read everything from the input stream</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">#define _TMP_BUF_LEN 16*1024</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor"></span>    uint8_t buf[<a class="code" href="filter__chain__byte__stream_8cpp.xhtml#ae626cb2b13ad4312ed759c39e18df9a4">_TMP_BUF_LEN</a>] = {};</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">while</span> (_input-&gt;AtEnd() == <span class="keyword">false</span>)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> numRead = _input-&gt;ReadBytes(buf, _TMP_BUF_LEN);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span> (numRead == 0)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">if</span> (numRead &gt; 0)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            _cache.<a class="code" href="class_byte_buffer.xhtml#af2aa30fd37677dd909fab96fd5e8503c">AddBytes</a>(buf, numRead);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">if</span> (_cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>() == 0) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="comment">// filter everything completely</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">size_type</a> filtered = FilterBytes(_cache.<a class="code" href="class_byte_buffer.xhtml#aac5f56b73401b5698d22eb2b57fd37c1">GetBytes</a>(), _cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>());</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">if</span> (filtered &gt; 0)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="comment">// ASSERT filtered == _read_cache.GetBufferSize()</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        _cache = std::move(_read_cache);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        _read_cache.<a class="code" href="class_byte_buffer.xhtml#ad0f430eb0fdc4da5c2883fc2e56da038">RemoveBytes</a>(_read_cache.<a class="code" href="class_byte_buffer.xhtml#a27ee11c902a100a726d4b502e48d6af9">GetBufferSize</a>());</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        _cacheHasBeenFilledUp = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// this potentially contains decrypted data, so use secure erasure</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    _cache.<a class="code" href="class_byte_buffer.xhtml#afadcfc82fa2fa4906889fb00dfdcc8e4">SetUsesSecureErasure</a>();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;EPUB3_END_NAMESPACE</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d81697a4833f1d44a7e9bc8387132cc4.xhtml">ePub</a></li><li class="navelem"><a class="el" href="filter__chain__byte__stream_8cpp.xhtml">filter_chain_byte_stream.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
