<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/basic.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('basic_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">basic.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="basic_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  basic.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-12-20.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef ePub3_basic_h</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define ePub3_basic_h</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="base_8h.xhtml">ePub3/base.h</a>&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//#include &quot;alphanum.hpp&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;libxml/xmlstring.h&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;ePub3/xml/xmlstring.h&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// shorthand forms of C++11 pointer objects</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// These template aliases allow the use of shorthand declarations for different</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// pointer types, i.e. Shared&lt;Container&gt; means</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// std::shared_ptr&lt;Container&gt;.</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">using</span> std::shared_ptr;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">using</span> std::weak_ptr;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">using</span> std::unique_ptr;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_ALIAS_TEMPLATES)</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">using</span> <a class="code" href="classshared__vector.xhtml">shared_vector</a> = std::vector&lt;std::shared_ptr&lt;_Tp&gt;&gt;;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">using</span> <a class="code" href="classshared__list.xhtml">shared_list</a> = std::list&lt;std::shared_ptr&lt;_Tp&gt;&gt;;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml">   60</a></span>&#160;<span class="keyword">class </span><a class="code" href="classshared__vector.xhtml">shared_vector</a> : <span class="keyword">public</span> std::vector&lt;std::shared_ptr&lt;_Tp&gt;&gt;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">typedef</span> std::vector&lt;std::shared_ptr&lt;_Tp&gt;&gt;   _Base;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#ad6926fd790a98f7a98d661715cb2a721">   65</a></span>&#160;    <a class="code" href="classshared__vector.xhtml#ad6926fd790a98f7a98d661715cb2a721">shared_vector</a>() <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_default_constructible&lt;typename _Base::allocator_type&gt;::value) : _Base() {}</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#ad23d7a4a12814a608f1c8a1ad5496c28">   66</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classshared__vector.xhtml#ad23d7a4a12814a608f1c8a1ad5496c28">shared_vector</a>(<span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __alloc) : _Base(__alloc) {}</div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#a51d6b3df06d10d815b2b9c2f29a18cdf">   67</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classshared__vector.xhtml#a51d6b3df06d10d815b2b9c2f29a18cdf">shared_vector</a>(<span class="keyword">typename</span> _Base::size_type __n) : _Base(__n) {}</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#ae4cc3e39c7cdd52b1d35afa9e20def24">   68</a></span>&#160;    <a class="code" href="classshared__vector.xhtml#ae4cc3e39c7cdd52b1d35afa9e20def24">shared_vector</a>(<span class="keyword">typename</span> _Base::size_type __n, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::value_type&amp; __v, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __a = <span class="keyword">typename</span> _Base::allocator_type()) : _Base(__n, __v, __a) {}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _InputIterator&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#ade5bc0642e871b2b372f78265174a6df">   70</a></span>&#160;    <a class="code" href="classshared__vector.xhtml#ade5bc0642e871b2b372f78265174a6df">shared_vector</a>(_InputIterator __f, _InputIterator __l, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __a = <span class="keyword">typename</span> _Base::allocator_type()) : _Base(__f, __l, __a) {}</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#aa7262620668088719ab4a9577bb1a631">   71</a></span>&#160;    <a class="code" href="classshared__vector.xhtml#aa7262620668088719ab4a9577bb1a631">shared_vector</a>(<span class="keyword">const</span> <a class="code" href="classshared__vector.xhtml">shared_vector</a>&amp; __o) : _Base(__o) {}</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#a69499e9035737eedb236cf66b627ab31">   72</a></span>&#160;    <a class="code" href="classshared__vector.xhtml#a69499e9035737eedb236cf66b627ab31">shared_vector</a>(<a class="code" href="classshared__vector.xhtml">shared_vector</a>&amp;&amp; __o) : _Base(std::move(__o)) {}</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classshared__vector.xhtml#ad6926fd790a98f7a98d661715cb2a721">shared_vector</a>(std::initializer_list&lt;typename _Base::value_type&gt; __il) : _Base(__il) {}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classshared__vector.xhtml#ad6926fd790a98f7a98d661715cb2a721">shared_vector</a>(std::initializer_list&lt;typename _Base::value_type&gt; __il, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __a) : _Base(__il, __a) {}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#aa55e0238b5b014e8c0352d6048b48575">   77</a></span>&#160;<span class="preprocessor"></span>    <a class="code" href="classshared__vector.xhtml#aa55e0238b5b014e8c0352d6048b48575">~shared_vector</a>() { _Base::~_Base(); }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    </div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#a0a6f3a017c943badca9b4997ede6c21c">   79</a></span>&#160;    <a class="code" href="classshared__vector.xhtml">shared_vector</a>&amp; <a class="code" href="classshared__vector.xhtml#a0a6f3a017c943badca9b4997ede6c21c">operator=</a>(<span class="keyword">const</span> <a class="code" href="classshared__vector.xhtml">shared_vector</a>&amp; __o) { _Base::operator=(__o); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="code" href="classshared__vector.xhtml#a15c4833b6e281a7526aca590e8df4afd">   80</a></span>&#160;    <a class="code" href="classshared__vector.xhtml">shared_vector</a>&amp; <a class="code" href="classshared__vector.xhtml#a15c4833b6e281a7526aca590e8df4afd">operator=</a>(<a class="code" href="classshared__vector.xhtml">shared_vector</a>&amp;&amp; __o) { _Base::operator=(std::move(__o)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;};</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="classshared__list.xhtml">   84</a></span>&#160;<span class="keyword">class </span><a class="code" href="classshared__list.xhtml">shared_list</a> : <span class="keyword">public</span> std::list&lt;std::shared_ptr&lt;_Tp&gt;&gt;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">typedef</span> std::list&lt;std::shared_ptr&lt;_Tp&gt;&gt;     _Base;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#a4b3822c66af70cd588e81dde0b1f3875">   89</a></span>&#160;    <a class="code" href="classshared__list.xhtml#a4b3822c66af70cd588e81dde0b1f3875">shared_list</a>() <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_default_constructible&lt;typename _Base::value_type&gt;::value) : _Base() {}</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#aa2b390ed273bfb194e3c9accca7566be">   90</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classshared__list.xhtml#aa2b390ed273bfb194e3c9accca7566be">shared_list</a>(<span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __a) : _Base(__a) {}</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#a9500f1512dc8bc18dce34b7f96f4052d">   91</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classshared__list.xhtml#a9500f1512dc8bc18dce34b7f96f4052d">shared_list</a>(<span class="keyword">typename</span> _Base::size_type __n) : _Base(__n) {}</div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#aa740817fd29e738a6dd4932d80438670">   92</a></span>&#160;    <a class="code" href="classshared__list.xhtml#aa740817fd29e738a6dd4932d80438670">shared_list</a>(<span class="keyword">typename</span> _Base::size_type __n, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::value_type&amp; __v) : _Base(__n, __v) {}</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#ae104375914cca536ba5be81bc46d63c4">   93</a></span>&#160;    <a class="code" href="classshared__list.xhtml#ae104375914cca536ba5be81bc46d63c4">shared_list</a>(<span class="keyword">typename</span> _Base::size_type __n, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::value_type&amp; __v, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __a) : _Base(__n, __v, __a) {}</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Iter&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#a4c95f1faef060d57bd624079a6a587d7">   95</a></span>&#160;    <a class="code" href="classshared__list.xhtml#a4c95f1faef060d57bd624079a6a587d7">shared_list</a>(_Iter __f, _Iter __l) : _Base(__f, __l) {}</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Iter&gt;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#a127e0e3af668b097fdf8a2faefd1a7c1">   97</a></span>&#160;    <a class="code" href="classshared__list.xhtml#a127e0e3af668b097fdf8a2faefd1a7c1">shared_list</a>(_Iter __f, _Iter __l, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __a) : _Base(__f, __l, __a) {}</div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#ae5a5fd81da0635b6a08c8570a3d9d939">   98</a></span>&#160;    <a class="code" href="classshared__list.xhtml#ae5a5fd81da0635b6a08c8570a3d9d939">shared_list</a>(<span class="keyword">const</span> <a class="code" href="classshared__list.xhtml">shared_list</a>&amp; __o) : _Base(__o) {}</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#a55bd150b33e37ece169661eb5e5e2e6f">   99</a></span>&#160;    <a class="code" href="classshared__list.xhtml#a55bd150b33e37ece169661eb5e5e2e6f">shared_list</a>(<a class="code" href="classshared__list.xhtml">shared_list</a>&amp;&amp; __o) : _Base(std::move(__o)) {}</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classshared__list.xhtml#a4b3822c66af70cd588e81dde0b1f3875">shared_list</a>(std::initializer_list&lt;typename _Base::value_type&gt; __il) : _Base(__il) {}</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classshared__list.xhtml#a4b3822c66af70cd588e81dde0b1f3875">shared_list</a>(std::initializer_list&lt;typename _Base::value_type&gt; __il, <span class="keyword">const</span> <span class="keyword">typename</span> _Base::allocator_type&amp; __a) : _Base(__il, __a) {}</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#a8cb62e163899343a811e145c0355529d">  104</a></span>&#160;<span class="preprocessor"></span>    <a class="code" href="classshared__list.xhtml#a8cb62e163899343a811e145c0355529d">~shared_list</a>() { _Base::~_Base(); }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#a91fbf4c74fabd3a05d934d9e79a5827b">  106</a></span>&#160;    <a class="code" href="classshared__list.xhtml">shared_list</a>&amp; <a class="code" href="classshared__list.xhtml#a91fbf4c74fabd3a05d934d9e79a5827b">operator=</a>(<span class="keyword">const</span> <a class="code" href="classshared__list.xhtml">shared_list</a>&amp; __o) { _Base::operator=(__o); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="classshared__list.xhtml#acb41d67b9848a3599f5810e5bcbe1b5f">  107</a></span>&#160;    <a class="code" href="classshared__list.xhtml">shared_list</a>&amp; <a class="code" href="classshared__list.xhtml#acb41d67b9848a3599f5810e5bcbe1b5f">operator=</a>(<a class="code" href="classshared__list.xhtml">shared_list</a>&amp;&amp; __o) { _Base::operator=(std::move(__o)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;};</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">// nicer way of constructing a C++ string from randomly-typed arguments</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">inline</span> std::stringstream&amp; __format(std::stringstream&amp; s) { <span class="keywordflow">return</span> s; }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Arg1, <span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::stringstream&amp; __format(std::stringstream&amp; s, <span class="keyword">const</span> Arg1&amp; arg1, <span class="keyword">const</span> Args&amp;... args)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    s &lt;&lt; arg1;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> __format(s, args...);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> Args&amp;... args)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> __format(s, args...).str();</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">#else   // !EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1&gt;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    s &lt;&lt; a1;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2&gt;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2, <span class="keyword">typename</span> _A3&gt;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2, <span class="keyword">const</span> _A3&amp; a3)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; a3;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2, <span class="keyword">typename</span> _A3, <span class="keyword">typename</span> _A4&gt;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2, <span class="keyword">const</span> _A3&amp; a3,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                               <span class="keyword">const</span> _A4&amp; a4)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; a3 &lt;&lt; a4;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2, <span class="keyword">typename</span> _A3, <span class="keyword">typename</span> _A4, <span class="keyword">typename</span> _A5&gt;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2, <span class="keyword">const</span> _A3&amp; a3,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                               <span class="keyword">const</span> _A4&amp; a4, <span class="keyword">const</span> _A5&amp; a5)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; a3 &lt;&lt; a4 &lt;&lt; a5;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2, <span class="keyword">typename</span> _A3, <span class="keyword">typename</span> _A4, <span class="keyword">typename</span> _A5, <span class="keyword">typename</span> _A6&gt;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2, <span class="keyword">const</span> _A3&amp; a3,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                               <span class="keyword">const</span> _A4&amp; a4, <span class="keyword">const</span> _A5&amp; a5, <span class="keyword">const</span> _A6&amp; a6)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; a3 &lt;&lt; a4 &lt;&lt; a5 &lt;&lt; a6;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2, <span class="keyword">typename</span> _A3, <span class="keyword">typename</span> _A4, <span class="keyword">typename</span> _A5, <span class="keyword">typename</span> _A6,</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;          <span class="keyword">typename</span> _A7&gt;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2, <span class="keyword">const</span> _A3&amp; a3,</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                               <span class="keyword">const</span> _A4&amp; a4, <span class="keyword">const</span> _A5&amp; a5, <span class="keyword">const</span> _A6&amp; a6,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                               <span class="keyword">const</span> _A7&amp; a7)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; a3 &lt;&lt; a4 &lt;&lt; a5 &lt;&lt; a6 &lt;&lt; a7;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2, <span class="keyword">typename</span> _A3, <span class="keyword">typename</span> _A4, <span class="keyword">typename</span> _A5, <span class="keyword">typename</span> _A6,</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;          <span class="keyword">typename</span> _A7, <span class="keyword">typename</span> _A8&gt;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2, <span class="keyword">const</span> _A3&amp; a3,</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                               <span class="keyword">const</span> _A4&amp; a4, <span class="keyword">const</span> _A5&amp; a5, <span class="keyword">const</span> _A6&amp; a6,</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                               <span class="keyword">const</span> _A7&amp; a7, <span class="keyword">const</span> _A8&amp; a8)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;{</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; a3 &lt;&lt; a4 &lt;&lt; a5 &lt;&lt; a6 &lt;&lt; a7 &lt;&lt; a8;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _A1, <span class="keyword">typename</span> _A2, <span class="keyword">typename</span> _A3, <span class="keyword">typename</span> _A4, <span class="keyword">typename</span> _A5, <span class="keyword">typename</span> _A6,</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;          <span class="keyword">typename</span> _A7, <span class="keyword">typename</span> _A8, <span class="keyword">typename</span> _A9&gt;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string _Str(<span class="keyword">const</span> _A1&amp; a1, <span class="keyword">const</span> _A2&amp; a2, <span class="keyword">const</span> _A3&amp; a3,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                               <span class="keyword">const</span> _A4&amp; a4, <span class="keyword">const</span> _A5&amp; a5, <span class="keyword">const</span> _A6&amp; a6,</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                               <span class="keyword">const</span> _A7&amp; a7, <span class="keyword">const</span> _A8&amp; a8, <span class="keyword">const</span> _A9&amp; a9)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::stringstream s;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    s &lt;&lt; a1 &lt;&lt; a2 &lt;&lt; a3 &lt;&lt; a4 &lt;&lt; a5 &lt;&lt; a6 &lt;&lt; a7 &lt;&lt; a8 &lt;&lt; a9;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">return</span> s.str();</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">#endif  // !EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_USER_LITERALS)</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">// C++11 user-defined literals</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keyword">inline</span> <a class="code" href="__compiler_8h.xhtml#acaa06fbc27c59926a41e7575667e5280">CONSTEXPR</a> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>* <span class="keyword">operator</span> <span class="stringliteral">&quot;&quot;</span> _xml (<span class="keywordtype">char</span> <span class="keyword">const</span> *s, std::size_t len)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*)s;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#endif  // EPUB_COMPILER_SUPPORTS(CXX_USER_LITERALS)</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="basic_8h.xhtml">basic.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
