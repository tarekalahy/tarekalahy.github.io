<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/executor.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('executor_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">executor.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="executor_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  executor.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-08-28.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3__executor__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3__executor__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;ePub3/epub3.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;atomic&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;condition_variable&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="invoke_8h.xhtml">ePub3/utilities/invoke.h</a>&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">    Header &lt;executor&gt; synopsis</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">        class executor;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">        class scheduled_executor;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">        executor* singleton_inline_executor();</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">        class executor {</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">        public:</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">            virtual ~executor();</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">            virtual void add(function&lt;void()&gt; closure) = 0;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">            virtual size_t uninitiated_task_count() const = 0;</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">        };</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">        class scheduled_executor : public executor {</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">        public:</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">            virtual void add_at(chrono::system_clock::time_point&amp; abs_time, function&lt;void()&gt; closure) = 0;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">            virtual void add_after(chrono::system_clock::duration&amp; rel_time, function&lt;void()&gt; closure) = 0;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">        };</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    Header &lt;thread_pool&gt; synopsis</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">        class thread_pool;</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">        class thread_pool : public scheduled_executor {</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">        public:</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">            explicit thread_pool(int num_threads);</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">            virtual ~thread_pool();</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">            </span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">            // [executor methods omitted]</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">        };</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">    Header &lt;serial_executor&gt; synopsis</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">        class serial_executor;</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">        class serial_executor : public executor {</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">        public:</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">            explicit serial_executor(executor&amp; underlying_executor);</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">            virtual ~serial_executor();</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">            </span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">            executor* underlying_executor();</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">            </span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">            // [executor methods omitted]</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">        };</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">    Header &lt;loop_executor&gt; synopsis</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">        class loop_executor;</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">        class loop_executor : public executor {</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">        public:</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">            loop_executor();</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">            virtual ~loop_executor();</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">            </span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">            void loop();</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">            void run_queued_closures();</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">            bool try_run_one_closure();</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">            void make_loop_exit();</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">            </span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">            // [executor methods omitted]</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">        };</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    Header &lt;inline_executor&gt; synopsis</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">        class inline_executor;</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">        class inline_executor : public executor {</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">        public:</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">            explicit inline_executor();</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">            // [executor methods omitted]</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">        };</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">    Header &lt;thread_executor&gt; synopsis</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">        class thread_executor;</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">        class thread_executor : public executor {</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">        public:</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">            explicit thread_executor();</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">            // [executor methods omitted]</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">        };</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> </span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - &lt;executor&gt;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">class </span><a class="code" href="classexecutor.xhtml">executor</a>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">class </span><a class="code" href="classscheduled__executor.xhtml">scheduled_executor</a>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">class </span><a class="code" href="classthread__pool.xhtml">thread_pool</a>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">class </span><a class="code" href="classserial__executor.xhtml">serial_executor</a>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">class </span><a class="code" href="classloop__executor.xhtml">loop_executor</a>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">class </span><a class="code" href="classinline__executor.xhtml">inline_executor</a>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">class </span><a class="code" href="classthread__executor.xhtml">thread_executor</a>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">class </span><a class="code" href="class____thread__pool__impl__stdcpp.xhtml">__thread_pool_impl_stdcpp</a>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor"></span><span class="keyword">class </span>__thread_pool_impl_winrt;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="code" href="classexecutor.xhtml">  142</a></span>&#160;<span class="keyword">class </span><a class="code" href="classexecutor.xhtml">executor</a></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    : <span class="keyword">public</span> std::enable_shared_from_this&lt;executor&gt;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;{</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00146"></a><span class="lineno"><a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">  146</a></span>&#160;    <span class="keyword">typedef</span> std::function&lt;void()&gt;   <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="code" href="classexecutor.xhtml#a96d1e80e683a71179fc9df4034567ead">  150</a></span>&#160;    <a class="code" href="classexecutor.xhtml#a96d1e80e683a71179fc9df4034567ead">~executor</a>()</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {}</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classexecutor.xhtml#abaf6f9bae2715d1320b00178653cb032">add</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) = 0;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classexecutor.xhtml#a33c1bb6f80a61a87779723dd87fb9bc3">uninitiated_task_count</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">inline</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">static</span></div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">  162</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">_run_closure</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="comment">// terminate if a closure throws an exception</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="comment">// this matches the paper&#39;s guidance</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">try</span> {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <a class="code" href="invoke_8h.xhtml#a3d9a8215dd7ae7b68c9ef42cb495ef6f">invoke</a>(closure);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            } <span class="keywordflow">catch</span> (...) {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#ifndef NDEBUG</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor"></span>                std::exception_ptr __exc = std::current_exception();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">try</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    std::rethrow_exception(__exc);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keywordflow">catch</span> (std::exception&amp; __e)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    std::cerr &lt;&lt; <span class="stringliteral">&quot;executor::_run_closure: caught exception&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    std::cerr &lt;&lt; __e.what() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor"></span>                std::terminate();</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="code" href="classexecutor.xhtml#a07061671718bb8d34ade1bdedf4192e7">  185</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="class____thread__pool__impl__stdcpp.xhtml">__thread_pool_impl_stdcpp</a>;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor"></span>    <span class="keyword">friend</span> <span class="keyword">class </span>__thread_pool_impl_winrt;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;};</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="code" href="classscheduled__executor.xhtml">  192</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscheduled__executor.xhtml">scheduled_executor</a></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    : <span class="keyword">public</span> <a class="code" href="classexecutor.xhtml">executor</a></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classscheduled__executor.xhtml#a2ebac0f9012128a9c9cfe68f58eac891">add_at</a>(std::chrono::system_clock::time_point&amp; abs_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) = 0;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classscheduled__executor.xhtml#adfe091e0d3ead238041b16f50bb9f101">add_after</a>(std::chrono::system_clock::duration&amp; rel_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) = 0;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Clock, <span class="keyword">class</span> _Duration&gt;</div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="code" href="classscheduled__executor.xhtml#af38ce10856930deec551e32f0faeb610">  203</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classscheduled__executor.xhtml#a2ebac0f9012128a9c9cfe68f58eac891">add_at</a>(std::chrono::time_point&lt;_Clock, _Duration&gt;&amp; abs_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <a class="code" href="classscheduled__executor.xhtml#a2ebac0f9012128a9c9cfe68f58eac891">add_at</a>(std::chrono::time_point_cast&lt;std::chrono::system_clock::duration&gt;(abs_time), closure);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Rep, <span class="keyword">class</span> _Period&gt;</div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="code" href="classscheduled__executor.xhtml#a8df7cda03778a4212813a33e1e231453">  209</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classscheduled__executor.xhtml#adfe091e0d3ead238041b16f50bb9f101">add_after</a>(std::chrono::duration&lt;_Rep, _Period&gt;&amp; rel_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <a class="code" href="classscheduled__executor.xhtml#adfe091e0d3ead238041b16f50bb9f101">add_after</a>(std::chrono::duration_cast&lt;std::chrono::system_clock::duration&gt;(rel_time), closure);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;};</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - &lt;loop_executor&gt;</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml">  220</a></span>&#160;<span class="keyword">class </span><a class="code" href="classloop__executor.xhtml">loop_executor</a></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    : <span class="keyword">public</span> <a class="code" href="classexecutor.xhtml">executor</a></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    std::queue&lt;closure_type&gt;    _queue;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    std::atomic&lt;bool&gt;           _running_closures;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::atomic&lt;bool&gt;           _make_loop_exit;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#a44e9eb394b927456071c6a62438d9b9c">  230</a></span>&#160;    <a class="code" href="classloop__executor.xhtml#a44e9eb394b927456071c6a62438d9b9c">loop_executor</a>()</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        : _queue(), _running_closures(false), _make_loop_exit(false)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {}</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="classloop__executor.xhtml#a613359ccc2403e353624a9b25b48e8f7">~loop_executor</a>();</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#ad0ace701f8c33209d93a4c933090b651">  238</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classloop__executor.xhtml#ad0ace701f8c33209d93a4c933090b651">add</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            _queue.push(closure);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#a4b40f33cdaa5f895f3926af403e31bf8">  244</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classloop__executor.xhtml#a4b40f33cdaa5f895f3926af403e31bf8">uninitiated_task_count</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keywordflow">return</span> _queue.size();</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classloop__executor.xhtml#a0cb3adb1091176046436b19b8c37eb39">loop</a>();</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classloop__executor.xhtml#a19da15a3e578600b92f2a8ad006d5fde">run_queued_closures</a>();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classloop__executor.xhtml#a36c134c68839710a3905b05e703f9b60">try_one_closure</a>();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#a0038eb4f38b70c96c6a28eb137e8ca3d">  254</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classloop__executor.xhtml#a0038eb4f38b70c96c6a28eb137e8ca3d">make_loop_exit</a>()</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            _make_loop_exit = (bool)_running_closures;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordtype">void</span> _set_running(<span class="keyword">const</span> <span class="keywordtype">char</span>* errorText);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;};</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="keyword">inline</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keywordtype">void</span> loop_executor::_set_running(<span class="keyword">const</span> <span class="keywordtype">char</span> *errorText)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordtype">bool</span> notRunning = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordtype">bool</span> ok = _running_closures.compare_exchange_strong(notRunning, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    assert(ok);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">if</span> ( !ok )</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">throw</span> std::system_error(<a class="code" href="namespacestd.xhtml#aff0af8d95df7ed68c7e9f53f5387e68d">std::make_error_code</a>(std::errc::device_or_resource_busy), errorText);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keyword">inline</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00275"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#a613359ccc2403e353624a9b25b48e8f7">  275</a></span>&#160;<a class="code" href="classloop__executor.xhtml#a613359ccc2403e353624a9b25b48e8f7">loop_executor::~loop_executor</a>()</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    _set_running(<span class="stringliteral">&quot;loop_executor: destructor called while running closures&quot;</span>);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - &lt;serial_executor&gt;</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00284"></a><span class="lineno"><a class="code" href="classserial__executor.xhtml">  284</a></span>&#160;<span class="keyword">class </span><a class="code" href="classserial__executor.xhtml">serial_executor</a></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    : <span class="keyword">public</span> <a class="code" href="classexecutor.xhtml">executor</a></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;{</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="classexecutor.xhtml">executor</a>*                   _underlying_executor;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    std::queue&lt;closure_type&gt;    _queue;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    std::atomic_int_fast32_t    _running;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    std::atomic&lt;bool&gt;           _exiting;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    std::mutex                  _lock;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    std::condition_variable     _exit_condition;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">explicit</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="code" href="classserial__executor.xhtml#aea904e7cf824445da566688d32a4d63f">  297</a></span>&#160;    <a class="code" href="classserial__executor.xhtml#aea904e7cf824445da566688d32a4d63f">serial_executor</a>(<a class="code" href="classexecutor.xhtml">executor</a>&amp; <a class="code" href="classserial__executor.xhtml#a1e0a17075eb0eebc32529bada4ea68e2">underlying_executor</a>)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        : _underlying_executor(&amp;underlying_executor),</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;          _queue(),</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;          _running(0),</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;          _exiting(false),</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;          _lock(),</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;          _exit_condition()</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keywordflow">if</span> (_underlying_executor == <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;serial_executor: underlying_executor cannot be NULL&quot;</span>);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="classserial__executor.xhtml#ad10113f223fda4e86b0b89abcc3bd733">~serial_executor</a>();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00314"></a><span class="lineno"><a class="code" href="classserial__executor.xhtml#a1e0a17075eb0eebc32529bada4ea68e2">  314</a></span>&#160;    <a class="code" href="classexecutor.xhtml">executor</a>&amp; <a class="code" href="classserial__executor.xhtml#a1e0a17075eb0eebc32529bada4ea68e2">underlying_executor</a>()</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="keywordflow">return</span> *_underlying_executor;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classserial__executor.xhtml#a074309e34df41071ef50dff9a8817a63">add</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="code" href="classserial__executor.xhtml#a661a589e0d30c6c9027829d59039bf39">  323</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classserial__executor.xhtml#a661a589e0d30c6c9027829d59039bf39">uninitiated_task_count</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">return</span> _queue.size();</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;};</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - &lt;inline_executor&gt;</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00334"></a><span class="lineno"><a class="code" href="classinline__executor.xhtml">  334</a></span>&#160;<span class="keyword">class </span><a class="code" href="classinline__executor.xhtml">inline_executor</a></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    : <span class="keyword">public</span> <a class="code" href="classexecutor.xhtml">executor</a></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">explicit</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00339"></a><span class="lineno"><a class="code" href="classinline__executor.xhtml#ad73a4662c35c9cb4dc83a885793fdeea">  339</a></span>&#160;    <a class="code" href="classinline__executor.xhtml#ad73a4662c35c9cb4dc83a885793fdeea">inline_executor</a>()</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        {}</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00343"></a><span class="lineno"><a class="code" href="classinline__executor.xhtml#a8a2c89edb2e0dd03f1e9618224ca0516">  343</a></span>&#160;    <a class="code" href="classinline__executor.xhtml#a8a2c89edb2e0dd03f1e9618224ca0516">~inline_executor</a>()</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        {}</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00347"></a><span class="lineno"><a class="code" href="classinline__executor.xhtml#af5e9ca569e3aa1cba3973678e97a3866">  347</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classinline__executor.xhtml#af5e9ca569e3aa1cba3973678e97a3866">add</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">_run_closure</a>(closure);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00353"></a><span class="lineno"><a class="code" href="classinline__executor.xhtml#aa533e355d0a672be895aa87b31c89877">  353</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classinline__executor.xhtml#aa533e355d0a672be895aa87b31c89877">uninitiated_task_count</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;};</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - &lt;thread_executor&gt;</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00364"></a><span class="lineno"><a class="code" href="classthread__executor.xhtml">  364</a></span>&#160;<span class="keyword">class </span><a class="code" href="classthread__executor.xhtml">thread_executor</a></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    : <span class="keyword">public</span> <a class="code" href="classexecutor.xhtml">executor</a></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">//    std::map&lt;std::thread::id, std::thread&gt;  __threads_;</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    std::mutex                              __lock_;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    std::condition_variable                 __cleanup_cv_;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    std::atomic_size_t                      __pending_count_;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    std::atomic_size_t                      __running_count_;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    std::atomic&lt;bool&gt;                       __destruct_;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">    class __thread_reaper</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">    {</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">        typedef std::pair&lt;thread_executor*, std::thread::id&gt;    _ReapPair;</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">        std::thread             __reaper_thread_;</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">        std::queue&lt;_ReapPair&gt;   __to_reap_;</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">        std::mutex              __lock_;</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">        std::condition_variable __wake_;</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">        std::atomic&lt;bool&gt;       __destruct_;</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">    public:</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">        FORCE_INLINE</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">        __thread_reaper()</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">            : __to_reap_(),</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">              __lock_(),</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">              __wake_(),</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">              __destruct_(),</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">              __reaper_thread_(std::mem_fn(&amp;__thread_reaper::_run_reaper_thread), this)</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">            {}</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment">        ~__thread_reaper()</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">                __destruct_ = true;</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">                __wake_.notify_all();</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">                if (__reaper_thread_.joinable())</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">                    __reaper_thread_.join();</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">        FORCE_INLINE</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">        void reap_thread(thread_executor* __exec, std::thread::id __thr)</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">                if (__destruct_)</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment">                    return;</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">                </span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment">                std::unique_lock&lt;std::mutex&gt; __lk(__lock_);</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">                __to_reap_.emplace(__exec, __thr);</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment">                __wake_.notify_all();</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment">        void reap_all(thread_executor* __exec, std::vector&lt;std::thread::id&gt;&amp; __thr)</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">                if (__destruct_)</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">                    return;</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">                </span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">                std::unique_lock&lt;std::mutex&gt; __lk(__lock_);</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">                for (auto&amp; __id : __thr)</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">                    __to_reap_.emplace(__exec, __id);</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">                __wake_.notify_all();</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="comment">    private:</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">        void _run_reaper_thread()</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">                while (!__destruct_)</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">                    std::unique_lock&lt;std::mutex&gt; __lk(__lock_);</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">                    __wake_.wait(__lk, [this](){return __destruct_ || !__to_reap_.empty();});</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">                    </span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">                    while (!__to_reap_.empty())</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">                        auto __p = __to_reap_.front();</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">                        auto __thr = __p.first-&gt;__threads_.find(__p.second);</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">                        if (__thr == __p.first-&gt;__threads_.end())</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">                        {</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">                            __p.first-&gt;__cleanup_cv_.notify_all();</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">                            continue;</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">                        }</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">                        </span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">                        if (__thr-&gt;second.joinable())</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">                        {</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">                            // unlock the mutex before calling join()</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">                            __lk.unlock();</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment">                            </span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">                            try</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">                            {</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">                                // race between joinable() and join(), grrr...</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">                                __thr-&gt;second.join();</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">                            }</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">                            catch (...)</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">                            {</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">                            }</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">                            </span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">                            __lk.lock();</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">                        }</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">                        </span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment">                        __p.first-&gt;__threads_.erase(__thr);</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">                        </span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment">                        if (__p.first-&gt;__threads_.empty())</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="comment">                            __p.first-&gt;__cleanup_cv_.notify_all();</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">                        </span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="comment">                        __to_reap_.pop();</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">        </span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">    };</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">    </span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment">    static __thread_reaper                  __reaper_;</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keyword">explicit</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00478"></a><span class="lineno"><a class="code" href="classthread__executor.xhtml#a4dc52923ccfa7cf96d3cc8e77e77289c">  478</a></span>&#160;    <a class="code" href="classthread__executor.xhtml#a4dc52923ccfa7cf96d3cc8e77e77289c">thread_executor</a>()</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        : <span class="comment">/*__threads_(), */</span>__lock_(), __cleanup_cv_(), __pending_count_(0), __running_count_(0)</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        {}</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00483"></a><span class="lineno"><a class="code" href="classthread__executor.xhtml#af9d17a9ec041f581669f369cbf1c2ccb">  483</a></span>&#160;    <a class="code" href="classthread__executor.xhtml#af9d17a9ec041f581669f369cbf1c2ccb">~thread_executor</a>()</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            __destruct_ = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            std::unique_lock&lt;std::mutex&gt; __lk(__lock_);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="comment">/*</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">            std::vector&lt;std::thread::id&gt; __vec;</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">            for (auto&amp; __item : __threads_)</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">                __vec.emplace_back(__item.first);</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">            </span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">            if (!__vec.empty())</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment">                __reaper_.reap_all(this, __vec);</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment">                __cleanup_cv_.wait(__lk, [this](){return __threads_.empty();});</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">             */</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            __cleanup_cv_.wait(__lk, [<span class="keyword">this</span>](){<span class="keywordflow">return</span> __running_count_ == 0;});</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        }</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    </div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00505"></a><span class="lineno"><a class="code" href="classthread__executor.xhtml#a9659e93bfdf1cf15fd8dcc3507f51feb">  505</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classthread__executor.xhtml#a9659e93bfdf1cf15fd8dcc3507f51feb">add</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            <span class="keywordflow">if</span> (__destruct_)</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            __pending_count_++;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            </div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <span class="comment">// this lock stops the thread from invoking the closure until this method exits</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            std::lock_guard&lt;std::mutex&gt; __lk(__lock_);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            std::thread __thr(std::mem_fn(&amp;thread_executor::__run_closure_thread), <span class="keyword">this</span>, closure);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">//#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">//            __threads_.emplace(__thr.get_id(), std::move(__thr));</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">//#else</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment">//            __threads_[__thr.get_id()] = std::move(__thr);</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">//#endif</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            __thr.detach();</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        }</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00524"></a><span class="lineno"><a class="code" href="classthread__executor.xhtml#a7bb73fd8ac26fc4994d9e46356f78e1c">  524</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classthread__executor.xhtml#a7bb73fd8ac26fc4994d9e46356f78e1c">uninitiated_task_count</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <span class="keywordflow">return</span> __pending_count_;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        }</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">    void __reap_thread(std::thread::id __tid)</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">            __reaper_.reap_thread(this, __tid);</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">        }</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordtype">void</span> __run_closure_thread(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> __c)</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        {</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="comment">// wait until the thread has been safely installed in the executor&#39;s</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="comment">// state before running the closure</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            std::unique_lock&lt;std::mutex&gt; __lk(__lock_);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            <span class="keywordflow">if</span> (!__destruct_)</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            {</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                __lk.unlock();</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                __running_count_++;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                __pending_count_--;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">_run_closure</a>(__c);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                </div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                __running_count_--;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                __lk.lock();</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            </div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <span class="keywordflow">if</span> (__running_count_ == 0)</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                __cleanup_cv_.notify_all();</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment">//            __reap_thread(std::this_thread::get_id());</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        }</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    </div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;};</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - &lt;thread_pool&gt;</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00567"></a><span class="lineno"><a class="code" href="executor_8h.xhtml#ae1f8b2c0a6566b3407d732ebe6ab361a">  567</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____timed__closure__less.xhtml">__timed_closure_less</a>;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="keyword">typedef</span> std::pair&lt;std::chrono::system_clock::time_point, executor::closure_type&gt;                <a class="code" href="executor_8h.xhtml#ae1f8b2c0a6566b3407d732ebe6ab361a">timed_closure</a>;</div>
<div class="line"><a name="l00569"></a><span class="lineno"><a class="code" href="executor_8h.xhtml#a38c88e90c95c04532e461cafcee43a2c">  569</a></span>&#160;<span class="keyword">typedef</span> std::priority_queue&lt;timed_closure, std::vector&lt;timed_closure&gt;, <a class="code" href="struct____timed__closure__less.xhtml">__timed_closure_less</a>&gt;    <a class="code" href="executor_8h.xhtml#a38c88e90c95c04532e461cafcee43a2c">timed_closure_queue</a>;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno"><a class="code" href="struct____timed__closure__less.xhtml">  571</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____timed__closure__less.xhtml">__timed_closure_less</a> : std::binary_function&lt;timed_closure, timed_closure, bool&gt;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;{</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">inline</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00574"></a><span class="lineno"><a class="code" href="struct____timed__closure__less.xhtml#af121402d3b829b1886b0dc5e8fc3d73f">  574</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="struct____timed__closure__less.xhtml#af121402d3b829b1886b0dc5e8fc3d73f">operator ()</a>(<span class="keyword">const</span> timed_closure&amp; __lhs, <span class="keyword">const</span> timed_closure&amp; __rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">return</span> __lhs.first &lt; __rhs.first;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;};</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div>
<div class="line"><a name="l00580"></a><span class="lineno"><a class="code" href="class____thread__pool__impl__stdcpp.xhtml">  580</a></span>&#160;<span class="keyword">class </span><a class="code" href="class____thread__pool__impl__stdcpp.xhtml">__thread_pool_impl_stdcpp</a></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;{</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    std::queue&lt;executor::closure_type&gt;  _queue;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    timed_closure_queue                 _timed_queue;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    std::vector&lt;std::thread&gt;            _threads;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    std::thread                         _timed_addition_thread;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    std::atomic_size_t                  _jobs_in_flight;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    std::mutex                          _mutex;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    std::atomic&lt;bool&gt;                   _exiting;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    std::condition_variable             _jobs_ready;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    std::condition_variable             _timers_updated;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    </div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <a class="code" href="class____thread__pool__impl__stdcpp.xhtml">__thread_pool_impl_stdcpp</a>(<span class="keywordtype">int</span> num_threads);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    </div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    ~<a class="code" href="class____thread__pool__impl__stdcpp.xhtml">__thread_pool_impl_stdcpp</a>();</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordtype">void</span> add(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordtype">size_t</span> uninitiated_task_count()<span class="keyword"> const</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordflow">return</span> _queue.size() + _timed_queue.size();</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        }</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordtype">void</span> add_at(std::chrono::system_clock::time_point abs_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    </div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordtype">void</span> add_after(std::chrono::system_clock::duration rel_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure)</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        {</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            add_at(std::chrono::system_clock::now() + rel_time, closure);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordtype">void</span> _RunWorker();</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordtype">void</span> _RunTimer();</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00620"></a><span class="lineno"><a class="code" href="class____thread__pool__impl__stdcpp.xhtml#a63d668995109028bdc9cdbb726de4807">  620</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classthread__pool.xhtml">thread_pool</a>;</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;};</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor"></span><span class="keyword">class </span>__thread_pool_impl_winrt : <span class="keyword">public</span> std::enable_shared_from_this&lt;__thread_pool_impl_winrt&gt;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;{</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    typedef ::Windows::System::Threading::ThreadPool        <a class="code" href="classthread__pool.xhtml">thread_pool</a>;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    typedef ::Windows::System::Threading::ThreadPoolTimer   timer;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    typedef ::Windows::Foundation::IAsyncAction             work_item;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    std::vector&lt;work_item^&gt;             _work_items;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    std::vector&lt;timer^&gt;                 _timers;</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    std::mutex                          _mutex;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    std::atomic&lt;bool&gt;                   _exiting;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    __thread_pool_impl_winrt(<span class="keywordtype">int</span> num_threads);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    </div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    ~__thread_pool_impl_winrt();</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordtype">void</span> add(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    </div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordtype">size_t</span> uninitiated_task_count()<span class="keyword"> const</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <span class="keywordflow">return</span> _work_items.size() + _timers.size();</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordtype">void</span> add_at(std::chrono::system_clock::time_point&amp; abs_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure)</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        {</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            add_after(abs_time - std::chrono::system_clock::now(), closure);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        }</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    </div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordtype">void</span> add_after(std::chrono::system_clock::duration&amp; rel_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure);</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keyword">friend</span> class ::ePub3::thread_pool;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;};</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00663"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml">  663</a></span>&#160;<span class="keyword">class </span><a class="code" href="classthread__pool.xhtml">thread_pool</a> : <span class="keyword">public</span> <a class="code" href="classscheduled__executor.xhtml">scheduled_executor</a></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;{</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="preprocessor"></span>    <span class="keyword">typedef</span> __thread_pool_impl_winrt    <a class="code" href="class____thread__pool__impl__stdcpp.xhtml">impl_t</a>;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="preprocessor"></span>    <span class="keyword">typedef</span> <a class="code" href="class____thread__pool__impl__stdcpp.xhtml">__thread_pool_impl_stdcpp</a>   <a class="code" href="class____thread__pool__impl__stdcpp.xhtml">impl_t</a>;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class____thread__pool__impl__stdcpp.xhtml">impl_t</a>                              __impl_;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    </div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00674"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml#ae247eff9c6819dda50037c83afddd41d">  674</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classthread__pool.xhtml#ae247eff9c6819dda50037c83afddd41d">Automatic</a>          = 0;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    </div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00677"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml#ababcc2d4099deacef7d7d347a449b2c7">  677</a></span>&#160;    <a class="code" href="classthread__pool.xhtml#ababcc2d4099deacef7d7d347a449b2c7">thread_pool</a>(<span class="keywordtype">int</span> num_threads = <a class="code" href="classthread__pool.xhtml#ae247eff9c6819dda50037c83afddd41d">Automatic</a>)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        : __impl_(num_threads)</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        {}</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00681"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml#a3b10fa84e5735e3fe0c5702b3e428eff">  681</a></span>&#160;    <a class="code" href="classthread__pool.xhtml#a3b10fa84e5735e3fe0c5702b3e428eff">~thread_pool</a>()</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        {}</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00685"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml#a79414c96b774f9ca92117787a92c930f">  685</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classthread__pool.xhtml#a79414c96b774f9ca92117787a92c930f">add</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        {</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            __impl_.add(closure);</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00690"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml#a3ebe583f944f073b6d2c7bfd9611bbc2">  690</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classthread__pool.xhtml#a3ebe583f944f073b6d2c7bfd9611bbc2">uninitiated_task_count</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        {</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            <span class="keywordflow">return</span> __impl_.uninitiated_task_count();</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        }</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00696"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml#a4363e072c7e1be3fde4f8a7aad4a805f">  696</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classthread__pool.xhtml#a4363e072c7e1be3fde4f8a7aad4a805f">add_at</a>(std::chrono::system_clock::time_point&amp; abs_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        {</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            __impl_.add_at(abs_time, closure);</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        }</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00701"></a><span class="lineno"><a class="code" href="classthread__pool.xhtml#a92bd5db097879609867e0149eed49b9e">  701</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classthread__pool.xhtml#a92bd5db097879609867e0149eed49b9e">add_after</a>(std::chrono::system_clock::duration&amp; rel_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        {</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            __impl_.add_after(rel_time, closure);</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        }</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    </div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;};</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;std::shared_ptr&lt;executor&gt; <a class="code" href="executor_8h.xhtml#aec5dcaf992d285dbcbc3b7fd545fc8a7">main_thread_executor</a>();</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3__executor__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="executor_8h.xhtml">executor.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
