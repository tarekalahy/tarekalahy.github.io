<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/xml/utilities/io.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('io_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">io.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="io_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  io.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-11-16.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3_xml_io__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3_xml_io__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;ePub3/xml/base.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;libxml/xmlIO.h&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;libxml/HTMLtree.h&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<a class="code" href="xml_2utilities_2base_8h.xhtml#aad3f08b1d0c77112eed0e2524e14be9d">EPUB3_XML_BEGIN_NAMESPACE</a></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">class </span><a class="code" href="class_document.xhtml">Document</a>;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#if EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span><span class="keyword">enum</span> {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    PROHIBIT_DTD = 1 &lt;&lt; 0,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    RESOLVE_EXTERNALS = 1 &lt;&lt; 1,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    VALIDATE_ON_PARSE = 1 &lt;&lt; 2</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;};</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> XmlOptions;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="code" href="class_input_buffer.xhtml">   48</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_input_buffer.xhtml">InputBuffer</a> : <span class="keyword">public</span> WrapperBase&lt;InputBuffer&gt;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="class_input_buffer.xhtml#a51ba2194e0d604364fc0ee2dd8ed3b05">InputBuffer</a>();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="class_input_buffer.xhtml#a51ba2194e0d604364fc0ee2dd8ed3b05">InputBuffer</a>(<a class="code" href="class_input_buffer.xhtml">InputBuffer</a> &amp;&amp; o);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_input_buffer.xhtml#acbb3a083318ff4e73a67646dd0b8996e">~InputBuffer</a>();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor"></span>    xmlParserInputBuffer * xmlBuffer() { <span class="keywordflow">return</span> _buf; }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> xmlParserInputBuffer * xmlBuffer()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _buf; }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">operator</span> xmlParserInputBuffer * () { <span class="keywordflow">return</span> xmlBuffer(); }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">operator</span> <span class="keyword">const</span> xmlParserInputBuffer * () <span class="keyword">const</span> { <span class="keywordflow">return</span> xmlBuffer(); }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::shared_ptr&lt;Document&gt; xmlReadDocument(<span class="keyword">const</span> <span class="keywordtype">char</span> * url, <span class="keyword">const</span> <span class="keywordtype">char</span> * encoding, <span class="keywordtype">int</span> options);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::shared_ptr&lt;Document&gt; htmlReadDocument(<span class="keyword">const</span> <span class="keywordtype">char</span> * url, <span class="keyword">const</span> <span class="keywordtype">char</span> * encoding, <span class="keywordtype">int</span> options);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#elif EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor"></span>    ::Windows::Storage::IStorageFile^ File() { <span class="keywordflow">return</span> _store; }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    operator ::Windows::Storage::IStorageFile^() { <span class="keywordflow">return</span> _store; }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::shared_ptr&lt;Document&gt; ReadDocument(<span class="keyword">const</span> <span class="keywordtype">char</span>* url, <span class="keyword">const</span> <span class="keywordtype">char</span>* encoding, XmlOptions options);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_input_buffer.xhtml#a0c6a25c6b22ff2bb332890a2f3510385">size</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_input_buffer.xhtml#ab6ac89b2544f880d283b139b69b1de58">offset</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="class_input_buffer.xhtml#a7c66e3628933c8b8cdffa5cb8ac5236f">   73</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_input_buffer.xhtml#a7c66e3628933c8b8cdffa5cb8ac5236f">release</a>() <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="code" href="class_input_buffer.xhtml#a99b4041a723b904f2a3b402fb04f907e">   77</a></span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span> * <a class="code" href="class_input_buffer.xhtml#a99b4041a723b904f2a3b402fb04f907e">_encodingCheck</a>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor"></span>    xmlParserInputBufferPtr _buf;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#elif EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor"></span>    ::Windows::Storage::IStorageFile^ _store;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_input_buffer.xhtml#a32ca0cd7b3870947dac148a043c35032">read</a>(uint8_t * buf, <span class="keywordtype">size_t</span> len) = 0;</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="code" href="class_input_buffer.xhtml#a3bfeb9342b5aa6aad58efd304d6d14c3">   86</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_input_buffer.xhtml#a3bfeb9342b5aa6aad58efd304d6d14c3">close</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="class_input_buffer.xhtml#a2d6a550bf2c45b3b1ba4d608d85cd0b7">read_cb</a>(<span class="keywordtype">void</span> * context, <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="class_input_buffer.xhtml#a2c5995f7a136a612129d0a4aa5d7704e">close_cb</a>(<span class="keywordtype">void</span> * context);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="code" href="class_output_buffer.xhtml">   96</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_output_buffer.xhtml">OutputBuffer</a> : <span class="keyword">public</span> WrapperBase&lt;OutputBuffer&gt;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="class_output_buffer.xhtml#a2c134b9e96c9c75a0d31f09a2ab702d1">OutputBuffer</a>(<span class="keyword">const</span> std::string &amp; encoding = std::string());</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_output_buffer.xhtml#a2c134b9e96c9c75a0d31f09a2ab702d1">OutputBuffer</a>(<a class="code" href="class_output_buffer.xhtml">OutputBuffer</a> &amp;&amp; o) : _buf(o._buf) { o._buf = <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#elif EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_output_buffer.xhtml#a2c134b9e96c9c75a0d31f09a2ab702d1">OutputBuffer</a>(<a class="code" href="class_output_buffer.xhtml">OutputBuffer</a> &amp;&amp; o) : _store(o._store) { o._store = <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"></span>    <span class="keyword">virtual</span> <a class="code" href="class_output_buffer.xhtml#ae7ecc36c003c87e5d7038756ca41aa4b">~OutputBuffer</a>();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor"></span>    xmlOutputBuffer * xmlBuffer() { <span class="keywordflow">return</span> _buf; }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> xmlOutputBuffer * xmlBuffer()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _buf; }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">operator</span> xmlOutputBuffer * () { <span class="keywordflow">return</span> xmlBuffer(); }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">operator</span> <span class="keyword">const</span> xmlOutputBuffer * () <span class="keyword">const</span> { <span class="keywordflow">return</span> xmlBuffer(); }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">void</span> flush() { xmlOutputBufferFlush(_buf); }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">int</span> writeDocument(xmlDocPtr doc);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#elif EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor"></span>    ::Windows::Storage::IStorageFile^ File() { <span class="keywordflow">return</span> _store; }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    operator ::Windows::Storage::IStorageFile^() { <span class="keywordflow">return</span> _store; }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">int</span> WriteDocument(std::shared_ptr&lt;const Document&gt; doc);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_output_buffer.xhtml#a8d254e98451c0aa70242bfa7ceaff6f1">size</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_output_buffer.xhtml#a9058d82d5de37c61f5f5497c5b4f4134">offset</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="code" href="class_output_buffer.xhtml#a5e8b4649534ec1c2a4345e5391746b29">  125</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_output_buffer.xhtml#a5e8b4649534ec1c2a4345e5391746b29">release</a>() <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor"></span>    xmlOutputBufferPtr  _buf;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">#elif EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor"></span>    ::Windows::Storage::IStorageFile^   _store;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_output_buffer.xhtml#a4498a0cede6bdf5e21e4d8eeedcd2880">write</a>(<span class="keyword">const</span> uint8_t * buf, <span class="keywordtype">size_t</span> len) = 0;</div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="code" href="class_output_buffer.xhtml#ab144b694db4bfb50261bb26379d097b7">  136</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_output_buffer.xhtml#ab144b694db4bfb50261bb26379d097b7">close</a>() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="class_output_buffer.xhtml#a2a66ec6dc7d830b556e9728800bbfbc0">write_cb</a>(<span class="keywordtype">void</span> * context, <span class="keyword">const</span> <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="class_output_buffer.xhtml#a8fe7e7b80c7cd519297fe7d50ebe2917">close_cb</a>(<span class="keywordtype">void</span> * context);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;};</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno"><a class="code" href="class_stream_input_buffer.xhtml">  146</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_stream_input_buffer.xhtml">StreamInputBuffer</a> : <span class="keyword">public</span> <a class="code" href="class_input_buffer.xhtml">InputBuffer</a></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;{</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="code" href="class_stream_input_buffer.xhtml#a9e90b9db07e23df83d978b0f6ffc2273">  149</a></span>&#160;    <a class="code" href="class_stream_input_buffer.xhtml#a9e90b9db07e23df83d978b0f6ffc2273">StreamInputBuffer</a>(std::istream &amp; input) : <a class="code" href="class_input_buffer.xhtml">InputBuffer</a>(), <a class="code" href="class_stream_input_buffer.xhtml#a8c52175f0b76551cb59592ab67926394">_input</a>(input) {}</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="code" href="class_stream_input_buffer.xhtml#a1e68a3c04a606086a94a65db4bc2f204">  150</a></span>&#160;    <a class="code" href="class_stream_input_buffer.xhtml#a1e68a3c04a606086a94a65db4bc2f204">StreamInputBuffer</a>(<a class="code" href="class_stream_input_buffer.xhtml">StreamInputBuffer</a> &amp;&amp; o) : <a class="code" href="class_input_buffer.xhtml">InputBuffer</a>(std::move(o)), <a class="code" href="class_stream_input_buffer.xhtml#a8c52175f0b76551cb59592ab67926394">_input</a>(o.<a class="code" href="class_stream_input_buffer.xhtml#a8c52175f0b76551cb59592ab67926394">_input</a>) {}</div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="code" href="class_stream_input_buffer.xhtml#ab4063710812f5e2058685dde76c9eef0">  151</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_stream_input_buffer.xhtml#ab4063710812f5e2058685dde76c9eef0">~StreamInputBuffer</a>() {}</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_stream_input_buffer.xhtml#a6fd7da49a0629a80e1483adec9955216">size</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="code" href="class_stream_input_buffer.xhtml#a4d840ac7469b508710e26ff96b6c0194">  154</a></span>&#160;    virtual <span class="keywordtype">size_t</span> <a class="code" href="class_stream_input_buffer.xhtml#a4d840ac7469b508710e26ff96b6c0194">offset</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a> { <span class="keywordflow">return</span> size_t(<a class="code" href="class_stream_input_buffer.xhtml#a8c52175f0b76551cb59592ab67926394">_input</a>.tellg()); }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_stream_input_buffer.xhtml#ae0b5ca77ed7818c73cfd118802363eea">read</a>(uint8_t * buf, <span class="keywordtype">size_t</span> len);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_stream_input_buffer.xhtml#a96396b90026f1983c52c30d3ea6b0443">close</a>();</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    </div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="code" href="class_stream_input_buffer.xhtml#a8c52175f0b76551cb59592ab67926394">  160</a></span>&#160;    std::istream &amp;  <a class="code" href="class_stream_input_buffer.xhtml#a8c52175f0b76551cb59592ab67926394">_input</a>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;};</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="code" href="class_stream_output_buffer.xhtml">  167</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_stream_output_buffer.xhtml">StreamOutputBuffer</a> : <span class="keyword">public</span> <a class="code" href="class_output_buffer.xhtml">OutputBuffer</a></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="code" href="class_stream_output_buffer.xhtml#af3f7199d8caaaa9470b1598405722591">  170</a></span>&#160;    <a class="code" href="class_stream_output_buffer.xhtml#af3f7199d8caaaa9470b1598405722591">StreamOutputBuffer</a>(std::ostream &amp; output, <span class="keyword">const</span> std::string &amp; encoding = std::string()) : <a class="code" href="class_output_buffer.xhtml">OutputBuffer</a>(), <a class="code" href="class_stream_output_buffer.xhtml#adc51106d8d41c535f0a35e5268f47f9e">_output</a>(output) {}</div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="code" href="class_stream_output_buffer.xhtml#a5b05f2729f944564835d29da6c448cf4">  171</a></span>&#160;    <a class="code" href="class_stream_output_buffer.xhtml#a5b05f2729f944564835d29da6c448cf4">StreamOutputBuffer</a>(<a class="code" href="class_stream_output_buffer.xhtml">StreamOutputBuffer</a> &amp;&amp; o) : <a class="code" href="class_output_buffer.xhtml">OutputBuffer</a>(std::move(o)), <a class="code" href="class_stream_output_buffer.xhtml#adc51106d8d41c535f0a35e5268f47f9e">_output</a>(o.<a class="code" href="class_stream_output_buffer.xhtml#adc51106d8d41c535f0a35e5268f47f9e">_output</a>) {}</div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="code" href="class_stream_output_buffer.xhtml#a612a1c83e3e8a39392a697150aaf8ead">  172</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_stream_output_buffer.xhtml#a612a1c83e3e8a39392a697150aaf8ead">~StreamOutputBuffer</a>() {}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_stream_output_buffer.xhtml#ad71ec0e7b697a56e9531173f0a85d8d8">size</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="code" href="class_stream_output_buffer.xhtml#a09e2031b7aa1f5f44da71d2b489e0850">  175</a></span>&#160;    virtual <span class="keywordtype">size_t</span> <a class="code" href="class_stream_output_buffer.xhtml#a09e2031b7aa1f5f44da71d2b489e0850">offset</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a> { <span class="keywordflow">return</span> size_t(<a class="code" href="class_stream_output_buffer.xhtml#adc51106d8d41c535f0a35e5268f47f9e">_output</a>.tellp()); }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_stream_output_buffer.xhtml#aaeac5aabc41a547cdd0966decb68259c">write</a>(<span class="keyword">const</span> uint8_t * buffer, <span class="keywordtype">size_t</span> len);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_stream_output_buffer.xhtml#a5b1c95be7e90c486e6cd9b917dca1b95">close</a>();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    </div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="code" href="class_stream_output_buffer.xhtml#adc51106d8d41c535f0a35e5268f47f9e">  181</a></span>&#160;    std::ostream &amp;  <a class="code" href="class_stream_output_buffer.xhtml#adc51106d8d41c535f0a35e5268f47f9e">_output</a>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;};</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<a class="code" href="xml_2utilities_2base_8h.xhtml#a1855726ae847a4b9be62158be5842e55">EPUB3_XML_END_NAMESPACE</a></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3_xml_io__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d2dc3c0cadcebb3fe799a79b2b95c908.xhtml">xml</a></li><li class="navelem"><a class="el" href="dir_5423ae1c4c31ea4b8e02f4db1d30290b.xhtml">utilities</a></li><li class="navelem"><a class="el" href="io_8h.xhtml">io.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:41 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
