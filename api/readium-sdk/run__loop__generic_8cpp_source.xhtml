<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/run_loop_generic.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('run__loop__generic_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">run_loop_generic.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="run__loop__generic_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  run_loop.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-04-08.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">// Common pieces used by all platforms</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="run__loop__common_8ipp.xhtml">run_loop_common.ipp</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#if EPUB_USE(CF)</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># error Please use run_loop_cf.cpp for this platform</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#elif EPUB_OS(ANDROID)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># error Please use run_loop_android.cpp for this platform</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#elif EPUB_OS(WINDOWS)</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># error Please use run_loop_windows.cpp for this platform</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="code" href="run__loop__generic_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">   34</a></span>&#160;<span class="keyword">using</span> <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> = std::lock_guard&lt;std::recursive_mutex&gt;;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<a class="code" href="class_run_loop.xhtml#a04bf50286cc31db317951bf4aa43efbd" title="Obtains the run loop for the current thread.">RunLoop::RunLoop</a>() : _timers(), _observers(), _sources(), _listLock(), _conditionLock(), _wakeUp(), _waiting(false), _stop(false), _observerMask(0), _waitingUntilTimer(nullptr)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<a class="code" href="class_run_loop.xhtml#aa9f17aa60a3515c1a674ee3db4a67e8d">RunLoop::~RunLoop</a>()</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span> ( _waiting )</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <a class="code" href="class_run_loop.xhtml#a49dbe91ce6dda49d715ff65f70ec36fa" title="Stops the RunLoop, exiting any invocations of Run() or Run(bool, std::chrono::duration).">Stop</a>();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#a9109a35166a200a3cff41b1e8fb805ed" title="Call a function on the run loop&#39;s assigned thread.">RunLoop::PerformFunction</a>(std::function&lt;<span class="keywordtype">void</span> ()&gt; fn)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">EventSourcePtr</a> ev = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">EventSource::New</a>([fn](EventSource&amp; __e) {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        fn();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    });</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="class_run_loop.xhtml#af57041aff3ec26f5c82a8e8b57cd7a4e" title="Adds an event source to the run loop.">AddEventSource</a>(ev);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    ev-&gt;Signal();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#a411d4923e3e14fdad66d5f4c145c93b2" title="Adds a timer to the run loop.">RunLoop::AddTimer</a>(TimerPtr timer)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(_listLock);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_run_loop.xhtml#aca4dacd66138f452b8f60dbbda409754" title="Whether a timer is registered on this runloop.">ContainsTimer</a>(timer) )</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    _timers.push_back(timer);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    _timers.sort();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> ( _waiting &amp;&amp; _waitingUntilTimer != <span class="keyword">nullptr</span> &amp;&amp; _waitingUntilTimer-&gt;GetNextFireDate() &lt; timer-&gt;GetNextFireDate() )</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// signal a Run() invocation that it needs to adjust its timeout to the fire</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// date of this new timer</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="class_run_loop.xhtml#ac9c1720a1a67ea363838a09e64efe0b9" title="Explicitly wake the RunLoop, causing it to check timers and event sources.">WakeUp</a>();</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop.xhtml#aca4dacd66138f452b8f60dbbda409754" title="Whether a timer is registered on this runloop.">RunLoop::ContainsTimer</a>(TimerPtr timer)<span class="keyword"> const</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(const_cast&lt;RunLoop*&gt;(<span class="keyword">this</span>)-&gt;_listLock);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">const</span> <a class="code" href="class_run_loop.xhtml#a6d7230331fff432aab5dcb894d38e533">TimerPtr</a> t : _timers )</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">if</span> ( timer == t )</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#a0a76804ba7aaf2754a773faec4d21dc4" title="Removes the timer from this RunLoop (without cancelling it).">RunLoop::RemoveTimer</a>(TimerPtr timer)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(_listLock);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> iter = _timers.begin(), end = _timers.end(); iter != end; ++iter )</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">if</span> ( *iter == timer )</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            _timers.erase(iter);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> ( _waiting )</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">if</span> ( _waitingUntilTimer == timer )</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="comment">// a Run() invocation is waiting until the removed timer&#39;s fire date</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// wake up the runloop so it can adjust its timeout accordingly</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            _waitingUntilTimer = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <a class="code" href="class_run_loop.xhtml#ac9c1720a1a67ea363838a09e64efe0b9" title="Explicitly wake the RunLoop, causing it to check timers and event sources.">WakeUp</a>();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( _timers.empty() &amp;&amp; _sources.empty() )</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// run out of useful things to wait upon</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <a class="code" href="class_run_loop.xhtml#ac9c1720a1a67ea363838a09e64efe0b9" title="Explicitly wake the RunLoop, causing it to check timers and event sources.">WakeUp</a>();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#ae0613d5c2977c5ea2aea4125cab57bf3" title="Adds an observer to the run loop.">RunLoop::AddObserver</a>(ObserverPtr observer)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(_listLock);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_run_loop.xhtml#a331035b1619b66d0b9963aa6ec00413d" title="Whether an observer is registered on this runloop.">ContainsObserver</a>(observer) )</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    _observers.push_back(observer);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    _observerMask |= observer-&gt;_acts;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop.xhtml#a331035b1619b66d0b9963aa6ec00413d" title="Whether an observer is registered on this runloop.">RunLoop::ContainsObserver</a>(ObserverPtr obs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(const_cast&lt;RunLoop*&gt;(<span class="keyword">this</span>)-&gt;_listLock);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">const</span> <a class="code" href="class_run_loop.xhtml#aa39ebe6d39b3de293c212d9bdec6fa02">ObserverPtr</a> o : _observers )</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span> ( obs == o )</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#aed2fd6278def89e8e30cc6a3cd369d9e" title="Removes an observer from this RunLoop (without cancelling it).">RunLoop::RemoveObserver</a>(ObserverPtr obs)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(_listLock);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> iter = _observers.begin(), end = _observers.end(); iter != end; ++iter )</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span> ( *iter == obs )</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            _observers.erase(iter);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#af57041aff3ec26f5c82a8e8b57cd7a4e" title="Adds an event source to the run loop.">RunLoop::AddEventSource</a>(EventSourcePtr ev)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(_listLock);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_run_loop.xhtml#a9907b16835ae0a77350f222c62f33c10" title="Whether an event source is registered on this runloop.">ContainsEventSource</a>(ev) )</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    _sources.push_back(ev);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop.xhtml#a9907b16835ae0a77350f222c62f33c10" title="Whether an event source is registered on this runloop.">RunLoop::ContainsEventSource</a>(EventSourcePtr ev)<span class="keyword"> const</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(const_cast&lt;RunLoop*&gt;(<span class="keyword">this</span>)-&gt;_listLock);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">const</span> <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">EventSourcePtr</a> e : _sources )</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span> ( ev == e )</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#ab69e27aee3d6fb861356878b87620bdf" title="Removes an event source from this RunLoop (without cancelling it).">RunLoop::RemoveEventSource</a>(EventSourcePtr ev)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="run__loop__android_8cpp.xhtml#a6dfac2dd2e54d1259a546738c024fcb7">StackLock</a> lock(_listLock);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> iter = _sources.begin(), end = _sources.end(); iter != end; ++iter )</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">if</span> ( *iter == ev )</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            _sources.erase(iter);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">if</span> ( _waiting &amp;&amp; _timers.empty() &amp;&amp; _sources.empty() )</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// run out of useful things to wait upon</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="class_run_loop.xhtml#ac9c1720a1a67ea363838a09e64efe0b9" title="Explicitly wake the RunLoop, causing it to check timers and event sources.">WakeUp</a>();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#aa36e5151633273d11638ce53b611ccc4" title="Runs the RunLoop forever, or until Stop() is called.">RunLoop::Run</a>()</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    ExitReason reason;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">do</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        std::chrono::nanoseconds <a class="code" href="future_8h.xhtml#aeaacbde3b6cc8e4622e1aae2beacd4f3a90272dda245ae1fb3cf197e91a8689dc">timeout</a>(std::chrono::duration_values&lt;std::chrono::nanoseconds::rep&gt;::max());</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        reason = <a class="code" href="class_run_loop.xhtml#abe73f25f4b147563f96e7ba94d2f233a" title="Internal Run function which takes an explicit timeout duration type.">RunInternal</a>(<span class="keyword">false</span>, timeout);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    } <span class="keywordflow">while</span> (reason != <a class="code" href="run__loop_8h.xhtml#adb28018deee3434883d50c04b624a6a7" title="The RunLoop was stopped by a call to RunLoop::Stop().">ExitReason::RunStopped</a> &amp;&amp; reason != <a class="code" href="run__loop_8h.xhtml#a2afd6b6a5f173c7a6df63a9425c8eb32" title="The RunLoop has no timers or event sources to process.">ExitReason::RunFinished</a>);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#a49dbe91ce6dda49d715ff65f70ec36fa" title="Stops the RunLoop, exiting any invocations of Run() or Run(bool, std::chrono::duration).">RunLoop::Stop</a>()</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    _stop = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span> ( _waiting )</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="class_run_loop.xhtml#ac9c1720a1a67ea363838a09e64efe0b9" title="Explicitly wake the RunLoop, causing it to check timers and event sources.">WakeUp</a>();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop.xhtml#ae99efcad26a1d58174ba09efa85e3253" title="Whether the RunLoop is currently waiting for an event or timer to fire.">RunLoop::IsWaiting</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">return</span> _waiting;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop.xhtml#ac9c1720a1a67ea363838a09e64efe0b9" title="Explicitly wake the RunLoop, causing it to check timers and event sources.">RunLoop::WakeUp</a>()</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">if</span> ( _conditionLock.try_lock() )</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        _wakeUp.notify_all();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        _conditionLock.unlock();</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;RunLoop::ExitReason <a class="code" href="class_run_loop.xhtml#abe73f25f4b147563f96e7ba94d2f233a" title="Internal Run function which takes an explicit timeout duration type.">RunLoop::RunInternal</a>(<span class="keywordtype">bool</span> returnAfterSourceHandled, std::chrono::nanoseconds &amp;timeout)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">using namespace </span>std::chrono;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    system_clock::time_point timeoutTime = system_clock::now() + duration_cast&lt;system_clock::duration&gt;(timeout);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    ExitReason reason(<a class="code" href="run__loop_8h.xhtml#a6b37ec84b88405013b980403aa4e1442" title="The RunLoop timed out while waiting for an event or timer.">ExitReason::RunTimedOut</a>);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// catch a pending stop</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> ( _stop.exchange(<span class="keyword">false</span>) )</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="run__loop_8h.xhtml#adb28018deee3434883d50c04b624a6a7" title="The RunLoop was stopped by a call to RunLoop::Stop().">ExitReason::RunStopped</a>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    _listLock.lock();</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    RunObservers(Observer::ActivityFlags::RunLoopEntry);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">do</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">if</span> ( _timers.empty() &amp;&amp; _sources.empty() )</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            reason = <a class="code" href="run__loop_8h.xhtml#a2afd6b6a5f173c7a6df63a9425c8eb32" title="The RunLoop has no timers or event sources to process.">ExitReason::RunFinished</a>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        std::vector&lt;Timer*&gt; timersToFire = CollectFiringTimers();</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">if</span> ( !timersToFire.empty() )</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            RunObservers(Observer::ActivityFlags::RunLoopBeforeTimers);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">for</span> ( <span class="keyword">auto</span> timer : timersToFire )</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="comment">// we&#39;ll reset repeating timers after the callback returns, so it doesn&#39;t</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="comment">// arm again while we&#39;re </span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                Timer::Clock::time_point date = timer-&gt;GetNextFireDate();</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="comment">// fire the callback now</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                timer-&gt;_fn(*timer);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="comment">// only reset a repeating timer if the fire date hasn&#39;t been changed</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="comment">//  by the callback</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keywordflow">if</span> ( timer-&gt;Repeats() &amp;&amp; timer-&gt;GetNextFireDate() == date )</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    timer-&gt;SetNextFireDate(timer-&gt;_interval);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        std::vector&lt;EventSource*&gt; sourcesToFire = CollectFiringSources(returnAfterSourceHandled);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">if</span> ( !sourcesToFire.empty() )</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            RunObservers(Observer::ActivityFlags::RunLoopBeforeSources);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keywordflow">for</span> ( <span class="keyword">auto</span> source : sourcesToFire )</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                source-&gt;_fn(*source);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">if</span> ( returnAfterSourceHandled )</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                reason = ExitReason::RunHandledSource;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span> ( timeout &lt;= nanoseconds(0) )</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            reason = <a class="code" href="run__loop_8h.xhtml#a6b37ec84b88405013b980403aa4e1442" title="The RunLoop timed out while waiting for an event or timer.">ExitReason::RunTimedOut</a>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        RunObservers(Observer::ActivityFlags::RunLoopBeforeWaiting);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        _listLock.unlock();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        _waiting = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        system_clock::time_point waitUntil = TimeoutOrTimer(timeoutTime);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        std::unique_lock&lt;std::mutex&gt; _condLock(_conditionLock);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        std::cv_status waitStatus = _wakeUp.wait_until(_condLock, waitUntil);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        _condLock.unlock();</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        _waiting = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        _listLock.lock();</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        RunObservers(Observer::ActivityFlags::RunLoopAfterWaiting);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="comment">// why did we wake up?</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">if</span> ( waitStatus == std::cv_status::timeout )</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            reason = <a class="code" href="run__loop_8h.xhtml#a6b37ec84b88405013b980403aa4e1442" title="The RunLoop timed out while waiting for an event or timer.">ExitReason::RunTimedOut</a>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">if</span> ( _stop )</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            reason = <a class="code" href="run__loop_8h.xhtml#adb28018deee3434883d50c04b624a6a7" title="The RunLoop was stopped by a call to RunLoop::Stop().">ExitReason::RunStopped</a>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    } <span class="keywordflow">while</span> (timeoutTime &gt; system_clock::now());</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    RunObservers(Observer::ActivityFlags::RunLoopExit);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    _listLock.unlock();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> reason;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="keywordtype">void</span> RunLoop::RunObservers(<a class="code" href="class_run_loop_1_1_observer.xhtml#a80f038f2f6678ae315e4eb1c9459250a" title="A bitfield type, used to specify the activities to observe.">Observer::Activity</a> activity)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// _listLock MUST ALREADY BE HELD</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">if</span> ( (_observerMask &amp; activity) == 0 )</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    std::vector&lt;Observer*&gt; observersToRemove;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> observer : _observers )</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">if</span> ( observer-&gt;IsCancelled() )</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            observersToRemove.push_back(observer);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">if</span> ( (observer-&gt;_acts &amp; activity) == 0 )</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        observer-&gt;_fn(*observer, activity);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">if</span> ( !observer-&gt;Repeats() )</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            observersToRemove.push_back(observer);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> observer : observersToRemove )</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <a class="code" href="class_run_loop.xhtml#aed2fd6278def89e8e30cc6a3cd369d9e" title="Removes an observer from this RunLoop (without cancelling it).">RemoveObserver</a>(observer);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;std::vector&lt;RunLoop::Timer*&gt; RunLoop::CollectFiringTimers()</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;{</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">// _listLock MUST ALREADY BE HELD</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">auto</span> currentTime = std::chrono::system_clock::now();</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    std::vector&lt;Timer*&gt; result;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    std::vector&lt;Timer*&gt; timersToRemove;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">for</span> ( <a class="code" href="class_run_loop.xhtml#a6d7230331fff432aab5dcb894d38e533">TimerPtr</a> timer : _timers )</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordflow">if</span> ( timer-&gt;IsCancelled() )</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            timersToRemove.push_back(timer);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="comment">// Timers are sorted in ascending order, so as soon as we&#39;ve encountered one</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="comment">// which hasn&#39;t yet fired, we can stop searching.</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">if</span> ( timer-&gt;GetNextFireDate() &gt; currentTime )</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        result.push_back(timer);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> timer : timersToRemove )</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <a class="code" href="class_run_loop.xhtml#a0a76804ba7aaf2754a773faec4d21dc4" title="Removes the timer from this RunLoop (without cancelling it).">RemoveTimer</a>(timer);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<a class="code" href="classshared__vector.xhtml">shared_vector&lt;RunLoop::EventSource&gt;</a> RunLoop::CollectFiringSources(<span class="keywordtype">bool</span> onlyOne)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="comment">// _listLock MUST ALREADY BE HELD</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="classshared__vector.xhtml">shared_vector&lt;EventSourcePtr&gt;</a> result;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <a class="code" href="classshared__vector.xhtml">shared_vector&lt;EventSource&gt;</a> cancelledSources;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">for</span> ( <a class="code" href="class_run_loop.xhtml#a6618b31b385e72913ccf1b2b27ba1959">EventSourcePtr</a> source : _sources )</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">if</span> ( source-&gt;IsCancelled() )</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            cancelledSources.push_back(source);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="comment">// we atomically set it to false while reading to ensure only one RunLoop</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="comment">// picks up the source</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">if</span> ( source-&gt;_signalled.exchange(<span class="keyword">false</span>) )</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            result.push_back(source);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">if</span> ( onlyOne )</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="keywordflow">break</span>;      <span class="comment">// don&#39;t unset the signal on any other sources</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> source : cancelledSources )</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <a class="code" href="class_run_loop.xhtml#ab69e27aee3d6fb861356878b87620bdf" title="Removes an event source from this RunLoop (without cancelling it).">RemoveEventSource</a>(source);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;std::chrono::system_clock::time_point RunLoop::TimeoutOrTimer(std::chrono::system_clock::time_point&amp; timeout)</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// _listLock MUST ALREADY BE HELD</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">if</span> ( _timers.empty() )</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">return</span> timeout;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    std::chrono::system_clock::time_point fireDate = _timers.front()-&gt;GetNextFireDate();</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">if</span> ( fireDate &lt; timeout )</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    {</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        _waitingUntilTimer = _timers.front();</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">return</span> fireDate;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">return</span> timeout;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;RunLoop::Observer::Observer(Activity activities, <span class="keywordtype">bool</span> repeats, ObserverFn fn) : _fn(fn), _acts(activities), _repeats(repeats), _cancelled(false)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;{</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;RunLoop::Observer::Observer(<span class="keyword">const</span> Observer&amp; o) : _fn(o._fn), _acts(o._acts), _repeats(o._repeats)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;RunLoop::Observer::Observer(Observer&amp;&amp; o) : _fn(std::move(o._fn)), _acts(o._acts), _repeats(o._repeats)</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;{</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    o._acts = 0;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    o._repeats = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<a class="code" href="class_run_loop_1_1_observer.xhtml#ad8d6cd56d91de68f071f83dcb8d9ce01">RunLoop::Observer::~Observer</a>()</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;{</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;}</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<a class="code" href="class_run_loop_1_1_observer.xhtml">RunLoop::Observer</a>&amp; <a class="code" href="class_run_loop_1_1_observer.xhtml#a0365b0574efb7de581f8f5863fa3b69f">RunLoop::Observer::operator=</a>(<span class="keyword">const</span> Observer&amp; o)</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;{</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    _fn = o._fn;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    _acts = o._acts;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    _repeats = o._repeats;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<a class="code" href="class_run_loop_1_1_observer.xhtml">RunLoop::Observer</a>&amp; <a class="code" href="class_run_loop_1_1_observer.xhtml#a0365b0574efb7de581f8f5863fa3b69f">RunLoop::Observer::operator=</a>(Observer&amp;&amp; o)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;{</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    _fn = std::move(o._fn);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    _acts = o._acts; o._acts = 0;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    _repeats = o._repeats; o._repeats = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_observer.xhtml#a7ff71f9faae8729f3eceef8a1c272ccc" title="Test for equality with another observer.">RunLoop::Observer::operator==</a>(<span class="keyword">const</span> Observer&amp; o)<span class="keyword"> const</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="comment">// cast as voidPtr to compare function addresses</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">return</span> _fn.target&lt;<span class="keywordtype">void</span>&gt;() == o._fn.target&lt;<span class="keywordtype">void</span>&gt;();</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<a class="code" href="class_run_loop_1_1_observer.xhtml#a80f038f2f6678ae315e4eb1c9459250a" title="A bitfield type, used to specify the activities to observe.">RunLoop::Observer::Activity</a> <a class="code" href="class_run_loop_1_1_observer.xhtml#a43fb427ade2a0295512497dddace1fff" title="Retrieves the activities monitored by this observer.">RunLoop::Observer::GetActivities</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> _acts;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_observer.xhtml#acaf106edd88ecb791dd9d23a7c1cf864" title="Whether this observer will post multiple events.">RunLoop::Observer::Repeats</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">return</span> _repeats;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_observer.xhtml#a3182aecb1df6d887cf89f4adc63f099f" title="Whether the observer has been cancelled.">RunLoop::Observer::IsCancelled</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">return</span> _cancelled;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;}</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop_1_1_observer.xhtml#afbd055b68c03b87dce2a2ff76d7ac7b9" title="Cancels the observer, causing it never to fire again.">RunLoop::Observer::Cancel</a>()</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;{</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    _cancelled = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;RunLoop::EventSource::EventSource(EventHandlerFn fn) : _signalled(false), _cancelled(false), _fn(fn)</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;{</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;RunLoop::EventSource::EventSource(<span class="keyword">const</span> EventSource&amp; o) : _signalled((bool)o._signalled), _cancelled(o._cancelled), _fn(o._fn)</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;{</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;RunLoop::EventSource::EventSource(EventSource&amp;&amp; o) : _signalled(o._signalled.exchange(false)), _cancelled(o._cancelled), _fn(std::move(o._fn))</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;{</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    o._cancelled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;}</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<a class="code" href="class_run_loop_1_1_event_source.xhtml#a29b6b21e0ee96774536f797b1d9c1ff6">RunLoop::EventSource::~EventSource</a>()</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;{</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;}</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<a class="code" href="class_run_loop_1_1_event_source.xhtml">RunLoop::EventSource</a>&amp; <a class="code" href="class_run_loop_1_1_event_source.xhtml#a30c789e642b80d3564065434d16ad888" title="Copy assignment.">RunLoop::EventSource::operator=</a>(<span class="keyword">const</span> EventSource&amp; o)</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;{</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    _signalled = (bool)o._signalled;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    _fn = o._fn;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    _cancelled = o._cancelled;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<a class="code" href="class_run_loop_1_1_event_source.xhtml">RunLoop::EventSource</a>&amp; <a class="code" href="class_run_loop_1_1_event_source.xhtml#a30c789e642b80d3564065434d16ad888" title="Copy assignment.">RunLoop::EventSource::operator=</a>(EventSource&amp;&amp; o)</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;{</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    _signalled = o._signalled.exchange(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    _fn = std::move(o._fn);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    _cancelled = o._cancelled; o._cancelled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_event_source.xhtml#a8e40c91aab1d8dbf17400628827addbf" title="Test for equality.">RunLoop::EventSource::operator==</a>(<span class="keyword">const</span> EventSource&amp; o)<span class="keyword"> const</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span> _fn.target&lt;<span class="keywordtype">void</span>&gt;() == o._fn.target&lt;<span class="keywordtype">void</span>&gt;();</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_event_source.xhtml#ab6476e7ea5efd45b610bf754f1155149" title="Whether the event source has been cancelled.">RunLoop::EventSource::IsCancelled</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordflow">return</span> _cancelled;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;}</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop_1_1_event_source.xhtml#a290d0c6a25899664dba05af20dd40c6d" title="Cancel the event source, so it will never fire again.">RunLoop::EventSource::Cancel</a>()</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    _cancelled = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;}</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop_1_1_event_source.xhtml#a28dc9c79b6f251016fe2b4e4d8633d88" title="Signal the event source, causing it to fire on one of its associated RunLoops.">RunLoop::EventSource::Signal</a>()</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;{</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    _signalled = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;RunLoop::Timer::Timer(Clock::time_point&amp; fireDate, Clock::duration&amp; interval, TimerFn fn) : _fireDate(fireDate), _interval(interval), _fn(fn)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;{</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;}</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;RunLoop::Timer::Timer(Clock::duration&amp; interval, <span class="keywordtype">bool</span> repeat, TimerFn fn) : _fireDate(Clock::now()+interval), _interval(interval), _fn(fn)</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;}</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;RunLoop::Timer::Timer(<span class="keyword">const</span> <a class="code" href="class_timer.xhtml">Timer</a>&amp; o) : _fireDate(o._fireDate), _interval(o._interval), _fn(o._fn)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;}</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;RunLoop::Timer::Timer(<a class="code" href="class_timer.xhtml">Timer</a>&amp;&amp; o) : _fireDate(std::move(o._fireDate)), _interval(std::move(o._interval)), _fn(std::move(o._fn))</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;{</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;}</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<a class="code" href="class_run_loop_1_1_timer.xhtml#a45f32ec8b6d81224398e1ff07c950322">RunLoop::Timer::~Timer</a>()</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;{</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<a class="code" href="class_run_loop_1_1_timer.xhtml">RunLoop::Timer</a>&amp; <a class="code" href="class_run_loop_1_1_timer.xhtml#a1753b97569f318bce817fa962ad98368" title="Copy assignment.">RunLoop::Timer::operator=</a>(<span class="keyword">const</span> <a class="code" href="class_timer.xhtml">Timer</a>&amp; o)</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    _fireDate = o._fireDate;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    _interval = o._interval;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    _fn = o._fn;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<a class="code" href="class_run_loop_1_1_timer.xhtml">RunLoop::Timer</a>&amp; <a class="code" href="class_run_loop_1_1_timer.xhtml#a1753b97569f318bce817fa962ad98368" title="Copy assignment.">RunLoop::Timer::operator=</a>(<a class="code" href="class_timer.xhtml">Timer</a>&amp;&amp; o)</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;{</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    _fireDate = std::move(o._fireDate);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    _interval = std::move(o._interval);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    _fn = std::move(o._fn);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;}</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_timer.xhtml#a59ced1e4ab23e64a8c0bcb3ee8eafb66" title="Test for equality.">RunLoop::Timer::operator==</a>(<span class="keyword">const</span> <a class="code" href="class_timer.xhtml">Timer</a>&amp; o)<span class="keyword"> const</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordflow">return</span> (_fireDate == o._fireDate) &amp;&amp; (_interval == o._interval) &amp;&amp; (_fn.target&lt;<span class="keywordtype">void</span>&gt;() == o._fn.target&lt;<span class="keywordtype">void</span>&gt;());</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;}</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop_1_1_timer.xhtml#a2793128221b6a0ee379049283f1cddaf" title="Cancels the timer, causing it to never fire again.">RunLoop::Timer::Cancel</a>()</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;{</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    _cancelled = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_timer.xhtml#afced092a3e340972d8f2a00a1346da25" title="Tests whether a timer has been cancelled.">RunLoop::Timer::IsCancelled</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keywordflow">return</span> _cancelled;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;}</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_run_loop_1_1_timer.xhtml#a16d2624f32431254d37af65d115699bd" title="Tests whether a timer is set to repeat.">RunLoop::Timer::Repeats</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">return</span> _interval &gt; Clock::duration(0);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;}</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;RunLoop::Timer::Clock::duration <a class="code" href="class_run_loop_1_1_timer.xhtml#a263c949308b885a7a18369b5e7f58a0c">RunLoop::Timer::RepeatIntervalInternal</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">return</span> _interval;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;RunLoop::Timer::Clock::time_point <a class="code" href="class_run_loop_1_1_timer.xhtml#a91d250e464a575f5764cf31fa311b8ff">RunLoop::Timer::GetNextFireDateTime</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">return</span> _fireDate;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;}</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop_1_1_timer.xhtml#a3d06b287cfa2e4612333a6b0289b6cbc">RunLoop::Timer::SetNextFireDateTime</a>(Clock::time_point&amp; when)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;{</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    _fireDate = when;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;RunLoop::Timer::Clock::duration <a class="code" href="class_run_loop_1_1_timer.xhtml#a81fbb156f86a53ad09fe2960d08d3437">RunLoop::Timer::GetNextFireDateDuration</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordflow">return</span> _fireDate - Clock::now();</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;}</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_run_loop_1_1_timer.xhtml#ae16633d36a579af6cd22c50df01244ad">RunLoop::Timer::SetNextFireDateDuration</a>(Clock::duration&amp; when)</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;{</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    _fireDate = Clock::now() + when;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;}</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;EPUB3_END_NAMESPACE</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="run__loop__generic_8cpp.xhtml">run_loop_generic.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
