<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/executor.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('executor_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">executor.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="executor_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  executor.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-08-28.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="epub3_8h.xhtml">epub3.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="executor_8h.xhtml">executor.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;future&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(MAC)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;CoreFoundation/CoreFoundation.h&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#elif EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;ppltasks.h&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// because without an implementation file including a header, it doesn&#39;t get</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">//  indexed/coloured in Xcode (grr)</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="optional_8h.xhtml">optional.h</a>&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">//thread_executor::__thread_reaper thread_executor::__reaper_;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#a0cb3adb1091176046436b19b8c37eb39">   40</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classloop__executor.xhtml#a0cb3adb1091176046436b19b8c37eb39">loop_executor::loop</a>()</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    _set_running(<span class="stringliteral">&quot;loop_executor: closure execution methods called in parallel&quot;</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">while</span> ( !_make_loop_exit &amp;&amp; !_queue.empty() )</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure = _queue.front();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">_run_closure</a>(closure);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        _queue.pop();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    _running_closures = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    _make_loop_exit = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#a19da15a3e578600b92f2a8ad006d5fde">   53</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classloop__executor.xhtml#a19da15a3e578600b92f2a8ad006d5fde">loop_executor::run_queued_closures</a>()</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    _set_running(<span class="stringliteral">&quot;loop_executor: closure execution methods called in parallel&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">auto</span> myQueue = _queue;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">while</span> ( !_make_loop_exit &amp;&amp; !myQueue.empty() )</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure = myQueue.front();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">_run_closure</a>(closure);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        myQueue.pop();</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        _queue.pop();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    _running_closures = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    _make_loop_exit = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="classloop__executor.xhtml#a36c134c68839710a3905b05e703f9b60">   68</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classloop__executor.xhtml#a36c134c68839710a3905b05e703f9b60">loop_executor::try_one_closure</a>()</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    _set_running(<span class="stringliteral">&quot;loop_executor: closure execution methods called in parallel&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">bool</span> result = !_queue.empty();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span> ( result )</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure = _queue.front();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">_run_closure</a>(closure);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        _queue.pop();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    _running_closures = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark -</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="code" href="classserial__executor.xhtml#ad10113f223fda4e86b0b89abcc3bd733">   87</a></span>&#160;<a class="code" href="classserial__executor.xhtml#ad10113f223fda4e86b0b89abcc3bd733">serial_executor::~serial_executor</a>()</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    _exiting = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::unique_lock&lt;std::mutex&gt; lk(_lock);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    _exit_condition.wait(lk, [&amp;]{<span class="keywordflow">return</span> _running &lt;= 0;});</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="code" href="classserial__executor.xhtml#a074309e34df41071ef50dff9a8817a63">   93</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classserial__executor.xhtml#a074309e34df41071ef50dff9a8817a63">serial_executor::add</a>(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> ( _exiting )</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    std::unique_lock&lt;std::mutex&gt; lk(_lock);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    _queue.push(closure);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// if there&#39;s already a closure on the underlying executor, it will consume the new closure for us.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span> (_running &gt; 0)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// unlock our mutex -- the underlying executor could be an inline_executor</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    lk.unlock();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    _underlying_executor-&gt;<a class="code" href="classexecutor.xhtml#abaf6f9bae2715d1320b00178653cb032">add</a>([&amp;]{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        std::unique_lock&lt;std::mutex&gt; ulk(_lock);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        _exit_condition.wait(ulk, [<span class="keyword">this</span>](){</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">return</span> _running == 0 || _exiting;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        });</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">if</span> (_exiting) {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">while</span> (!_queue.empty())</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            ++_running;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">closure_type</a> closure_to_run = _queue.front();</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            _queue.pop();</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="comment">// unlock the mutex before the closure runs</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            ulk.unlock();</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">_run_closure</a>(closure_to_run);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            ulk.lock();</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            --_running;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        _exit_condition.notify_all();</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    });</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark -</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;__thread_pool_impl_stdcpp::__thread_pool_impl_stdcpp(<span class="keywordtype">int</span> num_threads) : _queue(), _timed_queue(), _threads(), _jobs_in_flight(0), _mutex(), _exiting(false), _jobs_ready(), _timers_updated(), _timed_addition_thread()</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> ( num_threads &lt; 1 )</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        num_threads = std::thread::hardware_concurrency();</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> ( num_threads &lt; 1 )</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        num_threads = 1;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; num_threads; i++ ) {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        _threads.emplace_back(&amp;__thread_pool_impl_stdcpp::_RunWorker, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    _timed_addition_thread = std::thread(&amp;__thread_pool_impl_stdcpp::_RunTimer, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;__thread_pool_impl_stdcpp::~__thread_pool_impl_stdcpp()</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    _mutex.lock();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    _exiting = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    _mutex.unlock();</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// wake up all threads -- any that are waiting will see _exiting and exit immediately</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    _jobs_ready.notify_all();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    _timers_updated.notify_all();</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// wait until all threads have exited</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">for</span> ( std::thread&amp; thr : _threads ) {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        thr.join();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    _timed_addition_thread.join();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordtype">void</span> __thread_pool_impl_stdcpp::add(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    std::unique_lock&lt;std::mutex&gt; _(_mutex);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// enqueue the job</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    _queue.push(closure);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// wake one available thread</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    _jobs_ready.notify_one();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keywordtype">void</span> __thread_pool_impl_stdcpp::add_at(std::chrono::system_clock::time_point abs_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    std::unique_lock&lt;std::mutex&gt; _(_mutex);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// enqueue the time and the closure-- the priority_queue will sort it into place automatically</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    _timed_queue.emplace(abs_time, closure);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// notify the timer thread that changes have been made</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    _timers_updated.notify_all();</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keywordtype">void</span> __thread_pool_impl_stdcpp::_RunWorker()</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">do</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        std::unique_lock&lt;std::mutex&gt; lk(_mutex);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span> (!_exiting &amp;&amp; _queue.size() == 0)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            _jobs_ready.wait(lk);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">if</span> ( _exiting )</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">if</span> (_queue.empty())</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">continue</span>;       <span class="comment">// is this why the copy below is crashing sometimes?</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// NB: mutex is locked at this point, remember</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure = _queue.front();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        _queue.pop();</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        ++_jobs_in_flight;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="comment">// unlock the mutex</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        lk.unlock();</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="comment">// run the closure</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <a class="code" href="classexecutor.xhtml#acabaf063bf7203281f1adae5c500d6d1">executor::_run_closure</a>(closure);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">//        if ( --_jobs_in_flight == 0 &amp;&amp; bool(_drained_handler) )</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">//            _drained_handler();</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    } <span class="keywordflow">while</span> (1);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keywordtype">void</span> __thread_pool_impl_stdcpp::_RunTimer()</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">while</span> (!_exiting)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        std::unique_lock&lt;std::mutex&gt; lk(_mutex);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">if</span> (_exiting)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        std::cv_status status = std::cv_status::no_timeout;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">if</span> ( _timed_queue.empty() )</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="comment">// wait to be notified of additions</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            _timers_updated.wait(lk);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="comment">// wait until either notified or a timer expires</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            status = _timers_updated.wait_until(lk, _timed_queue.top().first);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">if</span> ( _exiting )</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// if we hit the timeout, add the topmost item from the timed queue to the real queue</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">if</span> ( status == std::cv_status::timeout )</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="comment">// remember that the mutex is still locked at this point</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure = _timed_queue.top().second;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            _timed_queue.pop();</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="comment">// unlock the mutex before calling add(), which will want to own the lock itself</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            lk.unlock();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="comment">// add the closure to the execution queue</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            add(closure);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor"></span>__thread_pool_impl_winrt::__thread_pool_impl_winrt(<span class="keywordtype">int</span> num_threads)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    : _work_items(),</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      _timers(),</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      _mutex(), </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      _exiting(false)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;__thread_pool_impl_winrt::~__thread_pool_impl_winrt()</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;{</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    std::lock_guard&lt;std::mutex&gt; _(_mutex);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    _exiting = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> item : _timers)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        item-&gt;Cancel();</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> item : _work_items)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        item-&gt;Cancel();</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="keywordtype">void</span> __thread_pool_impl_winrt::add(<a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">using namespace </span>::Windows::System::Threading;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    std::unique_lock&lt;std::mutex&gt; _(_mutex);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">if</span> (_exiting)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">// enqueue the job</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    thread_pool::RunAsync(ref <span class="keyword">new</span> WorkItemHandler([closure](work_item^ action) {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">if</span> (action-&gt;Status == ::Windows::Foundation::AsyncStatus::Started)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            closure();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keywordtype">void</span> __thread_pool_impl_winrt::add_after(std::chrono::system_clock::duration&amp; rel_time, <a class="code" href="classexecutor.xhtml#abf9c45f1851fddc41e28940525d5c453">executor::closure_type</a> closure)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">using namespace </span>::Windows::System::Threading;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    std::lock_guard&lt;std::mutex&gt; _(_mutex);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">if</span> (_exiting)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">typedef</span> std::chrono::duration&lt;long long, std::ratio&lt;1, 10000000&gt;&gt; _Ticks;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    ::Windows::Foundation::TimeSpan span;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    span.Duration = std::chrono::duration_cast&lt;_Ticks&gt;(rel_time).count();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">// create a timer which will enqueue the job</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keyword">auto</span> <span class="keyword">self</span> = shared_from_this();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    _timers.push_back(timer::CreateTimer(ref <span class="keyword">new</span> TimerElapsedHandler([<span class="keyword">self</span>, closure](timer^ theTimer) {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keyword">self</span>-&gt;add(closure);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }), span));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;}</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT) || EPUB_PLATFORM(MAC)</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor"></span><span class="keyword">class </span>__main_thread_executor : <span class="keyword">public</span> <a class="code" href="classscheduled__executor.xhtml">scheduled_executor</a></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;{</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor"></span>    static ::Windows::UI::Core::CoreDispatcher^ _mainDispatcher;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> SetMainDispatcher(::Windows::UI::Core::CoreDispatcher^ dispatcher);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    std::atomic_int_fast32_t    _num_closures;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">explicit</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    __main_thread_executor()</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        : <a class="code" href="classscheduled__executor.xhtml">scheduled_executor</a>()</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        {}</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    ~__main_thread_executor()</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        {}</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classexecutor.xhtml#abaf6f9bae2715d1320b00178653cb032">add</a>(closure_type closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">virtual</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classexecutor.xhtml#a33c1bb6f80a61a87779723dd87fb9bc3">uninitiated_task_count</a>() const <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    virtual</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordtype">void</span> add_at(std::chrono::system_clock::time_point&amp; abs_time, closure_type closure) <a class="code" href="__compiler_8h.xhtml#a5dea698950629d9e51d19c1a25be1c30">OVERRIDE</a>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    virtual</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordtype">void</span> add_after(std::chrono::system_clock::duration&amp; rel_time, closure_type closure) OVERRIDE;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;};</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;std::shared_ptr&lt;<a class="code" href="classexecutor.xhtml">executor</a>&gt;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<a class="code" href="executor_8h.xhtml#aec5dcaf992d285dbcbc3b7fd545fc8a7">main_thread_executor</a>()</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;__main_thread_executor&gt;();</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(MAC)</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Rep, <span class="keyword">typename</span> _Period&gt;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;CFTimeInterval CFTimeIntervalFromDuration(std::chrono::duration&lt;_Rep, _Period&gt;&amp; __d)</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;{</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">using namespace </span>std::chrono;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">typedef</span> duration&lt;CFTimeInterval&gt; CFSeconds;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    CFSeconds __cfs = duration_cast&lt;CFSeconds&gt;(__d);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">return</span> __cfs.count();</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Clock, <span class="keyword">typename</span> _Duration = <span class="keyword">typename</span> _Clock::duration&gt;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;CFAbsoluteTime CFAbsoluteTimeFromTimePoint(std::chrono::time_point&lt;_Clock, _Duration&gt;&amp; __t)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">using namespace </span>std::chrono;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">typedef</span> duration&lt;CFAbsoluteTime&gt; CFSeconds;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    CFSeconds __s1970 = duration_cast&lt;CFSeconds&gt;(__t.time_since_epoch());</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordflow">return</span> __s1970.count() + kCFAbsoluteTimeIntervalSince1970;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="keywordtype">void</span> __main_thread_executor::add(closure_type closure)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    _num_closures++;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    std::weak_ptr&lt;__main_thread_executor&gt; weakThis(std::dynamic_pointer_cast&lt;__main_thread_executor&gt;(shared_from_this()));</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    CFRunLoopPerformBlock(CFRunLoopGetMain(), kCFRunLoopCommonModes, ^{</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keyword">auto</span> <span class="keyword">self</span> = weakThis.lock();</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">bool</span>(<span class="keyword">self</span>))</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keyword">self</span>-&gt;_num_closures--;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        closure();</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    });</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    CFRunLoopWakeUp(CFRunLoopGetMain());</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;}</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="keywordtype">size_t</span> __main_thread_executor::uninitiated_task_count()<span class="keyword"> const</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">return</span> _num_closures;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;}</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keywordtype">void</span> __main_thread_executor::add_at(std::chrono::system_clock::time_point&amp; abs_time, closure_type closure)</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">using namespace </span>std::chrono;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    CFAbsoluteTime cfTime = CFAbsoluteTimeFromTimePoint(abs_time);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keyword">auto</span> <span class="keyword">self</span> = std::dynamic_pointer_cast&lt;__main_thread_executor&gt;(shared_from_this());</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    CFRunLoopTimerRef timer = CFRunLoopTimerCreateWithHandler(kCFAllocatorDefault, cfTime, 0.0, 0, 0, ^(CFRunLoopTimerRef theTimer) {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        closure();</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keyword">self</span>-&gt;_num_closures--;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    });</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    _num_closures++;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    CFRunLoopAddTimer(CFRunLoopGetMain(), timer, kCFRunLoopCommonModes);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;}</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="keywordtype">void</span> __main_thread_executor::add_after(std::chrono::system_clock::duration&amp; rel_time, closure_type closure)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">auto</span> abs_time = std::chrono::system_clock::now() + rel_time;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="classscheduled__executor.xhtml#a2ebac0f9012128a9c9cfe68f58eac891">add_at</a>(abs_time, closure);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;}</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor">#elif EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor"></span>::Windows::UI::Core::CoreDispatcher^ __main_thread_executor::_mainDispatcher = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keywordtype">void</span> __main_thread_executor::SetMainDispatcher(::Windows::UI::Core::CoreDispatcher^ dispatcher)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    _mainDispatcher = dispatcher;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keywordtype">void</span> __main_thread_executor::add(closure_type closure)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">using namespace </span>::Windows::UI::Core;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    _num_closures++;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    CoreDispatcher^ dispatcher = _mainDispatcher;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordflow">if</span> (dispatcher == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">throw</span> std::system_error(std::error_code(E_HANDLE, std::system_category()), <span class="stringliteral">&quot;You must call main_thread_executor::SetMainDispatcher() from the main UI thread before you can use this method&quot;</span>);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">if</span> (dispatcher-&gt;HasThreadAccess)</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        closure();</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    }</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">auto</span> <span class="keyword">self</span> = std::dynamic_pointer_cast&lt;__main_thread_executor&gt;(shared_from_this());</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        dispatcher-&gt;RunAsync(CoreDispatcherPriority::Normal, ref <span class="keyword">new</span> DispatchedHandler([<span class="keyword">self</span>, closure]() {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            closure();</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            <span class="keyword">self</span>-&gt;_num_closures--;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        }));</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="keywordtype">size_t</span> __main_thread_executor::uninitiated_task_count()<span class="keyword"> const</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keywordflow">return</span> _num_closures;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="keywordtype">void</span> __main_thread_executor::add_at(std::chrono::system_clock::time_point&amp; abs_time, closure_type closure)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;{</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">using namespace </span>std::chrono;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">auto</span> rel_time = abs_time - system_clock::now();</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    add_after(rel_time, closure);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="keywordtype">void</span> __main_thread_executor::add_after(std::chrono::system_clock::duration&amp; rel_time, closure_type closure)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">using namespace </span>::Windows::System::Threading;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">using namespace </span>std::chrono;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">typedef</span> duration&lt;long long, std::ratio&lt;1, 10000000&gt;&gt; _Ticks;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    ::Windows::Foundation::TimeSpan span;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    span.Duration = duration_cast&lt;_Ticks&gt;(rel_time).count();</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="comment">// create a timer which will enqueue the job</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keyword">auto</span> <span class="keyword">self</span> = shared_from_this();</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    ThreadPoolTimer::CreateTimer(ref <span class="keyword">new</span> TimerElapsedHandler([<span class="keyword">self</span>, closure](ThreadPoolTimer^ theTimer) {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keyword">self</span>-&gt;add(closure);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    }), span);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;}</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;EPUB3_END_NAMESPACE</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="executor_8cpp.xhtml">executor.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
