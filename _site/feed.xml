<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://example.com/</link>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 25 Oct 2016 12:04:07 +0200</pubDate>
    <lastBuildDate>Tue, 25 Oct 2016 12:04:07 +0200</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Readium LCP Specifications</title>
        <description>&lt;p&gt;Readium LCP (“Licensed Content Protection”) is an initiative to establish a vendor-neutral interoperable DRM (Digital Rights Management) ecosystem for eBooks and other digital publications, with public specifications and open-source software.&lt;/p&gt;

&lt;p&gt;Readium LCP principles have already been used as the basis of several production solutions and has also helped advance Readium SDK’s core DRM architecture, which supports integration of a number of 3rd-party DRM solutions.&lt;/p&gt;

&lt;p&gt;The interoperability of Readium LCP services will be guaranteed by EDRLab (European Digital Reading Lab), i.e. the Readium headquarter in Europe. For more information about how to join this open DRM ecosystem, please contact EDRLab (&lt;a href=&quot;https://edrlab.org&quot;&gt;https://edrlab.org&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;published-documents&quot;&gt;Published documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://readium.github.io/drm/lcp1-0.html&quot;&gt;Readium Licensed Content Protection (LCP) 1.0&lt;/a&gt; defines a standard License Document and an Encryption Profile for encrypting resources in EPUB 3 Publications, expressing rights and restrictions, and for securely delivering decryption keys to Reading Systems via licenses for specific Users. Readium LCP also defines a simple passphrase-based authentication method for Reading Systems to access encrypted resources and verify a license.&lt;/p&gt;

&lt;p&gt;&amp;gt; See also: &lt;a href=&quot;https://github.com/readium/readium.github.io&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://readium.github.io/drm/lsd1-0.html&quot;&gt;Readium License Status Document 1.0&lt;/a&gt; defines a standard Status Document for representing the status of a DRM license along with interactions that might affect its status. These interactions put additional responsibilities on both Content Providers and Reading Systems. One of the primary objectives is to support lending in public libraries where a user may have the ability to renew a time-limited loan or cancel one before it expires.&lt;/p&gt;

&lt;p&gt;&amp;gt; See also: &lt;a href=&quot;https://github.com/readium/readium.github.io&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;open-source-software&quot;&gt;Open-source software&lt;/h3&gt;

&lt;p&gt;The Readium repositories relative to Readium LCP are currently still private, as the core development team is working on providing a working testbed for Readium LCP deployments.&lt;/p&gt;

&lt;p&gt;The Readium LCP Client library, written in C++, is very easy to deploy as a “content module” in a Reading System based on the Readium SDK. It’s code may be adapted to any other Reading System implementation.&lt;/p&gt;

&lt;p&gt;&amp;gt; Download it on: &lt;a href=&quot;https://github.com/readium/readium-lcp-client&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The multi-platform reference Readium LCP Server is written in Golang. It provides a command line utility for content encryption, a Readium LCP License Server and a License Status Server. The REST API allows for a seamless integration with front-end systems and offers immediate interaction with Readium LCP compliant Reading Systems.  &lt;/p&gt;

&lt;p&gt;&amp;gt; Download it on: &lt;a href=&quot;https://github.com/readium/readium-lcp-server&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 00:00:00 +0200</pubDate>
        <link>http://example.com/madoc/jekyll/update/2016/09/26/lcp-specs.html</link>
        <guid isPermaLink="true">http://example.com/madoc/jekyll/update/2016/09/26/lcp-specs.html</guid>
        
        
        <category>madoc</category>
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Readium LSD Specifications</title>
        <description>&lt;p&gt;Readium LCP (“Licensed Content Protection”) is an initiative to establish a vendor-neutral interoperable DRM (Digital Rights Management) ecosystem for eBooks and other digital publications, with public specifications and open-source software.&lt;/p&gt;

&lt;p&gt;Readium LCP principles have already been used as the basis of several production solutions and has also helped advance Readium SDK’s core DRM architecture, which supports integration of a number of 3rd-party DRM solutions.&lt;/p&gt;

&lt;p&gt;The interoperability of Readium LCP services will be guaranteed by EDRLab (European Digital Reading Lab), i.e. the Readium headquarter in Europe. For more information about how to join this open DRM ecosystem, please contact EDRLab (&lt;a href=&quot;https://edrlab.org&quot;&gt;https://edrlab.org&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;published-documents&quot;&gt;Published documents&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://readium.github.io/drm/lcp1-0.html&quot;&gt;Readium Licensed Content Protection (LCP) 1.0&lt;/a&gt; defines a standard License Document and an Encryption Profile for encrypting resources in EPUB 3 Publications, expressing rights and restrictions, and for securely delivering decryption keys to Reading Systems via licenses for specific Users. Readium LCP also defines a simple passphrase-based authentication method for Reading Systems to access encrypted resources and verify a license.&lt;/p&gt;

&lt;p&gt;&amp;gt; See also: &lt;a href=&quot;https://github.com/readium/readium.github.io&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://readium.github.io/drm/lsd1-0.html&quot;&gt;Readium License Status Document 1.0&lt;/a&gt; defines a standard Status Document for representing the status of a DRM license along with interactions that might affect its status. These interactions put additional responsibilities on both Content Providers and Reading Systems. One of the primary objectives is to support lending in public libraries where a user may have the ability to renew a time-limited loan or cancel one before it expires.&lt;/p&gt;

&lt;p&gt;&amp;gt; See also: &lt;a href=&quot;https://github.com/readium/readium.github.io&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;open-source-software&quot;&gt;Open-source software&lt;/h3&gt;

&lt;p&gt;The Readium repositories relative to Readium LCP are currently still private, as the core development team is working on providing a working testbed for Readium LCP deployments.&lt;/p&gt;

&lt;p&gt;The Readium LCP Client library, written in C++, is very easy to deploy as a “content module” in a Reading System based on the Readium SDK. It’s code may be adapted to any other Reading System implementation.&lt;/p&gt;

&lt;p&gt;&amp;gt; Download it on: &lt;a href=&quot;https://github.com/readium/readium-lcp-client&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The multi-platform reference Readium LCP Server is written in Golang. It provides a command line utility for content encryption, a Readium LCP License Server and a License Status Server. The REST API allows for a seamless integration with front-end systems and offers immediate interaction with Readium LCP compliant Reading Systems.  &lt;/p&gt;

&lt;p&gt;&amp;gt; Download it on: &lt;a href=&quot;https://github.com/readium/readium-lcp-server&quot;&gt;GitHub repository&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 16:01:37 +0200</pubDate>
        <link>http://example.com/madoc/jekyll/update/2016/09/23/documentation-jekyll.html</link>
        <guid isPermaLink="true">http://example.com/madoc/jekyll/update/2016/09/23/documentation-jekyll.html</guid>
        
        
        <category>madoc</category>
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
