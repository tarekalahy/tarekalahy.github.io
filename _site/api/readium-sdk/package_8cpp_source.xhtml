<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/ePub/package.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('package_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">package.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="package_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  package.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-11-28.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="container_8h.xhtml">container.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="package_8h.xhtml">package.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="archive_8h.xhtml">archive.h</a>&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="archive__xml_8h.xhtml">archive_xml.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="xpath__wrangler_8h.xhtml">xpath_wrangler.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="nav__table_8h.xhtml">nav_table.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="glossary_8h.xhtml">glossary.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="iri_8h.xhtml">iri.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="basic_8h.xhtml">basic.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="byte__stream_8h.xhtml">byte_stream.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="filter__chain_8h.xhtml">filter_chain.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="filter__manager_8h.xhtml">filter_manager.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="media-overlays__smil__model_8h.xhtml">media-overlays_smil_model.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="error__handler_8h.xhtml">ePub3/utilities/error_handler.h</a>&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include REGEX_INCLUDE</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;ePub3/xml/document.h&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;ePub3/xml/element.h&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">//#include &quot;iri.h&quot;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;google-url/url_canon.h&gt;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;google-url/url_util.h&gt;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="code" href="package_8cpp.xhtml#a64136c03b0cd2dc47ad242664092684e">   47</a></span>&#160;<span class="preprocessor">#define _XML_OVERRIDE_SWITCHES (EPUB_USE(LIBXML2) &amp;&amp; PROMISCUOUS_LIBXML_OVERRIDES == 0)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#if _XML_OVERRIDE_SWITCHES</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span>    <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="namespacexml.xhtml#a9dc4345a71b634571de2734014a3700d">__resetLibXMLOverrides</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keyword">extern</span> <span class="keywordtype">void</span> <a class="code" href="namespacexml.xhtml#ac332da21e665434f0d30fdc1cb9986e2">__setupLibXML</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="code" href="package_8cpp.xhtml#af37b802690a2557515130b2dcaa6df10">   56</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="package_8cpp.xhtml#af37b802690a2557515130b2dcaa6df10">PrintNodeSet</a>(<a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a>&amp; nodeSet)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span> (decltype(nodeSet.size()) i = 0; i &lt; nodeSet.size(); i++)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">auto</span> node = nodeSet[i];</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        fprintf(stderr, <span class="stringliteral">&quot;Node %02lu: &quot;</span>, i);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span> ( !<span class="keywordtype">bool</span>(node) )</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            fprintf(stderr, <span class="stringliteral">&quot;[nullptr]&quot;</span>);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            fprintf(stderr, <span class="stringliteral">&quot;%s&quot;</span>, node-&gt;XMLString().utf8());</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        fprintf(stderr, <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_USER_LITERALS)</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * OPFNamespace = <span class="stringliteral">&quot;http://www.idpf.org/2007/opf&quot;</span>_xml;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * DCNamespace = <span class="stringliteral">&quot;http://purl.org/dc/elements/1.1/&quot;</span>_xml;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * MediaTypeElementName = <span class="stringliteral">&quot;mediaType&quot;</span>_xml;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * OPFNamespace = (<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*)<span class="stringliteral">&quot;http://www.idpf.org/2007/opf&quot;</span>;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * DCNamespace = (<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*)<span class="stringliteral">&quot;http://purl.org/dc/elements/1.1/&quot;</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * MediaTypeElementName = (<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*)<span class="stringliteral">&quot;mediaType&quot;</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_package.xhtml#a6c9f4ca5850bb32288fa94735b9c5390">Package::gValidateSchema</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a83aea864215bd7c93ab4d2400e496693">   88</a></span>&#160;PackageBase::PackageBase(<span class="keyword">const</span> shared_ptr&lt;Container&gt;&amp; owner, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; type) : _archive(owner-&gt;GetArchive()), _opf(nullptr), _type(type)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> ( !<a class="code" href="class_package_base.xhtml#aa3e98e134227c3496309840b038ecfc9" title="The archive from which the package was loaded.">_archive</a> )</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Owner doesn&#39;t have an archive!&quot;</span>);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a1e734b3828843b4494a0a84f33180183">   93</a></span>&#160;PackageBase::PackageBase(<a class="code" href="class_package_base.xhtml">PackageBase</a>&amp;&amp; o) : _archive(o._archive), _opf(std::move(o._opf)), _pathBase(std::move(o._pathBase)), _type(std::move(o._type)), _manifestByID(std::move(o._manifestByID)), _manifestByAbsolutePath(std::move(o._manifestByAbsolutePath)), _spine(std::move(o._spine))</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    o._archive = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#abc185cbb2acf9d28dcdceef150fe2b8b">   97</a></span>&#160;<a class="code" href="class_package_base.xhtml#abc185cbb2acf9d28dcdceef150fe2b8b">PackageBase::~PackageBase</a>()</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// our Container owns the archive</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#ad28fa875ccfa871bef61d4e490dcb16d">  101</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_package_base.xhtml#ad28fa875ccfa871bef61d4e490dcb16d">PackageBase::Open</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="class_archive_xml_reader.xhtml">ArchiveXmlReader</a> reader(<a class="code" href="class_package_base.xhtml#aa3e98e134227c3496309840b038ecfc9" title="The archive from which the package was loaded.">_archive</a>-&gt;ReaderAtPath(path.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>()));</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a> = reader.<a class="code" href="class_archive_xml_reader.xhtml#a19b2150f4b5ca4dfe01a5994a0774e5e">xmlReadDocument</a>(path.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#elif EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a> = reader.ReadDocument(path.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), <span class="keyword">nullptr</span>, 0);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> ( !<span class="keywordtype">bool</span>(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>) )</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        HandleError(EPUBError::OCFInvalidRootfileURL, _Str(<a class="code" href="__config_8h.xhtml#a9c15fe1e91b07ea3280f5239f9841b67">__PRETTY_FUNCTION__</a>, <span class="stringliteral">&quot;: No OPF file at &quot;</span>, path.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>()));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">size_t</span> loc = path.<a class="code" href="classstring.xhtml#a646c4270831260d2e77cea0e3b704538">rfind</a>(<span class="stringliteral">&quot;/&quot;</span>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> ( loc == std::string::npos )</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a> = <span class="charliteral">&#39;/&#39;</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a> = path.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(0, loc+1);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a37ae4dfd0748e9e32cfa17bcf105cd06">  127</a></span>&#160;shared_ptr&lt;SpineItem&gt; <a class="code" href="class_package_base.xhtml#a37ae4dfd0748e9e32cfa17bcf105cd06">PackageBase::SpineItemAt</a>(<span class="keywordtype">size_t</span> idx)<span class="keyword"> const</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    shared_ptr&lt;SpineItem&gt; item = <a class="code" href="class_package_base.xhtml#afefe51398469aefa97f9be5046ff59f6" title="The first item in the spine (SpineItems are a linked list).">_spine</a>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">for</span> ( <span class="keywordtype">size_t</span> i = 0; i &lt; idx &amp;&amp; item != <span class="keyword">nullptr</span>; i++ )</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        item = item-&gt;Next();</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">return</span> item;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a7b8f0f66d10c22a4d58703d8a1d22f98">  136</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="class_package_base.xhtml#a7b8f0f66d10c22a4d58703d8a1d22f98">PackageBase::IndexOfSpineItemWithIDRef</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;idref)<span class="keyword"> const</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    shared_ptr&lt;SpineItem&gt; item = <a class="code" href="class_package_base.xhtml#a65ad10fec002f261e38716b99a48bffc">FirstSpineItem</a>();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">for</span> ( <span class="keywordtype">size_t</span> i = 0; item != <span class="keyword">nullptr</span>; i++, item = item-&gt;Next() )</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">if</span> ( item-&gt;Idref() == idref )</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> size_t(-1);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a8921b3850c6ea3b561b2804561e67ae6">  147</a></span>&#160;shared_ptr&lt;ManifestItem&gt; <a class="code" href="class_package_base.xhtml#a8921b3850c6ea3b561b2804561e67ae6">PackageBase::ManifestItemWithID</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;ident)<span class="keyword"> const</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">auto</span> found = <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a>.find(ident);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> ( found == <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a>.end() )</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> found-&gt;second;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#ae32da699a7ffe7b0aaf1d1ab155323ef">  155</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_package_base.xhtml#ae32da699a7ffe7b0aaf1d1ab155323ef">PackageBase::CFISubpathForManifestItemWithID</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;ident)<span class="keyword"> const</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">size_t</span> sz = <a class="code" href="class_package_base.xhtml#a7b8f0f66d10c22a4d58703d8a1d22f98">IndexOfSpineItemWithIDRef</a>(ident);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">if</span> ( sz == <span class="keywordtype">size_t</span>(-1) )</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">throw</span> std::invalid_argument(_Str(<span class="stringliteral">&quot;Identifier &#39;&quot;</span>, ident, <span class="stringliteral">&quot;&#39; was not found in the spine.&quot;</span>));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> _Str(<a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a>, <span class="stringliteral">&quot;/&quot;</span>, (sz+1)*2, <span class="stringliteral">&quot;[&quot;</span>, ident, <span class="stringliteral">&quot;]!&quot;</span>);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#af33c1664e3749a85531b6c7c91fb4322">  163</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classshared__vector.xhtml">shared_vector&lt;ManifestItem&gt;</a> <a class="code" href="class_package_base.xhtml#af33c1664e3749a85531b6c7c91fb4322">PackageBase::ManifestItemsWithProperties</a>(<a class="code" href="class_package_base.xhtml#a2c795934588ca945b19d250ea24745ef" title="A list of property IRIs.">PropertyIRIList</a> properties)<span class="keyword"> const</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classshared__vector.xhtml">shared_vector&lt;ManifestItem&gt;</a> result;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span>&amp; item : <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a> )</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> ( item.second-&gt;HasProperty(properties) )</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            result.push_back(item.second);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a009b8312e098947b82aee20a50728dd4">  173</a></span>&#160;shared_ptr&lt;ManifestItem&gt; <a class="code" href="class_package_base.xhtml#a009b8312e098947b82aee20a50728dd4">PackageBase::ManifestItemAtRelativePath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path)<span class="keyword"> const</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">string</span> absPath = <a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a> + (path[0] == <span class="charliteral">&#39;/&#39;</span> ? path.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(1) : path);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">auto</span> found = <a class="code" href="class_package_base.xhtml#ac20bbeb21bb83835535db996f13f4463" title="All manifest items, indexed by absolute path.">_manifestByAbsolutePath</a>.find(absPath);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span> (found != <a class="code" href="class_package_base.xhtml#ac20bbeb21bb83835535db996f13f4463" title="All manifest items, indexed by absolute path.">_manifestByAbsolutePath</a>.end()) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> found-&gt;second;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Edge case...</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// before giving up, let&#39;s check for lower/upper-case percent encoding mismatch (e.g. %2B vs. %2b)</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// (well, we&#39;re normalising to un-escaped paths)</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">//if ( path.find(&quot;%&quot;) != std::string::npos ) SOMETIMES OPF MANIFEST ITEM HREF IS PERCENT-ESCAPED, BUT NOT HTML SRC !!</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    url_canon::RawCanonOutputW&lt;256&gt; output;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// SEE BELOW FOR A DEBUGGING BREAKPOINT / CHECK</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// note that std::string .size() is the same as</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// ePub3:string .utf8_size() defined in utfstring.h (equivalent to strlen(str.c_str()) ),</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// but not the same as ePub3:string .size() !!</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// WATCH OUT!</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    url_util::DecodeURLEscapeSequences(path.c_str(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(path.utf8_size()), &amp;output);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">string</span> path_(output.data(), output.length());</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordtype">string</span> absPath_ = <a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a> + (path_[0] == <span class="charliteral">&#39;/&#39;</span> ? path_.substr(1) : path_);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; item : <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a>)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordtype">string</span> absolute = item.second-&gt;AbsolutePath();</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        url_canon::RawCanonOutputW&lt;256&gt; output_;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">//        THIS IS FOR DEBUGGING, SEE COMMENT BELOW ...</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> * absChars = absolute.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>();</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordtype">int</span> absLength_STRLEN = (int)strlen(absChars);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordtype">int</span> absLength_SIZE = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(absolute.<a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>());</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordtype">int</span> absLength_UTF8SIZE = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(absolute.<a class="code" href="classstring.xhtml#a708e8f77226917886c81e234d4ca339c">utf8_size</a>());</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">if</span> (absLength_STRLEN != absLength_SIZE || absLength_STRLEN != absLength_UTF8SIZE || absLength_SIZE != absLength_UTF8SIZE)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="comment">// Place breakpoint here</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="comment">//printf(&quot;String length DIFF absLength_STRLEN:%d - absLength_SIZE:%d - absLength_UTF8SIZE:%d\n&quot;, absLength_STRLEN, absLength_SIZE, absLength_UTF8SIZE);</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// note that std::string .size() is the same as</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="comment">// ePub3:string .utf8_size() defined in utfstring.h (equivalent to strlen(str.c_str()) ),</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="comment">// but not the same as ePub3:string .size() !!</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="comment">// WATCH OUT!</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        url_util::DecodeURLEscapeSequences(absolute.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(absolute.<a class="code" href="classstring.xhtml#a708e8f77226917886c81e234d4ca339c">utf8_size</a>()), &amp;output_);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordtype">string</span> absolute_(output_.data(), output_.length());</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">if</span> (absolute_ == absPath_)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">return</span> item.second;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="comment">// DEBUG</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">//printf(&quot;MISSING ManifestItemAtRelativePath %s (%s)\n&quot;, path.c_str(), absPath.c_str());</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a2bb8fa0813953701fe631823499a3998">  234</a></span>&#160;shared_ptr&lt;NavigationTable&gt; <a class="code" href="class_package_base.xhtml#a2bb8fa0813953701fe631823499a3998">PackageBase::NavigationTable</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;title)<span class="keyword"> const</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">auto</span> found = <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>.find(title);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">if</span> ( found == <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>.end() )</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">return</span> found-&gt;second;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a567f160d5cdd89db25798194455c1114">  241</a></span>&#160;shared_ptr&lt;Collection&gt; <a class="code" href="class_package_base.xhtml#a567f160d5cdd89db25798194455c1114">PackageBase::CollectionWithRole</a>(<a class="code" href="classbasic__string__view.xhtml">string_view</a> role)<span class="keyword"> const</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">auto</span> found = <a class="code" href="class_package_base.xhtml#a97574709748247ddf65b77305a590f46" title="List of all parsed &lt;collection&gt; elements.">_collections</a>.find(role);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span> (found == <a class="code" href="class_package_base.xhtml#a97574709748247ddf65b77305a590f46" title="List of all parsed &lt;collection&gt; elements.">_collections</a>.end())</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> found-&gt;second;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="code" href="group__utilities.xhtml#ga306e3005b1e856b937774d9b5a7a66e2">  248</a></span>&#160;unique_ptr&lt;ByteStream&gt; <a class="code" href="group__utilities.xhtml#ga306e3005b1e856b937774d9b5a7a66e2">PackageBase::ReadStreamForItemAtPath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;path)<span class="keyword"> const</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package_base.xhtml#aa3e98e134227c3496309840b038ecfc9" title="The archive from which the package was loaded.">_archive</a>-&gt;ByteStreamAtPath(path.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>());</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#af4431810dd257fa77c0678181ed0d79d">  252</a></span>&#160;shared_ptr&lt;SpineItem&gt; <a class="code" href="class_package_base.xhtml#af4431810dd257fa77c0678181ed0d79d">PackageBase::ConfirmOrCorrectSpineItemQualifier</a>(shared_ptr&lt;SpineItem&gt; pItem, <a class="code" href="struct_c_f_i_1_1_component.xhtml" title="A single component of a CFI.">CFI::Component</a> *pComponent)<span class="keyword"> const</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">if</span> ( pComponent-&gt;<a class="code" href="struct_c_f_i_1_1_component.xhtml#a2ffbcb6d624a7a237bdeaec171ae5f38">HasQualifier</a>() &amp;&amp; pItem-&gt;Idref() != pComponent-&gt;<a class="code" href="struct_c_f_i_1_1_component.xhtml#ac736394a3bb33910f8546daf06fcf1bb" title="The value of any id or idref qualifier.">qualifier</a> )</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="comment">// find the item with the qualifier</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        pItem = <a class="code" href="class_package_base.xhtml#afefe51398469aefa97f9be5046ff59f6" title="The first item in the spine (SpineItems are a linked list).">_spine</a>;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        uint32_t idx = 2;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">while</span> ( pItem != <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="keywordflow">if</span> ( pItem-&gt;Idref() == pComponent-&gt;<a class="code" href="struct_c_f_i_1_1_component.xhtml#ac736394a3bb33910f8546daf06fcf1bb" title="The value of any id or idref qualifier.">qualifier</a> )</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="comment">// found it-- correct the CFI</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                pComponent-&gt;<a class="code" href="struct_c_f_i_1_1_component.xhtml#a6a5f6d076c5974b50cd1e681edf0c389" title="The numeric index for the node identified by component.">nodeIndex</a> = idx;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            pItem = pItem-&gt;Next();</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        }</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( pComponent-&gt;<a class="code" href="struct_c_f_i_1_1_component.xhtml#a2ffbcb6d624a7a237bdeaec171ae5f38">HasQualifier</a>() == false )</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        HandleError(EPUBError::CFINonAssertedXMLID);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> pItem;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="code" href="class_package_base.xhtml#a4acb0ded73d51ee3b191078b484cc916">  279</a></span>&#160;<a class="code" href="classshared__vector.xhtml">NavigationList</a> <a class="code" href="class_package_base.xhtml#a4acb0ded73d51ee3b191078b484cc916" title="Loads navigation tables from a given manifest item (which has the &quot;nav&quot; property) or one referencing ...">PackageBase::NavTablesFromManifestItem</a>(shared_ptr&lt;PackageBase&gt; owner, <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> pItem)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="comment">// have to do this one manually, as PackageBase doesn&#39;t inherit from PointerType itself</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">PackagePtr</a> sharedPkg = std::dynamic_pointer_cast&lt;<a class="code" href="class_package.xhtml">Package</a>&gt;(owner);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">if</span> ( !sharedPkg )</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="nav__element_8h.xhtml#adaad579c3f64f53f9e815cfc82a55141">NavigationList</a>();</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">if</span> ( pItem == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="nav__element_8h.xhtml#adaad579c3f64f53f9e815cfc82a55141">NavigationList</a>();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">auto</span> doc = pItem-&gt;ReferencedDocument();</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">if</span> ( !<span class="keywordtype">bool</span>(doc) )</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="nav__element_8h.xhtml#adaad579c3f64f53f9e815cfc82a55141">NavigationList</a>();</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="classshared__vector.xhtml">NavigationList</a> navList;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">if</span> (pItem-&gt;MediaType() != <a class="code" href="epub3_8h.xhtml#a6f5cfa6642cc534a6d1d70e4e82cb7e2">NCXContentType</a>)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        navList = _LoadEPUB3NavTablesFromManifestItem(sharedPkg, pItem, doc);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        navList = _LoadNCXNavTablesFromManifestItem(sharedPkg, pItem, doc);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">if</span> (navList.empty() &amp;&amp; pItem-&gt;Href().rfind(<span class="stringliteral">&quot;.ncx&quot;</span>) == pItem-&gt;Href().size()-4)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        navList = _LoadNCXNavTablesFromManifestItem(sharedPkg, pItem, doc);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">return</span> navList;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<a class="code" href="classshared__vector.xhtml">NavigationList</a> PackageBase::_LoadEPUB3NavTablesFromManifestItem(<a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">PackagePtr</a> sharedPkg, <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> pItem, shared_ptr&lt;xml::Document&gt; doc)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// find each &lt;nav&gt; node</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(doc, {{<span class="stringliteral">&quot;epub&quot;</span>, <a class="code" href="epub3_8h.xhtml#ac70f93b7cfc1e93cecbd597fe5f7939c">ePub3NamespaceURI</a>}, {<span class="stringliteral">&quot;html&quot;</span>, <a class="code" href="epub3_8h.xhtml#a9402cd21033b6adf193f3131401811b3">XHTMLNamespaceURI</a>}}); <span class="comment">// goddamn I love C++11 initializer list constructors</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml#a1bfb05168e27f2e3e6acc241b8932bea" title="A list of namespace prefix to URI pairs.">XPathWrangler::NamespaceList</a> __m;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    __m[<span class="stringliteral">&quot;epub&quot;</span>] = <a class="code" href="epub3_8h.xhtml#ac70f93b7cfc1e93cecbd597fe5f7939c">ePub3NamespaceURI</a>;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(doc, __m);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor"></span>    xpath.NameDefaultNamespace(<span class="stringliteral">&quot;html&quot;</span>);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a> nodes = xpath.Nodes(<span class="stringliteral">&quot;//html:nav&quot;</span>);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="classshared__vector.xhtml">NavigationList</a> tables;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> navNode : nodes)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keyword">auto</span> navTablePtr = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">NavigationTable::New</a>(sharedPkg, pItem-&gt;Href());</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">if</span> (navTablePtr-&gt;ParseXML(navNode))</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            tables.push_back(navTablePtr);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="comment">// now look for any &lt;dl&gt; nodes with an epub:type of &quot;glossary&quot;</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    nodes = xpath.Nodes(<span class="stringliteral">&quot;//html:dl[epub:type=&#39;glossary&#39;]&quot;</span>);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> node : nodes)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keyword">auto</span> glosPtr = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Glossary::New</a>(node, sharedPkg);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        tables.push_back(glosPtr);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">return</span> tables;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<a class="code" href="classshared__vector.xhtml">NavigationList</a> PackageBase::_LoadNCXNavTablesFromManifestItem(<a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">PackagePtr</a> sharedPkg, <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> pItem, shared_ptr&lt;xml::Document&gt; doc)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;{</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="comment">// find each &lt;nav&gt; node</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(doc, { { <span class="stringliteral">&quot;ncx&quot;</span>, <a class="code" href="epub3_8h.xhtml#a99b90f26ad307c8dcbf0deac1074f7e1">NCXNamespaceURI</a>} }); <span class="comment">// goddamn I love C++11 initializer list constructors</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml#a1bfb05168e27f2e3e6acc241b8932bea" title="A list of namespace prefix to URI pairs.">XPathWrangler::NamespaceList</a> __m;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    __m[<span class="stringliteral">&quot;ncx&quot;</span>] = <a class="code" href="epub3_8h.xhtml#a99b90f26ad307c8dcbf0deac1074f7e1">NCXNamespaceURI</a>;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(doc, __m);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="preprocessor"></span>    xpath.NameDefaultNamespace(<span class="stringliteral">&quot;ncx&quot;</span>);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">auto</span> titles = xpath.Strings(<span class="stringliteral">&quot;/ncx:ncx/ncx:docTitle/ncx:text/text()&quot;</span>);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordtype">string</span> title;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">if</span> (!titles.empty())</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        title = titles[0];</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">auto</span> nodes = xpath.Nodes(<span class="stringliteral">&quot;/ncx:ncx/ncx:navMap&quot;</span>);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="classshared__vector.xhtml">NavigationList</a> tables;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">if</span> (!nodes.empty())</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keyword">auto</span> navTablePtr = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">NavigationTable::New</a>(sharedPkg, pItem-&gt;Href());</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">if</span> (navTablePtr-&gt;ParseNCXNavMap(nodes[0], title))</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            tables.push_back(navTablePtr);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="comment">// now look for any &lt;pageList&gt; nodes</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    nodes = xpath.Nodes(<span class="stringliteral">&quot;/ncx:ncx/ncx:pageList&quot;</span>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">if</span> (!nodes.empty())</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">auto</span> navTablePtr = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">NavigationTable::New</a>(sharedPkg, pItem-&gt;Href());</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">if</span> (navTablePtr-&gt;ParseNCXPageList(nodes[0]))</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            tables.push_back(navTablePtr);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="comment">// now any &lt;navList&gt; nodes</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    nodes = xpath.Nodes(<span class="stringliteral">&quot;/ncx:ncx/ncx:navList&quot;</span>);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> node : nodes)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keyword">auto</span> navTablePtr = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">NavigationTable::New</a>(sharedPkg, pItem-&gt;Href());</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordflow">if</span> (navTablePtr-&gt;ParseNCXNavList(node))</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            tables.push_back(navTablePtr);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">return</span> tables;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Package High-Level API</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="code" href="class_package.xhtml#a8609fc00bcffa744017264f80c78582b">  388</a></span>&#160;Package::Package(<span class="keyword">const</span> shared_ptr&lt;Container&gt;&amp; owner, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; type) : <a class="code" href="class_property_holder.xhtml">PropertyHolder</a>(), <a class="code" href="class_owned_by.xhtml">OwnedBy</a>(owner), <a class="code" href="class_package_base.xhtml">PackageBase</a>(owner, type)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div>
<div class="line"><a name="l00391"></a><span class="lineno"><a class="code" href="class_package.xhtml#af28967f20c80657cf7c2f52360b8bf47">  391</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_package.xhtml#af28967f20c80657cf7c2f52360b8bf47">Package::Open</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;{</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="preprocessor">#if _XML_OVERRIDE_SWITCHES</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="preprocessor"></span>    <a class="code" href="namespacexml.xhtml#ac332da21e665434f0d30fdc1cb9986e2">__setupLibXML</a>();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="preprocessor"></span>    <span class="keyword">auto</span> status = <a class="code" href="class_package_base.xhtml#ad28fa875ccfa871bef61d4e490dcb16d">PackageBase::Open</a>(path);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">if</span> (status) {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="comment">// Setup the content filter chain before unpacking the package</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="comment">// to filter its manifest items if needed. For example with</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="comment">// some encrypted EPUB the navigation tables must be decrypted</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="comment">// before being parsed.</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">auto</span> fm = <a class="code" href="class_filter_manager.xhtml#a496bc9f1d8ac7b110fb422f3100e776e">FilterManager::Instance</a>();</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keyword">auto</span> fc = fm-&gt;BuildFilterChainForPackage(shared_from_this());</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <a class="code" href="class_package.xhtml#afe4f7776928b03d761898c5e4439ad79">SetFilterChain</a>(fc);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        status = <a class="code" href="class_package.xhtml#abcba1d4fd374a8ea1fb9bcb75cf6e05e" title="Extracts information from the OPF XML document.">Unpack</a>();</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordflow">if</span> (status)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <a class="code" href="_forward_8h.xhtml#aba379dd8f36491620b949b8683f96b0f">ConstContainerPtr</a> container = <a class="code" href="class_owned_by.xhtml#aa1ad6fa2756bb243bc88b4c26d186739">Owner</a>();</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="comment">//ConstContainerPtr sharedContainer = std::dynamic_pointer_cast&lt;Container&gt;(owner);</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="comment">// See ReadiumJS package_document_parser.js updateMetadataWithIBookProperties()</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="comment">// https://github.com/readium/readium-js/blob/develop/epub-modules/epub/src/models/package_document_parser.js#L91</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="comment">// (vendor metadata takes precedence over OPF, to match rendering expectations with some commercial EPUBs that do not necessarily contains correct OPF metadata)</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="keywordtype">string</span> fxl = container-&gt;GetVendorMetadata_AppleIBooksDisplayOption_FixedLayout();</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keywordflow">if</span> (fxl == <span class="stringliteral">&quot;true&quot;</span>)</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            this-&gt;<a class="code" href="class_property_holder.xhtml#ade84a395de1f0557a3a870ea46340c79">RegisterPrefixIRIStem</a>(<span class="stringliteral">&quot;rendition&quot;</span>, <span class="stringliteral">&quot;http://www.idpf.org/vocab/rendition/#&quot;</span>);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            this-&gt;<a class="code" href="class_property_holder.xhtml#a9cd13a6005f6bff261360c96af0d84c3">RemoveProperty</a>(<span class="stringliteral">&quot;layout&quot;</span>, <span class="stringliteral">&quot;rendition&quot;</span>);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <a class="code" href="_forward_8h.xhtml#aeb5e9ad659c4a6037195a4f1472de281">PropertyHolderPtr</a> holderPtr = CastPtr&lt;PropertyHolder&gt;();</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Property::New</a>(holderPtr);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            prop-&gt;SetPropertyIdentifier(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;layout&quot;</span>, <span class="stringliteral">&quot;rendition&quot;</span>));</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            prop-&gt;SetValue(<span class="stringliteral">&quot;pre-paginated&quot;</span>);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <a class="code" href="class_property_holder.xhtml#a3c6031a4012e0b2af9f240c2e4eeef30">AddProperty</a>(prop);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordtype">string</span> orientation = container-&gt;GetVendorMetadata_AppleIBooksDisplayOption_Orientation();</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordtype">bool</span> landscape = orientation == <span class="stringliteral">&quot;landscape-only&quot;</span>;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keywordtype">bool</span> portrait = !landscape &amp;&amp; orientation == <span class="stringliteral">&quot;portrait-only&quot;</span>;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33a334c4a4c42fdb79d7ebc3e73b517e6f8">none</a> = !landscape &amp;&amp; !portrait &amp;&amp; orientation == <span class="stringliteral">&quot;none&quot;</span>;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">if</span> (landscape || portrait || none)</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            this-&gt;<a class="code" href="class_property_holder.xhtml#ade84a395de1f0557a3a870ea46340c79">RegisterPrefixIRIStem</a>(<span class="stringliteral">&quot;rendition&quot;</span>, <span class="stringliteral">&quot;http://www.idpf.org/vocab/rendition/#&quot;</span>);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            this-&gt;<a class="code" href="class_property_holder.xhtml#a9cd13a6005f6bff261360c96af0d84c3">RemoveProperty</a>(<span class="stringliteral">&quot;orientation&quot;</span>, <span class="stringliteral">&quot;rendition&quot;</span>);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <a class="code" href="_forward_8h.xhtml#aeb5e9ad659c4a6037195a4f1472de281">PropertyHolderPtr</a> holderPtr = CastPtr&lt;PropertyHolder&gt;();</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Property::New</a>(holderPtr);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            prop-&gt;SetPropertyIdentifier(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;orientation&quot;</span>, <span class="stringliteral">&quot;rendition&quot;</span>));</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordtype">string</span> val = landscape?<span class="stringliteral">&quot;landscape&quot;</span>:(portrait?<span class="stringliteral">&quot;portrait&quot;</span>:<span class="stringliteral">&quot;auto&quot;</span>);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            prop-&gt;SetValue(val);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            <a class="code" href="class_property_holder.xhtml#a3c6031a4012e0b2af9f240c2e4eeef30">AddProperty</a>(prop);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="preprocessor">#if _XML_OVERRIDE_SWITCHES</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="preprocessor"></span>    <a class="code" href="namespacexml.xhtml#a9dc4345a71b634571de2734014a3700d">__resetLibXMLOverrides</a>();</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">return</span> status;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;}</div>
<div class="line"><a name="l00457"></a><span class="lineno"><a class="code" href="class_package.xhtml#aaaeee16d16aa8b1b10ec8a3255432d43">  457</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_package.xhtml#aaaeee16d16aa8b1b10ec8a3255432d43">Package::_OpenForTest</a>(shared_ptr&lt;xml::Document&gt; doc, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; basePath)</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;{</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="preprocessor">#if _XML_OVERRIDE_SWITCHES</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor"></span>    <a class="code" href="namespacexml.xhtml#ac332da21e665434f0d30fdc1cb9986e2">__setupLibXML</a>();</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a> = doc;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a> = basePath;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">auto</span> status = <a class="code" href="class_package.xhtml#abcba1d4fd374a8ea1fb9bcb75cf6e05e" title="Extracts information from the OPF XML document.">Unpack</a>();</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="preprocessor">#if _XML_OVERRIDE_SWITCHES</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="preprocessor"></span>    <a class="code" href="namespacexml.xhtml#a9dc4345a71b634571de2734014a3700d">__resetLibXMLOverrides</a>();</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">return</span> status;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno"><a class="code" href="class_package.xhtml#a9d36c15fdef117d5a6649461d0dc85f5">  471</a></span>&#160;unique_ptr&lt;ArchiveReader&gt; <a class="code" href="class_package.xhtml#a9d36c15fdef117d5a6649461d0dc85f5">Package::ReaderForRelativePath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path)<span class="keyword">       const</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package_base.xhtml#aa3e98e134227c3496309840b038ecfc9" title="The archive from which the package was loaded.">_archive</a>-&gt;ReaderAtPath((<a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a> + path).stl_str());</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno"><a class="code" href="class_package.xhtml#abcba1d4fd374a8ea1fb9bcb75cf6e05e">  476</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_package.xhtml#abcba1d4fd374a8ea1fb9bcb75cf6e05e" title="Extracts information from the OPF XML document.">Package::Unpack</a>()</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;{</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">PackagePtr</a> sharedMe = shared_from_this();</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    </div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="comment">// very basic sanity check</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="keyword">auto</span> root = <a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>-&gt;Root();</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordtype">string</span> rootName(root-&gt;Name());</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    rootName.tolower();</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordtype">bool</span> isEPUB3 = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordtype">string</span> versionStr;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordtype">int</span> version = 0;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">if</span> ( rootName != <span class="stringliteral">&quot;package&quot;</span> )</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        HandleError(EPUBError::OPFInvalidPackageDocument);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;       <span class="comment">// not an OPF file, innit?</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    versionStr = _getProp(root, <span class="stringliteral">&quot;version&quot;</span>);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keywordflow">if</span> ( versionStr.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        HandleError(EPUBError::OPFPackageHasNoVersion);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="comment">// GNU libstdc++ seems to not want to let us use these C++11 routines...</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="preprocessor">#ifndef _LIBCPP_VERSION</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="preprocessor"></span>        version = (int)strtol(versionStr.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), <span class="keyword">nullptr</span>, 10);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="preprocessor"></span>        version = std::stoi(versionStr.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>());</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">if</span> (version &lt; 3)</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            isEPUB3 = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keyword">auto</span> val = _getProp(root, <span class="stringliteral">&quot;prefix&quot;</span>, <a class="code" href="epub3_8h.xhtml#ac70f93b7cfc1e93cecbd597fe5f7939c">ePub3NamespaceURI</a>);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="class_package.xhtml#aea0d94ae49dfafe7b6004217a5b921b0" title="Used to handle the prefix attribute of the OPF &lt;package&gt; element.">InstallPrefixesFromAttributeValue</a>(val);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="comment">// go through children to determine the CFI index of the &lt;spine&gt; tag</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keyword">static</span> xml::string kSpineName((<span class="keyword">const</span> <span class="keywordtype">char</span>*)<span class="stringliteral">&quot;spine&quot;</span>);</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">static</span> xml::string kManifestName((<span class="keyword">const</span> <span class="keywordtype">char</span>*)<span class="stringliteral">&quot;manifest&quot;</span>);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">static</span> xml::string kMetadataName((<span class="keyword">const</span> <span class="keywordtype">char</span>*)<span class="stringliteral">&quot;metadata&quot;</span>);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a> = 0;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    uint32_t idx = 0;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">auto</span> child = root-&gt;FirstElementChild();</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">while</span> ( <span class="keywordtype">bool</span>(child) )</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    {</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        idx += 2;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        <span class="keywordflow">if</span> ( child-&gt;Name() == kSpineName )</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        {</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            <a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a> = idx;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">if</span> ( <a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a> != 6 )</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                HandleError(EPUBError::OPFSpineOutOfOrder);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( child-&gt;Name() == kManifestName &amp;&amp; idx != 4 )</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        {</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            HandleError(EPUBError::OPFManifestOutOfOrder);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        }</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( child-&gt;Name() == kMetadataName &amp;&amp; idx != 2 )</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            HandleError(EPUBError::OPFMetadataOutOfOrder);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        }</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        </div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        child = child-&gt;NextElementSibling();</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    }</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    </div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a> == 0 )</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        HandleError(EPUBError::OPFNoSpine);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;       <span class="comment">// spineless!</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    }</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>, {{<span class="stringliteral">&quot;opf&quot;</span>, OPFNamespace}, {<span class="stringliteral">&quot;dc&quot;</span>, DCNamespace}});</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml#a1bfb05168e27f2e3e6acc241b8932bea" title="A list of namespace prefix to URI pairs.">XPathWrangler::NamespaceList</a> __m;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    __m[<span class="stringliteral">&quot;opf&quot;</span>] = OPFNamespace;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    __m[<span class="stringliteral">&quot;dc&quot;</span>] = DCNamespace;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>, __m);</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="comment">// simple things: manifest and spine items</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a> manifestNodes;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a> spineNodes;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    </div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        manifestNodes = xpath.<a class="code" href="class_x_path_wrangler.xhtml#a6ed9664548383d612b3c3b631421bb4c">Nodes</a>(<span class="stringliteral">&quot;/opf:package/opf:manifest/opf:item&quot;</span>);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        spineNodes = xpath.<a class="code" href="class_x_path_wrangler.xhtml#a6ed9664548383d612b3c3b631421bb4c">Nodes</a>(<span class="stringliteral">&quot;/opf:package/opf:spine/opf:itemref&quot;</span>);</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="keywordflow">if</span> ( manifestNodes.empty() )</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        {</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            HandleError(EPUBError::OPFNoManifestItems);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        }</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <span class="keywordflow">if</span> ( spineNodes.empty() )</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        {</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            HandleError(EPUBError::OPFNoSpineItems);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        }</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> node : manifestNodes )</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        {</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            <span class="keyword">auto</span> p = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">ManifestItem::New</a>(sharedMe);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            <span class="keywordflow">if</span> ( p-&gt;ParseXML(node) )</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a>.emplace(p-&gt;Identifier(), p);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                <a class="code" href="class_package_base.xhtml#ac20bbeb21bb83835535db996f13f4463" title="All manifest items, indexed by absolute path.">_manifestByAbsolutePath</a>.emplace(p-&gt;AbsolutePath(), p);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a>[p-&gt;Identifier()] = p;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                <a class="code" href="class_package_base.xhtml#ac20bbeb21bb83835535db996f13f4463" title="All manifest items, indexed by absolute path.">_manifestByAbsolutePath</a>[p-&gt;AbsolutePath()] = p;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package_base.xhtml#a4fca1719dd29d1a2a7a47ba778065249">StoreXMLIdentifiable</a>(p);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            }</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            {</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                <span class="comment">// TODO: Need an error here</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            }</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        }</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="comment">// check fallback chains</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <span class="keyword">typedef</span> std::map&lt;string, bool&gt; IdentSet;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        IdentSet idents;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp;pair : <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a> )</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> item = pair.second;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keywordflow">if</span> ( item-&gt;FallbackID().empty() )</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            </div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            idents[item-&gt;XMLIdentifier()] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            <span class="keywordflow">while</span> ( item != <span class="keyword">nullptr</span> &amp;&amp; !item-&gt;FallbackID().empty() )</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                <span class="keywordflow">if</span> ( idents[item-&gt;FallbackID()] )</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                    HandleError(EPUBError::OPFFallbackChainCircularReference);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                item = item-&gt;Fallback();</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            </div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            idents.clear();</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        }</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        </div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <a class="code" href="_forward_8h.xhtml#a4a609b645909cf169551b143c36443d5">SpineItemPtr</a> cur;</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> node : spineNodes )</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        {</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            <span class="keyword">auto</span> next = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">SpineItem::New</a>(sharedMe);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            <span class="keywordflow">if</span> ( next-&gt;ParseXML(node) == false )</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                <span class="comment">// TODO: need an error code here</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            }</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <span class="comment">// validation of idref</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            <span class="keyword">auto</span> manifestFound = _manifestByID.find(next-&gt;Idref());</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="keywordflow">if</span> ( manifestFound == _manifestByID.end() )</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            {</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                HandleError(EPUBError::OPFInvalidSpineIdref, _Str(next-&gt;Idref(), <span class="stringliteral">&quot; does not correspond to a manifest item&quot;</span>));</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            }</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            <span class="comment">// validation of spine resource type w/fallbacks</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> manifestItem = next-&gt;ManifestItem();</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            <span class="keywordtype">bool</span> isContentDoc = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                <span class="keywordflow">if</span> ( manifestItem-&gt;MediaType() == <span class="stringliteral">&quot;application/xhtml+xml&quot;</span> ||</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                     manifestItem-&gt;MediaType() == <span class="stringliteral">&quot;image/svg&quot;</span> )</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                    isContentDoc = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                }</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                </div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            } <span class="keywordflow">while</span> ( (manifestItem = manifestItem-&gt;Fallback()) );</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            <span class="keywordflow">if</span> ( !isContentDoc )</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                HandleError(EPUBError::OPFFallbackChainHasNoContentDocument);</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            </div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            <a class="code" href="class_package_base.xhtml#a4fca1719dd29d1a2a7a47ba778065249">StoreXMLIdentifiable</a>(next);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            </div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            <span class="keywordflow">if</span> ( cur != <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                cur-&gt;SetNextItem(next);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            }</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            {</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                <a class="code" href="class_package_base.xhtml#afefe51398469aefa97f9be5046ff59f6" title="The first item in the spine (SpineItems are a linked list).">_spine</a> = next;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;            }</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            </div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            cur = next;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        }</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    }</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::system_error&amp; exc)</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    {</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="keywordflow">if</span> ( exc.code().category() == <a class="code" href="error__handler_8cpp.xhtml#a685d49119031505e6561796985dcbfda">epub_spec_category</a>() )</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            <span class="keywordflow">throw</span>;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        </div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    }</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordflow">catch</span> (...)</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    </div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    manifestNodes.clear();</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    spineNodes.clear();</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="comment">// collections</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a> collectionNodes;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    </div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    {</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <a class="code" href="_forward_8h.xhtml#aeb5e9ad659c4a6037195a4f1472de281">PropertyHolderPtr</a> holderPtr = CastPtr&lt;PropertyHolder&gt;();</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        collectionNodes = xpath.<a class="code" href="class_x_path_wrangler.xhtml#a6ed9664548383d612b3c3b631421bb4c">Nodes</a>(<span class="stringliteral">&quot;/opf:package/opf:collection&quot;</span>);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        </div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; node : collectionNodes)</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        {</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            <a class="code" href="_forward_8h.xhtml#a02513868cd3a9b875e08279bb897a7b8">CollectionPtr</a> collection = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Collection::New</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>(), <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            <span class="keywordflow">if</span> (collection-&gt;ParseXML(node))</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package_base.xhtml#a97574709748247ddf65b77305a590f46" title="List of all parsed &lt;collection&gt; elements.">_collections</a>.emplace(collection-&gt;Role(), collection);</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package_base.xhtml#a97574709748247ddf65b77305a590f46" title="List of all parsed &lt;collection&gt; elements.">_collections</a>[collection-&gt;Role()] = collection;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="preprocessor"></span>            }</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        }</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    }</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::system_error&amp; exc)</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    {</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="keywordflow">if</span> (exc.code().category() == <a class="code" href="error__handler_8cpp.xhtml#a685d49119031505e6561796985dcbfda">epub_spec_category</a>())</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            <span class="keywordflow">throw</span>;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keywordflow">catch</span> (...)</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    {</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    }</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    </div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="comment">// now the metadata, which is slightly more involved due to extensions</span></div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a> metadataNodes;</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a> refineNodes;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    </div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    {</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        <a class="code" href="_forward_8h.xhtml#aeb5e9ad659c4a6037195a4f1472de281">PropertyHolderPtr</a> holderPtr = CastPtr&lt;PropertyHolder&gt;();</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        metadataNodes = xpath.<a class="code" href="class_x_path_wrangler.xhtml#a6ed9664548383d612b3c3b631421bb4c">Nodes</a>(<span class="stringliteral">&quot;/opf:package/opf:metadata/*&quot;</span>);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keywordflow">if</span> ( metadataNodes.empty() )</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            HandleError(EPUBError::OPFNoMetadata);</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        </div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        <span class="keywordtype">bool</span> foundIdentifier = <span class="keyword">false</span>, foundTitle = <span class="keyword">false</span>, foundLanguage = <span class="keyword">false</span>, foundModDate = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        <span class="keywordtype">string</span> uniqueIDRef = _getProp(root, <span class="stringliteral">&quot;unique-identifier&quot;</span>);</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="keywordflow">if</span> ( uniqueIDRef.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            HandleError(EPUBError::OPFPackageUniqueIDInvalid);</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        </div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        std::vector&lt;string&gt; uidRefIds = std::vector&lt;string&gt;();</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        </div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> node : metadataNodes )</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        {</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> p;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            </div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            <span class="keyword">auto</span> ns = node-&gt;Namespace();</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            <span class="keywordflow">if</span> ( <span class="keywordtype">bool</span>(ns) &amp;&amp; ns-&gt;URI() == xml::string(DCNamespace) )</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                <span class="comment">// definitely a main node</span></div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                p = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Property::New</a>(holderPtr);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            }</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( _getProp(node, <span class="stringliteral">&quot;name&quot;</span>).size() &gt; 0 )</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            {</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                <span class="comment">// It&#39;s an EPUB 2 property, we save them to allow</span></div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                <span class="comment">// backward compatiblity by host apps.</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                <span class="keywordtype">string</span> name = _getProp(node, <span class="stringliteral">&quot;name&quot;</span>);</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                <span class="keywordtype">string</span> content = _getProp(node, <span class="stringliteral">&quot;content&quot;</span>);</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="preprocessor"></span>                    <a class="code" href="class_package.xhtml#a26b81de7d1c2fb5bc9960a8b375a2f1e" title="A list of EPUB 2 properties for backward compatibility.">_EPUB2Properties</a>.emplace(name, content);</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="preprocessor"></span>                    <a class="code" href="class_package.xhtml#a26b81de7d1c2fb5bc9960a8b375a2f1e" title="A list of EPUB 2 properties for backward compatibility.">_EPUB2Properties</a>[name] = content;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="preprocessor"></span>                <span class="comment">// it&#39;s an ePub2 item-- ignore it</span></div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            }</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( _getProp(node, <span class="stringliteral">&quot;refines&quot;</span>).empty() )</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            {</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                <span class="comment">// not refining anything, so it&#39;s a main node</span></div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                p = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Property::New</a>(holderPtr);</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                <span class="comment">// by elimination it&#39;s refining something-- we&#39;ll process it later when we know we&#39;ve got all the main nodes in there</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                refineNodes.push_back(node);</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            }</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            </div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;ParseMetaElement(node) )</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            {</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                <span class="keywordflow">switch</span> ( p-&gt;Type() )</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                {</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                    <span class="keywordflow">case</span> DCType::Identifier:</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    {</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                        foundIdentifier = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                        uidRefIds.push_back(p-&gt;XMLIdentifier());</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                    }</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                    <span class="keywordflow">case</span> DCType::Title:</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                    {</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                        foundTitle = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                    }</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                    <span class="keywordflow">case</span> DCType::Language:</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                    {</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                        foundLanguage = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                    }</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                    <span class="keywordflow">case</span> DCType::Custom:</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                    {</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                        <span class="keywordflow">if</span> ( p-&gt;PropertyIdentifier() == <a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;modified&quot;</span>, <span class="stringliteral">&quot;dcterms&quot;</span>) )</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                            foundModDate = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                    }</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                        </div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                }</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                </div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                <a class="code" href="class_property_holder.xhtml#a3c6031a4012e0b2af9f240c2e4eeef30">AddProperty</a>(p);</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                <a class="code" href="class_package_base.xhtml#a4fca1719dd29d1a2a7a47ba778065249">StoreXMLIdentifiable</a>(p);</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            }</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        </div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordflow">if</span> ( foundIdentifier &amp;&amp; !uniqueIDRef.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; uidRefIds.size(); i++)</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            {</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">string</span> <span class="keywordtype">id</span> = uidRefIds[i];</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                <span class="keywordflow">if</span> ( uniqueIDRef == <span class="keywordtype">id</span> )</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                {</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                    found = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                }</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            }</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            <span class="keywordflow">if</span> (!found)</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            {</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                HandleError(EPUBError::OPFPackageUniqueIDInvalid);</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            }</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        }</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        </div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="keywordflow">if</span> ( !foundIdentifier )</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            HandleError(EPUBError::OPFMissingIdentifierMetadata);</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keywordflow">if</span> ( !foundTitle )</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            HandleError(EPUBError::OPFMissingTitleMetadata);</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="keywordflow">if</span> ( !foundLanguage )</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            HandleError(EPUBError::OPFMissingLanguageMetadata);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        <span class="keywordflow">if</span> ( !foundModDate &amp;&amp; isEPUB3 )</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;            HandleError(EPUBError::OPFMissingModificationDateMetadata);</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        </div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> node : refineNodes )</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        {</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            <span class="keywordtype">string</span> ident = _getProp(node, <span class="stringliteral">&quot;refines&quot;</span>);</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="keywordflow">if</span> ( ident.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                HandleError(EPUBError::OPFInvalidRefinementAttribute, <span class="stringliteral">&quot;Empty IRI for &#39;refines&#39; attribute&quot;</span>);</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            }</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            </div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <span class="keywordflow">if</span> ( ident[0] == <span class="charliteral">&#39;#&#39;</span> )</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            {</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                ident = ident.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(1);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            }</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                <span class="comment">// validation only right now</span></div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                <a class="code" href="class_i_r_i.xhtml">IRI</a> iri(ident);</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                <span class="keywordflow">if</span> ( iri.<a class="code" href="class_i_r_i.xhtml#aa8667f24a3cf330b373d7a93c120f16d" title="Returns true if the IRI is empty.">IsEmpty</a>() )</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                {</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                    HandleError(EPUBError::OPFInvalidRefinementAttribute, _Str(<span class="stringliteral">&quot;#&quot;</span>, ident, <span class="stringliteral">&quot; is not a valid IRI&quot;</span>));</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                }</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( iri.<a class="code" href="class_i_r_i.xhtml#a923b9e4f9b04c8e8df8275884dc1ddcc" title="Returns true if the IRI is a URL referencing a relative location.">IsRelative</a>() == false )</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                {</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                    HandleError(EPUBError::OPFInvalidRefinementAttribute, _Str(iri.<a class="code" href="class_i_r_i.xhtml#a1407182eb7fe89e5780e8f91ec380ead">IRIString</a>(), <span class="stringliteral">&quot; is not a relative IRI&quot;</span>));</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                }</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            }</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;            </div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            <span class="keyword">auto</span> found = <a class="code" href="class_package_base.xhtml#a23c396ae54926785066441a427fc7a7c" title="Lookup table for all items with XML ID values.">_xmlIDLookup</a>.find(ident);</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            <span class="keywordflow">if</span> ( found == <a class="code" href="class_package_base.xhtml#a23c396ae54926785066441a427fc7a7c" title="Lookup table for all items with XML ID values.">_xmlIDLookup</a>.end() )</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            {</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                HandleError(EPUBError::OPFInvalidRefinementTarget, _Str(<span class="stringliteral">&quot;#&quot;</span>, ident, <span class="stringliteral">&quot; does not reference an item in this document&quot;</span>));</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            }</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            </div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = std::dynamic_pointer_cast&lt;<a class="code" href="class_property.xhtml">Property</a>&gt;(found-&gt;second);</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            <span class="keywordflow">if</span> ( prop )</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            {</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                <span class="comment">// it&#39;s a property, so this is an extension</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extPtr = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">PropertyExtension::New</a>(prop);</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                <span class="keywordflow">if</span> ( extPtr-&gt;ParseMetaElement(node) )</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                    prop-&gt;AddExtension(extPtr);</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            }</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;            {</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                <span class="comment">// not a property, so treat this as a plain property</span></div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                <a class="code" href="_forward_8h.xhtml#aeb5e9ad659c4a6037195a4f1472de281">PropertyHolderPtr</a> ptr = std::dynamic_pointer_cast&lt;<a class="code" href="class_property_holder.xhtml">PropertyHolder</a>&gt;(found-&gt;second);</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                <span class="keywordflow">if</span> ( ptr )</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                {</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                    prop = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Property::New</a>(ptr);</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                    <span class="keywordflow">if</span> ( prop-&gt;ParseMetaElement(node) )</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                        ptr-&gt;AddProperty(prop);</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                }</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            }</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        }</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        </div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        <span class="comment">// now look at the &lt;spine&gt; element for properties</span></div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        <span class="keyword">auto</span> spineNode = root-&gt;FirstElementChild();</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        <span class="keywordflow">for</span> ( uint32_t i = 2; i &lt; <a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a>; i += 2 )</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;            spineNode = spineNode-&gt;NextElementSibling();</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        </div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        <span class="keywordtype">string</span> value = _getProp(spineNode, <span class="stringliteral">&quot;page-progression-direction&quot;</span>);</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        <span class="keywordflow">if</span> ( !value.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;        {</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;            <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">Property::New</a>(holderPtr);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;            prop-&gt;SetPropertyIdentifier(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;page-progression-direction&quot;</span>));</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            prop-&gt;SetValue(value);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;            <a class="code" href="class_property_holder.xhtml#a3c6031a4012e0b2af9f240c2e4eeef30">AddProperty</a>(prop);</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        }</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    }</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keywordflow">catch</span> (std::system_error&amp; exc)</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    {</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;        <span class="keywordflow">if</span> ( exc.code().category() == <a class="code" href="error__handler_8cpp.xhtml#a685d49119031505e6561796985dcbfda">epub_spec_category</a>() )</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            <span class="keywordflow">throw</span>;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keywordflow">catch</span> (...)</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    {</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    }</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    </div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="comment">// now any content type bindings</span></div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">xml::NodeSet</a> bindingNodes;</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    </div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    {</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        bindingNodes = xpath.<a class="code" href="class_x_path_wrangler.xhtml#a6ed9664548383d612b3c3b631421bb4c">Nodes</a>(<span class="stringliteral">&quot;/opf:package/opf:bindings/*&quot;</span>);</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <span class="keywordflow">if</span> ( !bindingNodes.empty() )</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        {</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;            xml::string mediaTypeElementName(MediaTypeElementName);</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            <span class="keywordflow">for</span> ( <span class="keyword">auto</span> node : bindingNodes )</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;            {</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                <span class="keywordflow">if</span> ( node-&gt;Name() != mediaTypeElementName )</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                </div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                <span class="comment">// ePub Publications 3.0 ??3.4.16: The `mediaType` Element</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                </div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                <span class="comment">// The media-type attribute is required.</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                <span class="keywordtype">string</span> mediaType = _getProp(node, <span class="stringliteral">&quot;media-type&quot;</span>);</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                <span class="keywordflow">if</span> ( mediaType.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                {</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                    HandleError(EPUBError::OPFBindingHandlerNoMediaType);</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                    <span class="keywordflow">throw</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                }</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                </div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                <span class="comment">// Each child mediaType of a bindings element must define a unique</span></div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                <span class="comment">// content type in its media-type attribute, and the media type</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                <span class="comment">// specified must not be a Core Media Type.</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                <span class="keywordflow">if</span> ( <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a>[mediaType].empty() == <span class="keyword">false</span> )</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                {</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                    <span class="comment">// user shouldn&#39;t have added manual things yet, but for safety we&#39;ll look anyway</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> ptr : <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a>[mediaType] )</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                    {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                        <span class="keywordflow">if</span> ( <span class="keyword">typeid</span>(*ptr) == <span class="keyword">typeid</span>(<a class="code" href="class_media_handler.xhtml">MediaHandler</a>) )</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                        {</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                            HandleError(EPUBError::OPFMultipleBindingsForMediaType);</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                        }</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                    }</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                }</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                <span class="keywordflow">if</span> ( <a class="code" href="class_property_holder.xhtml#a03a702cec1539d0078cc937d69ef0c77" title="The list of Core Media Types from OPF 3.0 ??5.1.">CoreMediaTypes</a>.find(mediaType) != <a class="code" href="class_property_holder.xhtml#a03a702cec1539d0078cc937d69ef0c77" title="The list of Core Media Types from OPF 3.0 ??5.1.">CoreMediaTypes</a>.end() )</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                {</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                    HandleError(EPUBError::OPFCoreMediaTypeBindingEncountered);</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                }</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                </div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                <span class="comment">// The handler attribute is required</span></div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                <span class="keywordtype">string</span> handlerID = _getProp(node, <span class="stringliteral">&quot;handler&quot;</span>);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                <span class="keywordflow">if</span> ( handlerID.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                {</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                    HandleError(EPUBError::OPFBindingHandlerNotFound);</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                }</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                </div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                <span class="comment">// The required handler attribute must reference the ID [XML] of an</span></div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                <span class="comment">// item in the manifest of the default implementation for this media</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                <span class="comment">// type. The referenced item must be an XHTML Content Document.</span></div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> handlerItem = <a class="code" href="class_package_base.xhtml#a8921b3850c6ea3b561b2804561e67ae6">ManifestItemWithID</a>(handlerID);</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                <span class="keywordflow">if</span> ( !handlerItem )</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                {</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                    HandleError(EPUBError::OPFBindingHandlerNotFound);</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                }</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                <span class="keywordflow">if</span> ( handlerItem-&gt;MediaType() != <span class="stringliteral">&quot;application/xhtml+xml&quot;</span> )</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                {</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                    </div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                    HandleError(EPUBError::OPFBindingHandlerInvalidType, _Str(<span class="stringliteral">&quot;Media handlers must be XHTML content documents, but referenced item has type &#39;&quot;</span>, handlerItem-&gt;MediaType(), <span class="stringliteral">&quot;&#39;.&quot;</span>));</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                }</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                </div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                <span class="comment">// All XHTML Content Documents designated as handlers must have the</span></div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                <span class="comment">// `scripted` property set in their manifest item&#39;s `properties`</span></div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                <span class="comment">// attribute.</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                <span class="keywordflow">if</span> ( handlerItem-&gt;HasProperty(<a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441af005fb261de810579c3d5d92c5f4c21f" title="This item has content which uses JavaScript or HTML5 forms.">ItemProperties::HasScriptedContent</a>) == false )</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                {</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                    HandleError(EPUBError::OPFBindingHandlerNotScripted);</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                }</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                </div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                <span class="comment">// all good-- install it now</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a>[mediaType].push_back(MediaHandler::New&lt;MediaHandler&gt;(sharedMe, mediaType, handlerItem-&gt;AbsolutePath()));</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;            }</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        }</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    }</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp; exc)</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    {</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Exception processing OPF file: &quot;</span> &lt;&lt; exc.what() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        <span class="keywordflow">throw</span>;</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    }</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="keywordflow">catch</span> (...)</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    {</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;    }</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    </div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    <span class="comment">// now the navigation tables</span></div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="keywordflow">if</span> (isEPUB3)</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    {</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        <span class="comment">// look for EPUB3 navigation document(s)</span></div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a> )</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        {</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;            <span class="keywordflow">if</span> ( !item.second-&gt;HasProperty(<a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a4c661962cb9533e8717d8bb51b5ebb16" title="This item is the EPUB 3 navigation document for the publication.">ItemProperties::Navigation</a>) )</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            </div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;            <a class="code" href="classshared__vector.xhtml">NavigationList</a> tables = <a class="code" href="class_package_base.xhtml#a4acb0ded73d51ee3b191078b484cc916" title="Loads navigation tables from a given manifest item (which has the &quot;nav&quot; property) or one referencing ...">NavTablesFromManifestItem</a>(sharedMe, item.second);</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            <span class="keywordflow">for</span> ( <span class="keyword">auto</span>&amp; table : tables )</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            {</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                <span class="comment">// have to dynamic_cast these guys to get the right pointer type</span></div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                <a class="code" href="nav__table_8h.xhtml#a4d433fe1bfc18a2f048c8d310d7a08db">NavigationTablePtr</a> navTable = NavigationTable::CastFrom&lt;NavigationElement&gt;(table);</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>.emplace(navTable-&gt;Type(), navTable);</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>[navTable-&gt;Type()] = navTable;</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="preprocessor"></span>            }</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        }</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    }</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>.empty() || <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>[<span class="stringliteral">&quot;toc&quot;</span>]-&gt;Children().empty())</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    {</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        <span class="comment">// look for EPUB2 NCX file</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="preprocessor"></span>        <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>, { { <span class="stringliteral">&quot;opf&quot;</span>, OPFNamespace } });</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="preprocessor"></span>        <a class="code" href="class_x_path_wrangler.xhtml#a1bfb05168e27f2e3e6acc241b8932bea" title="A list of namespace prefix to URI pairs.">XPathWrangler::NamespaceList</a> __m;</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;        __m[<span class="stringliteral">&quot;opf&quot;</span>] = OPFNamespace;</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>, __m);</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="preprocessor"></span>        <span class="keyword">auto</span> tocNames = xpath.<a class="code" href="class_x_path_wrangler.xhtml#a31f1027104151bf01f40403c2180925e">Strings</a>(<span class="stringliteral">&quot;/opf:package/opf:spine/@toc&quot;</span>);</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        <span class="keywordflow">if</span> (tocNames.empty() &amp;&amp; <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>.empty())</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;        {</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;            <span class="comment">// no NCX, and no other nav document</span></div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;            <span class="comment">// otherwise, we had a valid EPUB3 nav with empty (one-level) TOC</span></div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;            HandleError(EPUBError::OPFNoNavDocument);</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        }</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        {</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;            <span class="keywordflow">if</span> (!tocNames.empty()) {</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                <span class="keywordflow">try</span></div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                {</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                    <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> tocItem = <a class="code" href="class_package_base.xhtml#a8921b3850c6ea3b561b2804561e67ae6">ManifestItemWithID</a>(tocNames[0]);</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                    <span class="keywordflow">if</span> (!<span class="keywordtype">bool</span>(tocItem))</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                        <span class="keywordflow">throw</span> EPUBError::OPFNoNavDocument;</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                    </div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                    <a class="code" href="classshared__vector.xhtml">NavigationList</a> tables = <a class="code" href="class_package_base.xhtml#a4acb0ded73d51ee3b191078b484cc916" title="Loads navigation tables from a given manifest item (which has the &quot;nav&quot; property) or one referencing ...">NavTablesFromManifestItem</a>(sharedMe, tocItem);</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; table : tables)</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                    {</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                        <span class="comment">// have to dynamic_cast these guys to get the right pointer type</span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                        <a class="code" href="nav__table_8h.xhtml#a4d433fe1bfc18a2f048c8d310d7a08db">NavigationTablePtr</a> navTable = NavigationTable::CastFrom&lt;NavigationElement&gt;(table);</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="preprocessor"></span>                        <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>.emplace(navTable-&gt;Type(), navTable);</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="preprocessor"></span>                        <a class="code" href="class_package_base.xhtml#adddfa0eb779e69d728b052c19ad25803" title="All navigation tables, indexed by type.">_navigation</a>[navTable-&gt;Type()] = navTable;</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;<span class="preprocessor"></span>                    }</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                }</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                <span class="keywordflow">catch</span> (std::exception&amp; exc)</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                {</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                    std::cerr &lt;&lt; <span class="stringliteral">&quot;Exception locating or processing NCX navigation document: &quot;</span> &lt;&lt; exc.what() &lt;&lt; std::endl;</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                    <span class="keywordflow">throw</span>;</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                }</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                <span class="keywordflow">catch</span> (<a class="code" href="error__handler_8h.xhtml#ad087c80bece894942f27e5aebd62cb2b">EPUBError</a> errCode)</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                {</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                    <span class="comment">// a &#39;break&#39;-style mechanism here</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                    <span class="comment">// the error handler will determine if it&#39;s safe to continue</span></div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                    HandleError(errCode);</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                }</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                <span class="keywordflow">catch</span> (...)</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                {</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                    HandleError(EPUBError::OPFNoNavDocument);</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;                }</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;            }</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        }</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    }</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="comment">// go through the TOC and copy titles to the relevant spine items for easy access</span></div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <a class="code" href="class_package.xhtml#a0d3ebe28059a8fa9c45c99fbcc5a2db7" title="Assigns titlues to SpineItems based on the contents of the TOC nav table.">CompileSpineItemTitles</a>();</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    </div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <span class="comment">// lastly, let&#39;s set the media support information</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    <a class="code" href="class_package.xhtml#a4e6f43475e115ac22a47f969405d705f">InitMediaSupport</a>();</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <span class="comment">//std::weak_ptr&lt;Package&gt; weakSharedMe = sharedMe; // Not needed: smart shared pointer passed as reference, then onto OwnedBy() which maintains its own weak pointer</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <a class="code" href="class_package_base.xhtml#ab12989b7171d1f1917da119dadd92f89" title="The Media Overlays SMIL model.">_mediaOverlays</a> = std::make_shared&lt;class MediaOverlaysSmilModel&gt;(sharedMe);</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <a class="code" href="class_package_base.xhtml#ab12989b7171d1f1917da119dadd92f89" title="The Media Overlays SMIL model.">_mediaOverlays</a>-&gt;Initialize();</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;}</div>
<div class="line"><a name="l01096"></a><span class="lineno"><a class="code" href="class_package.xhtml#aea0d94ae49dfafe7b6004217a5b921b0"> 1096</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_package.xhtml#aea0d94ae49dfafe7b6004217a5b921b0" title="Used to handle the prefix attribute of the OPF &lt;package&gt; element.">Package::InstallPrefixesFromAttributeValue</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; attrValue)</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;{</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <span class="keywordflow">if</span> ( attrValue.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    </div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <span class="keyword">static</span> REGEX_NS::regex::flag_type reflags(REGEX_NS::regex::ECMAScript|REGEX_NS::regex::optimize);</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="keyword">static</span> REGEX_NS::regex re(<span class="stringliteral">&quot;(\\w+):\\s*(.+?)(?:\\s+|$)&quot;</span>, reflags);</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    <span class="keyword">auto</span> pos = REGEX_NS::sregex_iterator(attrValue.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>().begin(), attrValue.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>().end(), re);</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <span class="keyword">auto</span> end = REGEX_NS::sregex_iterator();</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    </div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    <span class="keywordflow">while</span> ( pos != end )</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    {</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        <span class="keywordflow">if</span> ( pos-&gt;size() == 3 )     <span class="comment">// entire match plus two captures</span></div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        {</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;            <span class="keywordflow">if</span> ( pos-&gt;str(1) == <span class="stringliteral">&quot;_&quot;</span> )</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                HandleError(EPUBError::OPFIllegalPrefixDefinition);</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;            <span class="keywordflow">if</span> ( <a class="code" href="class_property_holder.xhtml#aeeccf437323f9f91ff427c8df6394738">PropertyHolder::ReservedVocabularies</a>.find(pos-&gt;str(1)) != <a class="code" href="class_property_holder.xhtml#aeeccf437323f9f91ff427c8df6394738">PropertyHolder::ReservedVocabularies</a>.end() )</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                HandleError(EPUBError::OPFIllegalPrefixRedeclaration);</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;            <span class="keywordflow">for</span> ( <span class="keyword">auto</span>&amp; pair : <a class="code" href="class_property_holder.xhtml#aeeccf437323f9f91ff427c8df6394738">PropertyHolder::ReservedVocabularies</a> )</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;            {</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                <span class="keywordflow">if</span> ( pair.second == pos-&gt;str(2) )</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                {</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;                    HandleError(EPUBError::OPFIllegalVocabularyIRIRedefinition);</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                }</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;            }</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;            </div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;            <a class="code" href="class_property_holder.xhtml#ade84a395de1f0557a3a870ea46340c79">RegisterPrefixIRIStem</a>(pos-&gt;str(1), pos-&gt;str(2));</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        }</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;        </div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;        ++pos;</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    }</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;}</div>
<div class="line"><a name="l01129"></a><span class="lineno"><a class="code" href="class_package.xhtml#a9976de3f2bdd3d84fdff0a68640e01cc"> 1129</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#a9976de3f2bdd3d84fdff0a68640e01cc" title="The full Unique Identifier, built from the package unique-id and the modification date...">Package::UniqueID</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <span class="keywordtype">string</span> packageID = <a class="code" href="class_package.xhtml#a1d1cc430642a4f397721a703fe8eaf4d" title="The package&#39;s unique-id on its own, without the revision modifier.">PackageID</a>();</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keywordflow">if</span> ( packageID.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    </div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keywordtype">string</span> modDate = <a class="code" href="class_package.xhtml#a95462e599a03d8dee1cc61b99e0d4731">ModificationDate</a>();</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="keywordflow">if</span> ( modDate.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="keywordflow">return</span> packageID;</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    </div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    <span class="keywordflow">return</span> _Str(packageID, <span class="stringliteral">&quot;@&quot;</span>, modDate);</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;}</div>
<div class="line"><a name="l01141"></a><span class="lineno"><a class="code" href="class_package.xhtml#abe3e1e944375760e672f5f12a6a3452c"> 1141</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#abe3e1e944375760e672f5f12a6a3452c" title="A version of the UniqueID which is suitable for use as a hostname.">Package::URLSafeUniqueID</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="keywordtype">string</span> packageID = <a class="code" href="class_package.xhtml#a1d1cc430642a4f397721a703fe8eaf4d" title="The package&#39;s unique-id on its own, without the revision modifier.">PackageID</a>();</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <span class="keywordflow">if</span> ( packageID.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    </div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    <span class="keywordtype">string</span> modDate = <a class="code" href="class_package.xhtml#a95462e599a03d8dee1cc61b99e0d4731">ModificationDate</a>();</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    <span class="keywordflow">if</span> ( modDate.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;        <span class="keywordflow">return</span> packageID;</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    </div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    <span class="comment">// only include the first ten characters of the modification date (the date part)</span></div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    modDate = modDate.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(0, 10);</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    </div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="comment">// trim the uniqueID if necessary to get the whole thing below 256 characters in length</span></div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> maxLen = 255, totalLen = packageID.<a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() + 1 + modDate.<a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <span class="keywordflow">if</span> ( totalLen &gt; maxLen )</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    {</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> diff = totalLen - maxLen;</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;        packageID = packageID.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(0, packageID.<a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() - diff);</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    }</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    </div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <span class="keywordflow">return</span> _Str(packageID, <span class="charliteral">&#39;_&#39;</span>, modDate);</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;}</div>
<div class="line"><a name="l01164"></a><span class="lineno"><a class="code" href="class_package.xhtml#a1d1cc430642a4f397721a703fe8eaf4d"> 1164</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#a1d1cc430642a4f397721a703fe8eaf4d" title="The package&#39;s unique-id on its own, without the revision modifier.">Package::PackageID</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>, {{<span class="stringliteral">&quot;opf&quot;</span>, OPFNamespace}, {<span class="stringliteral">&quot;dc&quot;</span>, DCNamespace}});</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml#a1bfb05168e27f2e3e6acc241b8932bea" title="A list of namespace prefix to URI pairs.">XPathWrangler::NamespaceList</a> __m;</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    __m[<span class="stringliteral">&quot;opf&quot;</span>] = OPFNamespace;</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    __m[<span class="stringliteral">&quot;dc&quot;</span>] = DCNamespace;</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <a class="code" href="class_x_path_wrangler.xhtml">XPathWrangler</a> xpath(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>, __m);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;<span class="preprocessor"></span>    <a class="code" href="class_x_path_wrangler.xhtml#a4d3e8b90a5d26317323f82c191a4d8e7" title="A list of strings.">XPathWrangler::StringList</a> strings = xpath.<a class="code" href="class_x_path_wrangler.xhtml#a31f1027104151bf01f40403c2180925e">Strings</a>(<span class="stringliteral">&quot;//*[@id=/opf:package/@unique-identifier]/text()&quot;</span>);</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    <span class="keywordflow">if</span> ( strings.empty() )</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="keywordflow">return</span> strings[0];</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;}</div>
<div class="line"><a name="l01179"></a><span class="lineno"><a class="code" href="class_package.xhtml#a13653a9e6d94196a4d462f3f4a3137a7"> 1179</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#a13653a9e6d94196a4d462f3f4a3137a7" title="OPF version of this package document.">Package::Version</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="keywordflow">return</span> _getProp(<a class="code" href="class_package_base.xhtml#a8340fab117545b98e0082ce6c82f3cc8" title="The XML document representing the package.">_opf</a>-&gt;Root(), <span class="stringliteral">&quot;version&quot;</span>);</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;}</div>
<div class="line"><a name="l01183"></a><span class="lineno"><a class="code" href="class_package.xhtml#a12893f15861d21be44e66c8e22f80530"> 1183</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_package.xhtml#a12893f15861d21be44e66c8e22f80530">Package::FireLoadEvent</a>(<span class="keyword">const</span> <a class="code" href="class_i_r_i.xhtml">IRI</a> &amp;url)<span class="keyword"> const</span></div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_package.xhtml#ae68171c0f8952733ddb709f6ba75bef3" title="The current handler for load events.">_loadEventHandler</a> == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;        <span class="keywordflow">throw</span> std::runtime_error(_Str(<span class="stringliteral">&quot;No load event handler installed to load &#39;&quot;</span>, url.<a class="code" href="class_i_r_i.xhtml#a2698ea7751b5dc4bbec3b1902f7b0741">URIString</a>(), <span class="stringliteral">&quot;&#39;&quot;</span>));</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    </div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="keywordflow">if</span> ( url.<a class="code" href="class_i_r_i.xhtml#a72ef3cdac74e591d5ebfb75f2f0853a4">Path</a>().<a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(<a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a>) == 0 )</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    {</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        <a class="code" href="class_package.xhtml#ae68171c0f8952733ddb709f6ba75bef3" title="The current handler for load events.">_loadEventHandler</a>(url);</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    }</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    </div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> fixed(<a class="code" href="class_i_r_i.xhtml#a86a6e23ff6d1b40a2ddece72c05d0fbb" title="The IRI scheme used to refer to EPUB 3 documents.">IRI::gEPUBScheme</a>, <a class="code" href="class_package.xhtml#a9976de3f2bdd3d84fdff0a68640e01cc" title="The full Unique Identifier, built from the package unique-id and the modification date...">UniqueID</a>(), <a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a>, url.<a class="code" href="class_i_r_i.xhtml#ab488f403e95933e2572549304fa4200b" title="Retrieves the query portion of a URL IRI, if any.">Query</a>(), url.<a class="code" href="class_i_r_i.xhtml#a76913516cf7fa53447186fd8d1bba665" title="Retrieves any fragment part of a URL IRI.">Fragment</a>());</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    fixed.<a class="code" href="class_i_r_i.xhtml#afbc2ba436874c474145f45a4780bf9ac">AddPathComponent</a>(url.<a class="code" href="class_i_r_i.xhtml#a72ef3cdac74e591d5ebfb75f2f0853a4">Path</a>());</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <a class="code" href="class_i_r_i.xhtml#a5c7bf57e68630daef2e7ad5d691974e5" title="A type encapsulating an account and shared-secret pair, such as username and password.">IRI::IRICredentials</a> creds(url.<a class="code" href="class_i_r_i.xhtml#a62b4db724c4b1c1b5a43e7413aa71819" title="Retrieves any credentials attached to an IRI.">Credentials</a>());</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    fixed.SetCredentials(creds.first, creds.second);</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    </div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <a class="code" href="class_package.xhtml#ae68171c0f8952733ddb709f6ba75bef3" title="The current handler for load events.">_loadEventHandler</a>(fixed);</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;}</div>
<div class="line"><a name="l01201"></a><span class="lineno"><a class="code" href="class_package.xhtml#a69d8d5e459bc1ca0fdb2a21478b3576e"> 1201</a></span>&#160;shared_ptr&lt;SpineItem&gt; <a class="code" href="class_package.xhtml#a69d8d5e459bc1ca0fdb2a21478b3576e">Package::SpineItemWithIDRef</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;idref)<span class="keyword"> const</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item = <a class="code" href="class_package_base.xhtml#a65ad10fec002f261e38716b99a48bffc">FirstSpineItem</a>(); item != <span class="keyword">nullptr</span>; item = item-&gt;Next() )</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    {</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        <span class="keywordflow">if</span> ( item-&gt;Idref() == idref )</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;            <span class="keywordflow">return</span> item;</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    }</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    </div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;}</div>
<div class="line"><a name="l01211"></a><span class="lineno"><a class="code" href="class_package.xhtml#a81261c7e3080a11a4852bbe79988752c"> 1211</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_c_f_i.xhtml">CFI</a> <a class="code" href="class_package.xhtml#a81261c7e3080a11a4852bbe79988752c">Package::CFIForManifestItem</a>(shared_ptr&lt;ManifestItem&gt; item)<span class="keyword"> const</span></div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    <a class="code" href="class_c_f_i.xhtml">CFI</a> result;</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    result.<a class="code" href="class_c_f_i.xhtml#a38df213f93f02fe017f296fa943d41ad" title="The CFI&#39;s discrete components.">_components</a>.emplace_back(<a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a>);</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    result.<a class="code" href="class_c_f_i.xhtml#a38df213f93f02fe017f296fa943d41ad" title="The CFI&#39;s discrete components.">_components</a>.emplace_back(_Str((<a class="code" href="class_package_base.xhtml#a7b8f0f66d10c22a4d58703d8a1d22f98">IndexOfSpineItemWithIDRef</a>(item-&gt;Identifier())+1)*2, <span class="stringliteral">&quot;[&quot;</span>, item-&gt;Identifier(), <span class="stringliteral">&quot;]!&quot;</span>));</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;}</div>
<div class="line"><a name="l01218"></a><span class="lineno"><a class="code" href="class_package.xhtml#a332e0c00edee29b1f05fc7ad251a0635"> 1218</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_c_f_i.xhtml">CFI</a> <a class="code" href="class_package.xhtml#a332e0c00edee29b1f05fc7ad251a0635">Package::CFIForSpineItem</a>(shared_ptr&lt;SpineItem&gt; item)<span class="keyword"> const</span></div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    <a class="code" href="class_c_f_i.xhtml">CFI</a> result;</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    result.<a class="code" href="class_c_f_i.xhtml#a38df213f93f02fe017f296fa943d41ad" title="The CFI&#39;s discrete components.">_components</a>.emplace_back(<a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a>);</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    result.<a class="code" href="class_c_f_i.xhtml#a38df213f93f02fe017f296fa943d41ad" title="The CFI&#39;s discrete components.">_components</a>.emplace_back(_Str((item-&gt;Index()+1)*2, <span class="stringliteral">&quot;[&quot;</span>, item-&gt;Idref(), <span class="stringliteral">&quot;]!&quot;</span>));</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;}</div>
<div class="line"><a name="l01225"></a><span class="lineno"><a class="code" href="class_package.xhtml#a2aed31d1a81b6c62d9e91e7535fc60e8"> 1225</a></span>&#160;shared_ptr&lt;ManifestItem&gt; <a class="code" href="class_package.xhtml#a2aed31d1a81b6c62d9e91e7535fc60e8">Package::ManifestItemForCFI</a>(ePub3::CFI &amp;cfi, <a class="code" href="class_c_f_i.xhtml">CFI</a>* pRemainingCFI)<span class="keyword"> const</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> result;</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    </div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    <span class="comment">// NB: Package is a friend of CFI, so it can access the components directly</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <span class="keywordflow">if</span> ( cfi._components.size() &lt; 2 )</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    {</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;        HandleError(EPUBError::CFITooShort, <span class="stringliteral">&quot;CFI contains less than 2 nodes, so is invalid for package-based lookups.&quot;</span>);</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    }</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    </div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    <span class="comment">// first item directs us to the Spine: check the index against the one we know</span></div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="keyword">auto</span> component = cfi._components[0];</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <span class="keywordflow">if</span> ( component.nodeIndex != <a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a> )</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    {</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;        HandleError(EPUBError::CFIInvalidSpineLocation, _Str(<span class="stringliteral">&quot;CFI first node index (spine) is &quot;</span>, component.nodeIndex, <span class="stringliteral">&quot; but should be &quot;</span>, <a class="code" href="class_package_base.xhtml#a30d3845363ce40b976846487394a307a" title="The CFI index for the &lt;spine&gt; element in the package document.">_spineCFIIndex</a>));</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;        </div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        <span class="comment">// fix it ?</span></div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        <span class="comment">//component.nodeIndex = _spineCFIIndex;</span></div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    }</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    </div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="comment">// second component is the particular spine item</span></div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    component = cfi._components[1];</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="keywordflow">if</span> ( !component.IsIndirector() )</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    {</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        HandleError(EPUBError::CFIUnexpectedComponent, <span class="stringliteral">&quot;Package-based CFI&#39;s second item must be an indirector&quot;</span>);</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    }</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    </div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    {</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        <span class="keywordflow">if</span> ( (component.nodeIndex &amp; 1) == 1 )</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="class_c_f_i_1_1_invalid_c_f_i.xhtml" title="The exception thrown when an invalid CFI string is encountered.">CFI::InvalidCFI</a>(<span class="stringliteral">&quot;CFI spine item index is odd, which makes no sense for always-empty spine nodes.&quot;</span>);</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        <a class="code" href="_forward_8h.xhtml#a4a609b645909cf169551b143c36443d5">SpineItemPtr</a> item = <a class="code" href="class_package_base.xhtml#afefe51398469aefa97f9be5046ff59f6" title="The first item in the spine (SpineItems are a linked list).">_spine</a>-&gt;at((component.nodeIndex&gt;&gt;1)-1);</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        </div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        <span class="comment">// check and correct any qualifiers</span></div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;        item = <a class="code" href="class_package_base.xhtml#af4431810dd257fa77c0678181ed0d79d">ConfirmOrCorrectSpineItemQualifier</a>(item, &amp;component);</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        <span class="keywordflow">if</span> ( item == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;        {</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;            HandleError(EPUBError::CFIIndirectionTargetMissing, <span class="stringliteral">&quot;CFI spine node qualifier doesn&#39;t match any spine item idref&quot;</span>);</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        }</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        </div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        <span class="comment">// we know it&#39;s not null, because SpineItem::at() throws an exception if out of range</span></div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        result = <a class="code" href="class_package_base.xhtml#a8921b3850c6ea3b561b2804561e67ae6">ManifestItemWithID</a>(item-&gt;Idref());</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;        </div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;        <span class="keywordflow">if</span> ( pRemainingCFI != <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;            pRemainingCFI-&gt;<a class="code" href="class_c_f_i.xhtml#ace826a7bbe57824f64513f009a92f66c" title="Assigns a new value to a CFI by copying.">Assign</a>(cfi, 2);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    }</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <span class="keywordflow">catch</span> (std::out_of_range&amp; e)</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    {</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;        HandleError(EPUBError::CFIStepOutOfBounds, _Str(<span class="stringliteral">&quot;CFI references out-of-range spine item: &quot;</span>, e.what()));</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    }</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    </div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;}</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;</div>
<div class="line"><a name="l01282"></a><span class="lineno"><a class="code" href="class_package.xhtml#abd68385ec6fe0a93a87c846d1fcd30ab"> 1282</a></span>&#160;unique_ptr&lt;ByteStream&gt; <a class="code" href="class_package.xhtml#abd68385ec6fe0a93a87c846d1fcd30ab">Package::ReadStreamForRelativePath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;path)<span class="keyword"> const</span></div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <span class="keywordtype">string</span> absPath = <a class="code" href="class_package_base.xhtml#a3f81d59cbc25aedca7dfc15c5575a943" title="The base path of the document within the archive.">_pathBase</a> + (path[0] == <span class="charliteral">&#39;/&#39;</span> ? path.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(1) : path);</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <span class="comment">//_Str(_pathBase, path.stl_str())</span></div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package_base.xhtml#aa3e98e134227c3496309840b038ecfc9" title="The archive from which the package was loaded.">_archive</a>-&gt;ByteStreamAtPath(absPath);</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;}</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="preprocessor">#ifdef SUPPORT_ASYNC</span></div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;<span class="preprocessor"></span>shared_ptr&lt;AsyncByteStream&gt; Package::ContentStreamForItem(<a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> manifestItem)<span class="keyword"> const</span></div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package.xhtml#ab25bd1a1368b9878cca87f385a04381e" title="The filter chain for this package.">_filterChain</a>-&gt;GetFilteredOutputStreamForManifestItem(manifestItem);</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;}</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_ASYNC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01296"></a><span class="lineno"><a class="code" href="class_package.xhtml#a13cf73e049513a7bbac34d1cad2ae968"> 1296</a></span>&#160;shared_ptr&lt;ByteStream&gt; <a class="code" href="class_package.xhtml#aa3e50bd62bf2192053aef7cf18006ba6">Package::GetFilterChainByteStream</a>(<a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> manifestItem)<span class="keyword"> const</span></div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package.xhtml#ab25bd1a1368b9878cca87f385a04381e" title="The filter chain for this package.">_filterChain</a>-&gt;GetFilterChainByteStream(manifestItem);</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;}</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;</div>
<div class="line"><a name="l01301"></a><span class="lineno"><a class="code" href="class_package.xhtml#ab9540326460125d4c13ffe0d7a081c58"> 1301</a></span>&#160;unique_ptr&lt;ByteStream&gt; <a class="code" href="class_package.xhtml#aa3e50bd62bf2192053aef7cf18006ba6">Package::GetFilterChainByteStream</a>(<a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> manifestItem, <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a> *rawInput)<span class="keyword"> const</span></div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package.xhtml#ab25bd1a1368b9878cca87f385a04381e" title="The filter chain for this package.">_filterChain</a>-&gt;GetFilterChainByteStream(manifestItem, rawInput);</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;}</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;</div>
<div class="line"><a name="l01306"></a><span class="lineno"><a class="code" href="class_package.xhtml#a67db1dd1afdec876a29e84873665f41b"> 1306</a></span>&#160;shared_ptr&lt;ByteStream&gt; <a class="code" href="class_package.xhtml#a1c799df5f9b13f7b27449a4b03e94cf1">Package::GetFilterChainByteStreamRange</a>(<a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> manifestItem)<span class="keyword"> const</span></div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package.xhtml#ab25bd1a1368b9878cca87f385a04381e" title="The filter chain for this package.">_filterChain</a>-&gt;GetFilterChainByteStreamRange(manifestItem);</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;}</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;</div>
<div class="line"><a name="l01311"></a><span class="lineno"><a class="code" href="class_package.xhtml#aa9ae9aedcad659ca2f8b75ff58008d4d"> 1311</a></span>&#160;unique_ptr&lt;ByteStream&gt; <a class="code" href="class_package.xhtml#a1c799df5f9b13f7b27449a4b03e94cf1">Package::GetFilterChainByteStreamRange</a>(<a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> manifestItem, <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a> *rawInput)<span class="keyword"> const</span></div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package.xhtml#ab25bd1a1368b9878cca87f385a04381e" title="The filter chain for this package.">_filterChain</a>-&gt;GetFilterChainByteStreamRange(manifestItem, rawInput);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;}</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div>
<div class="line"><a name="l01316"></a><span class="lineno"><a class="code" href="class_package.xhtml#a3168541ca1c0ef03af20ce7bcf670239"> 1316</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="class_package.xhtml#a3168541ca1c0ef03af20ce7bcf670239">Package::GetFilterChainSize</a>(<a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ManifestItemPtr</a> manifestItem)<span class="keyword"> const</span></div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_package.xhtml#ab25bd1a1368b9878cca87f385a04381e" title="The filter chain for this package.">_filterChain</a>-&gt;GetFilterChainSize(manifestItem);</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;}</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;</div>
<div class="line"><a name="l01321"></a><span class="lineno"><a class="code" href="class_package.xhtml#aff688eb9009c88ce8a8ee404e82c736b"> 1321</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#aff688eb9009c88ce8a8ee404e82c736b">Package::Title</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> titleTypeIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;title-type&quot;</span>));      <span class="comment">// http://idpf.org/epub/vocab/package/#title-type</span></div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    </div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    <span class="comment">// find the main one</span></div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span>&amp; item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(titleTypeIRI) )</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    {</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extension = item-&gt;ExtensionWithIdentifier(titleTypeIRI);</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        <span class="keywordflow">if</span> ( extension == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        </div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;        <span class="keywordflow">if</span> ( extension-&gt;Value() == <span class="stringliteral">&quot;main&quot;</span> )</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;            <span class="keywordflow">return</span> (localized? item-&gt;LocalizedValue() : item-&gt;Value());</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    }</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    </div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <span class="comment">// no &#39;main title&#39; found: just get the dc:title value</span></div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    <span class="keyword">auto</span> items = <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Title);</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    <span class="keywordflow">if</span> ( items.empty() )</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    </div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <span class="keywordflow">if</span> ( localized )</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;        <span class="keywordflow">return</span> items[0]-&gt;LocalizedValue();</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    </div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <span class="keywordflow">return</span> items[0]-&gt;Value();</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;}</div>
<div class="line"><a name="l01346"></a><span class="lineno"><a class="code" href="class_package.xhtml#ad7e1d010585f087ce97ad7599523b247"> 1346</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#ad7e1d010585f087ce97ad7599523b247">Package::Subtitle</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> titleTypeIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;title-type&quot;</span>));      <span class="comment">// http://idpf.org/epub/vocab/package/#title-type</span></div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    </div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <span class="comment">// find the main one</span></div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(titleTypeIRI) )</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    {</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;        <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extension = item-&gt;ExtensionWithIdentifier(titleTypeIRI);</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;        <span class="keywordflow">if</span> ( extension == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        </div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;        <span class="keywordflow">if</span> ( extension-&gt;Value() == <span class="stringliteral">&quot;subtitle&quot;</span> )</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;        {</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;            <span class="keywordflow">if</span> ( localized )</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                <span class="keywordflow">return</span> item-&gt;LocalizedValue();</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;            <span class="keywordflow">return</span> item-&gt;Value();</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        }</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    }</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    </div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    <span class="comment">// no &#39;subtitle&#39; found, so no subtitle</span></div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;}</div>
<div class="line"><a name="l01368"></a><span class="lineno"><a class="code" href="class_package.xhtml#aad379f0f12e9c836cc7e6a8e4db8d32c"> 1368</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#aad379f0f12e9c836cc7e6a8e4db8d32c">Package::ShortTitle</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> titleTypeIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;title-type&quot;</span>));      <span class="comment">// http://idpf.org/epub/vocab/package/#title-type</span></div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    </div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <span class="comment">// find the main one</span></div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(titleTypeIRI) )</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    {</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;        <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extension = item-&gt;ExtensionWithIdentifier(titleTypeIRI);</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;        <span class="keywordflow">if</span> ( extension == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        </div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;        <span class="keywordflow">if</span> ( extension-&gt;Value() == <span class="stringliteral">&quot;short&quot;</span> )</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        {</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;            <span class="keywordflow">if</span> ( localized )</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                <span class="keywordflow">return</span> item-&gt;LocalizedValue();</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;            <span class="keywordflow">return</span> item-&gt;Value();</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;        }</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    }</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    </div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <span class="comment">// no &#39;subtitle&#39; found, so no subtitle</span></div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;}</div>
<div class="line"><a name="l01390"></a><span class="lineno"><a class="code" href="class_package.xhtml#a8ff513e9532408d9175621ecb5d16a04"> 1390</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#a8ff513e9532408d9175621ecb5d16a04">Package::CollectionTitle</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> titleTypeIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;title-type&quot;</span>));      <span class="comment">// http://idpf.org/epub/vocab/package/#title-type</span></div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    </div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    <span class="comment">// find the main one</span></div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(titleTypeIRI) )</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    {</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;        <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extension = item-&gt;ExtensionWithIdentifier(titleTypeIRI);</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;        <span class="keywordflow">if</span> ( extension == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;        </div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        <span class="keywordflow">if</span> ( extension-&gt;Value() == <span class="stringliteral">&quot;collection&quot;</span> )</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        {</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;            <span class="keywordflow">if</span> ( localized )</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                <span class="keywordflow">return</span> item-&gt;LocalizedValue();</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;            <span class="keywordflow">return</span> item-&gt;Value();</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        }</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    }</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    </div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <span class="comment">// no &#39;subtitle&#39; found, so no subtitle</span></div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;}</div>
<div class="line"><a name="l01412"></a><span class="lineno"><a class="code" href="class_package.xhtml#ab74b2bb0b4e4e679ceead0eaebbc9859"> 1412</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#ab74b2bb0b4e4e679ceead0eaebbc9859">Package::EditionTitle</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> titleTypeIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;title-type&quot;</span>));      <span class="comment">// http://idpf.org/epub/vocab/package/#title-type</span></div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    </div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    <span class="comment">// find the main one</span></div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(titleTypeIRI) )</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    {</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;        <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extension = item-&gt;ExtensionWithIdentifier(titleTypeIRI);</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;        <span class="keywordflow">if</span> ( extension == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        </div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;        <span class="keywordflow">if</span> ( extension-&gt;Value() == <span class="stringliteral">&quot;edition&quot;</span> )</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;        {</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;            <span class="keywordflow">if</span> ( localized )</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;                <span class="keywordflow">return</span> item-&gt;LocalizedValue();</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;            <span class="keywordflow">return</span> item-&gt;Value();</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;        }</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    }</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    </div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    <span class="comment">// no &#39;subtitle&#39; found, so no subtitle</span></div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;}</div>
<div class="line"><a name="l01434"></a><span class="lineno"><a class="code" href="class_package.xhtml#a009281325ac8a04766e4f649ca55fca5"> 1434</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#a009281325ac8a04766e4f649ca55fca5">Package::ExpandedTitle</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> titleTypeIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;title-type&quot;</span>));      <span class="comment">// http://idpf.org/epub/vocab/package/#title-type</span></div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    </div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    <span class="comment">// find the main one</span></div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(titleTypeIRI) )</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    {</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extension = item-&gt;ExtensionWithIdentifier(titleTypeIRI);</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;        <span class="keywordflow">if</span> ( extension == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;        </div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;        <span class="keywordflow">if</span> ( extension-&gt;Value() == <span class="stringliteral">&quot;expanded&quot;</span> )</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;        {</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;            <span class="keywordflow">if</span> ( localized )</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                <span class="keywordflow">return</span> item-&gt;LocalizedValue();</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;            <span class="keywordflow">return</span> item-&gt;Value();</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;        }</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    }</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    </div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    <span class="comment">// no &#39;subtitle&#39; found, so no subtitle</span></div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;}</div>
<div class="line"><a name="l01456"></a><span class="lineno"><a class="code" href="class_package.xhtml#a3a7e9a2754bd824dee75f7a6c71bd603"> 1456</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#a3a7e9a2754bd824dee75f7a6c71bd603">Package::FullTitle</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="keywordtype">string</span> expanded = <a class="code" href="class_package.xhtml#a009281325ac8a04766e4f649ca55fca5">ExpandedTitle</a>(localized);</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <span class="keywordflow">if</span> ( !expanded.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;        <span class="keywordflow">return</span> expanded;</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    </div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    <span class="keyword">auto</span> items = <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Title);</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    <span class="keywordflow">if</span> ( items.size() == 1 )</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        <span class="keywordflow">return</span> items[0]-&gt;Value();</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    </div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> displaySeqIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;display-seq&quot;</span>));  <span class="comment">// http://idpf.org/epub/vocab/package/#display-seq</span></div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    std::vector&lt;string&gt; titles(items.size());</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    </div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    <span class="keyword">auto</span> sequencedItems = <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(displaySeqIRI);</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <span class="keywordflow">if</span> ( !sequencedItems.empty() )</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    {</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;        <span class="comment">// all these have a 1-based sequence number</span></div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : sequencedItems )</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        {</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;            <a class="code" href="_forward_8h.xhtml#ac09b1819453747797d0cbe9ce72562b7">PropertyExtensionPtr</a> extension = item-&gt;ExtensionWithIdentifier(displaySeqIRI);</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;            <span class="keywordtype">size_t</span> sz = strtoul(extension-&gt;Value().c_str(), <span class="keyword">nullptr</span>, 10) - 1;</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;            titles[sz] = (localized ? item-&gt;LocalizedValue() : item-&gt;Value());</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        }</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    }</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    {</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;        titles.clear();</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;        </div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;        <span class="comment">// insert any non-sequenced items at the head of the list, in order</span></div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : items )</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        {</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;            titles.emplace_back((localized ? item-&gt;LocalizedValue() : item-&gt;Value()));</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        }</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    }</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    </div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    <span class="comment">// put them all together now</span></div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    <span class="keyword">auto</span> pos = titles.begin();</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    </div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <span class="comment">// TODO: this ought to be localized based on the value of Language().</span></div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    std::stringstream ss;</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    ss &lt;&lt; *(pos++) &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; *(pos++);</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    <span class="keywordflow">while</span> ( pos != titles.end() )</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    {</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; *(pos++);</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    }</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    </div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(ss.str());</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;}</div>
<div class="line"><a name="l01504"></a><span class="lineno"><a class="code" href="class_package.xhtml#ae6704d28b118601baac4914f6cd7570b"> 1504</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">Package::AttributionList</a> <a class="code" href="class_package.xhtml#ae6704d28b118601baac4914f6cd7570b">Package::AuthorNames</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">AttributionList</a> result;</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Creator) )</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    {</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;        result.emplace_back((localized? item-&gt;LocalizedValue() : item-&gt;Value()));</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    }</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    </div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keywordflow">if</span> ( result.empty() )</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    {</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;        <span class="comment">// maybe they&#39;re using dcterms:creator instead?</span></div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;creator&quot;</span>, <span class="stringliteral">&quot;dcterms&quot;</span>)) )</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;        {</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;            result.emplace_back((localized? item-&gt;LocalizedValue() : item-&gt;Value()));</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;        }</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    }</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    </div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;}</div>
<div class="line"><a name="l01523"></a><span class="lineno"><a class="code" href="class_package.xhtml#a0fbeae37a1358c879c6a40a6353ecc6d"> 1523</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">Package::AttributionList</a> <a class="code" href="class_package.xhtml#a0fbeae37a1358c879c6a40a6353ecc6d">Package::AttributionNames</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">AttributionList</a> result;</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <a class="code" href="class_i_r_i.xhtml">IRI</a> fileAsIRI(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;file-as&quot;</span>));</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Creator) )</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    {</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;        <span class="keyword">auto</span> extension = item-&gt;ExtensionWithIdentifier(fileAsIRI);</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        <span class="keywordflow">if</span> ( extension )</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;            result.emplace_back(extension-&gt;Value());</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;            result.emplace_back((localized? item-&gt;LocalizedValue() : item-&gt;Value()));</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    }</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;}</div>
<div class="line"><a name="l01537"></a><span class="lineno"><a class="code" href="class_package.xhtml#a2dbc3d3421730e7fbf96ee92cc19d404"> 1537</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#a2dbc3d3421730e7fbf96ee92cc19d404">Package::Authors</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    <span class="comment">// TODO: handle localization of the word &#39;and&#39;</span></div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">AttributionList</a> authors = <a class="code" href="class_package.xhtml#ae6704d28b118601baac4914f6cd7570b">AuthorNames</a>(localized);</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <span class="keywordflow">if</span> ( authors.empty() )</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    <span class="keywordflow">if</span> ( authors.size() == 1 )</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        <span class="keywordflow">return</span> authors[0];</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( authors.size() == 2 )</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;        <span class="keywordflow">return</span> _Str(authors[0], <span class="stringliteral">&quot; and &quot;</span>, authors[1]);</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    </div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    std::stringstream ss;</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    <span class="keyword">auto</span> pos = authors.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keyword">auto</span> last = pos + (authors.size() - 1);</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;    <span class="keywordflow">while</span> ( pos != last )</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    {</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;        ss &lt;&lt; *(pos++) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    }</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    </div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;and &quot;</span> &lt;&lt; *last;</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(ss.str());</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;}</div>
<div class="line"><a name="l01559"></a><span class="lineno"><a class="code" href="class_package.xhtml#acb59ccfbccc2db205252e3606ee8aa3d"> 1559</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">Package::AttributionList</a> <a class="code" href="class_package.xhtml#acb59ccfbccc2db205252e3606ee8aa3d">Package::ContributorNames</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">AttributionList</a> result;</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;contributor&quot;</span>, <span class="stringliteral">&quot;dcterms&quot;</span>)) )</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;    {</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;        result.emplace_back((localized? item-&gt;LocalizedValue() : item-&gt;Value()));</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;    }</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;}</div>
<div class="line"><a name="l01568"></a><span class="lineno"><a class="code" href="class_package.xhtml#a302b437f32afe6fd684e95883bcf3ee2"> 1568</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#a302b437f32afe6fd684e95883bcf3ee2">Package::Contributors</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <span class="comment">// TODO: handle localization of the word &#39;and&#39;</span></div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    <a class="code" href="class_package.xhtml#ad552f6a4878b4fe7c7815c9b9d94318b" title="A simple type which lists the names of a publication&#39;s creators.">AttributionList</a> contributors = <a class="code" href="class_package.xhtml#acb59ccfbccc2db205252e3606ee8aa3d">ContributorNames</a>(localized);</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="keywordflow">if</span> ( contributors.empty() )</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    <span class="keywordflow">if</span> ( contributors.size() == 1 )</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;        <span class="keywordflow">return</span> contributors[0];</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( contributors.size() == 2 )</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;        <span class="keywordflow">return</span> _Str(contributors[0], <span class="stringliteral">&quot; and &quot;</span>, contributors[1]);</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    </div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    std::stringstream ss;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    <span class="keyword">auto</span> pos = contributors.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    <span class="keyword">auto</span> last = pos + (contributors.size() - 1);</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    <span class="keywordflow">while</span> ( pos != last )</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;    {</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;        ss &lt;&lt; *(pos++) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;    }</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    </div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;and &quot;</span> &lt;&lt; *last;</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(ss.str());</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;}</div>
<div class="line"><a name="l01590"></a><span class="lineno"><a class="code" href="class_package.xhtml#a09ce5815af920de1f92e6e47c62056e3"> 1590</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#a09ce5815af920de1f92e6e47c62056e3">Package::Language</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    <span class="keyword">auto</span> items = <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Language);</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    <span class="keywordflow">if</span> ( items.empty() )</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    <span class="keywordflow">return</span> items[0]-&gt;Value();</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;}</div>
<div class="line"><a name="l01597"></a><span class="lineno"><a class="code" href="class_package.xhtml#a67b3b58c1fbf3939a6c84104b9ea22c0"> 1597</a></span>&#160;shared_ptr&lt;ManifestItem&gt; <a class="code" href="class_package.xhtml#a67b3b58c1fbf3939a6c84104b9ea22c0">Package::CoverManifestItem</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    <span class="keywordtype">string</span> EPUB2CoverID = <a class="code" href="class_package.xhtml#aa112060dc68e90c8f3780ff980a1c054">EPUB2PropertyMatching</a>(<span class="keywordtype">string</span>(<span class="stringliteral">&quot;cover&quot;</span>));</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; item : <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a>)</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    {</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;        <span class="keywordflow">if</span> (item.second-&gt;HasProperty(ePub3::ItemProperties::CoverImage) || item.second-&gt;Identifier() == EPUB2CoverID) {</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;            <span class="keywordflow">return</span> item.second;</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;        }</div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    }</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;}</div>
<div class="line"><a name="l01609"></a><span class="lineno"><a class="code" href="class_package.xhtml#a6f520f403048aebc8a139a34bffcee18"> 1609</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#a6f520f403048aebc8a139a34bffcee18">Package::MediaOverlays_ActiveClass</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;    <span class="comment">// See:</span></div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    <span class="comment">// http://www.idpf.org/epub/30/spec/epub30-mediaoverlays.html#sec-package-metadata</span></div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_property_holder.xhtml#a499a5e455dc261a32d01a161eb12b18a">PropertyMatching</a>(<span class="stringliteral">&quot;active-class&quot;</span>, <span class="stringliteral">&quot;media&quot;</span>);</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;    <span class="keywordflow">if</span> (prop != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    {</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;        <span class="keywordflow">return</span> prop-&gt;Value();</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    }</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    {</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    }</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;}</div>
<div class="line"><a name="l01624"></a><span class="lineno"><a class="code" href="class_package.xhtml#ae4e1703b5f4e82bdaacd490d6e89c233"> 1624</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#ae4e1703b5f4e82bdaacd490d6e89c233">Package::MediaOverlays_PlaybackActiveClass</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    <span class="comment">// introduced in the EPUB 3.0.1 revision,</span></div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    <span class="comment">// see:</span></div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;    <span class="comment">// https://epub-revision.googlecode.com/svn/trunk/build/301/spec/epub30-mediaoverlays.html#sec-package-metadata</span></div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;    <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_property_holder.xhtml#a499a5e455dc261a32d01a161eb12b18a">PropertyMatching</a>(<span class="stringliteral">&quot;playback-active-class&quot;</span>, <span class="stringliteral">&quot;media&quot;</span>);</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    <span class="keywordflow">if</span> (prop != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    {</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;        <span class="keywordflow">return</span> prop-&gt;Value();</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;    }</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;    {</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    }</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;}</div>
<div class="line"><a name="l01640"></a><span class="lineno"><a class="code" href="class_package.xhtml#ad0fff7882cae807f7c90e12af1bb7e64"> 1640</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#ad0fff7882cae807f7c90e12af1bb7e64">Package::MediaOverlays_DurationTotal</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;    <span class="comment">// See:</span></div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;    <span class="comment">// http://www.idpf.org/epub/30/spec/epub30-mediaoverlays.html#sec-package-metadata</span></div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;    <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_property_holder.xhtml#a499a5e455dc261a32d01a161eb12b18a">PropertyMatching</a>(<span class="stringliteral">&quot;duration&quot;</span>, <span class="stringliteral">&quot;media&quot;</span>, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    <span class="keywordflow">if</span> (prop != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;    {</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;        <span class="keywordflow">return</span> prop-&gt;Value();</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;    }</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;    {</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    }</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;}</div>
<div class="line"><a name="l01655"></a><span class="lineno"><a class="code" href="class_package.xhtml#ad58fbefa3d78cc98e17f2853f0637916"> 1655</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#ad58fbefa3d78cc98e17f2853f0637916">Package::MediaOverlays_DurationItem</a>(<span class="keyword">const</span> std::shared_ptr&lt;ManifestItem&gt; &amp; manifestItem)</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;{</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;    <span class="comment">// See:</span></div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;    <span class="comment">// http://www.idpf.org/epub/30/spec/epub30-mediaoverlays.html#sec-package-metadata</span></div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;    <span class="keyword">auto</span> iri = <a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;duration&quot;</span>, <span class="stringliteral">&quot;media&quot;</span>);</div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;    <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = manifestItem-&gt;PropertyMatching(iri, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;    <span class="keywordflow">if</span> (prop == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;    {</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;        std::shared_ptr&lt;ManifestItem&gt; mediaOverlay = manifestItem-&gt;MediaOverlay();</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;        <span class="keywordflow">if</span> (mediaOverlay != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;        {</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;            prop = mediaOverlay-&gt;PropertyMatching(iri, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;        }</div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;    }</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;    <span class="keywordflow">if</span> (prop == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    {</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;    }</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;    <span class="keywordflow">return</span> prop-&gt;Value();</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;}</div>
<div class="line"><a name="l01679"></a><span class="lineno"><a class="code" href="class_package.xhtml#a3feaeb278232cb4106e9acc5e79a3f24"> 1679</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#a3feaeb278232cb4106e9acc5e79a3f24">Package::MediaOverlays_Narrator</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;    <span class="comment">// See:</span></div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    <span class="comment">// http://www.idpf.org/epub/30/spec/epub30-mediaoverlays.html#sec-package-metadata</span></div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;    <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_property_holder.xhtml#a499a5e455dc261a32d01a161eb12b18a">PropertyMatching</a>(<span class="stringliteral">&quot;narrator&quot;</span>, <span class="stringliteral">&quot;media&quot;</span>);</div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    <span class="keywordflow">if</span> (prop != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;    {</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;        <span class="keywordflow">return</span> localized ? prop-&gt;LocalizedValue() : prop-&gt;Value();</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    }</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    {</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    }</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;}</div>
<div class="line"><a name="l01694"></a><span class="lineno"><a class="code" href="class_package.xhtml#a4e53ca5fad475aa4692dabd5aa17acff"> 1694</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#a4e53ca5fad475aa4692dabd5aa17acff">Package::Source</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;    <span class="keyword">auto</span> items = <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Source);</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <span class="keywordflow">if</span> ( items.empty() )</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;    <span class="keywordflow">return</span> (localized? items[0]-&gt;LocalizedValue() : items[0]-&gt;Value());</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;}</div>
<div class="line"><a name="l01701"></a><span class="lineno"><a class="code" href="class_package.xhtml#ac163624e5e982119f2b88df959dc4a62"> 1701</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#ac163624e5e982119f2b88df959dc4a62">Package::CopyrightOwner</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    <span class="keyword">auto</span> items = <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Rights);</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;    <span class="keywordflow">if</span> ( items.empty() )</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;    <span class="keywordflow">return</span> (localized? items[0]-&gt;LocalizedValue() : items[0]-&gt;Value());</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;}</div>
<div class="line"><a name="l01708"></a><span class="lineno"><a class="code" href="class_package.xhtml#a95462e599a03d8dee1cc61b99e0d4731"> 1708</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; <a class="code" href="class_package.xhtml#a95462e599a03d8dee1cc61b99e0d4731">Package::ModificationDate</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;    <span class="keyword">auto</span> items = <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;modified&quot;</span>, <span class="stringliteral">&quot;dcterms&quot;</span>));</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;    <span class="keywordflow">if</span> ( items.empty() )</div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    <span class="keywordflow">return</span> items[0]-&gt;Value();</div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;}</div>
<div class="line"><a name="l01715"></a><span class="lineno"><a class="code" href="class_package.xhtml#af857adedbb8efe3558bfa143aa6c55bf"> 1715</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#af857adedbb8efe3558bfa143aa6c55bf">Package::ISBN</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Identifier) )</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;    {</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;        <span class="keywordflow">if</span> ( item-&gt;ExtensionWithIdentifier(<a class="code" href="class_property_holder.xhtml#a208316ec90b55397e0dcdfc6c1c3fa95">MakePropertyIRI</a>(<span class="stringliteral">&quot;identifier-type&quot;</span>)) == nullptr )</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;        </div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;        <span class="comment">// this will be complicated...</span></div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;        <span class="comment">// TODO: Implementation of ISBN lookup</span></div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;    }</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    </div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;}</div>
<div class="line"><a name="l01728"></a><span class="lineno"><a class="code" href="class_package.xhtml#a8592b168393bf7908e9f85d513e226a9"> 1728</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">Package::StringList</a> <a class="code" href="class_package.xhtml#a8592b168393bf7908e9f85d513e226a9">Package::Subjects</a>(<span class="keywordtype">bool</span> localized)<span class="keyword"> const</span></div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;    <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">StringList</a> result;</div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> item : <a class="code" href="class_property_holder.xhtml#a8af6159ffe55050c4ed33bf9cf34a9a8">PropertiesMatching</a>(DCType::Subject) )</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;    {</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;        result.emplace_back((localized? item-&gt;LocalizedValue() : item-&gt;Value()));</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;    }</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;}</div>
<div class="line"><a name="l01737"></a><span class="lineno"><a class="code" href="class_package.xhtml#a41f48087f3e8be688e75c07aaacf092a"> 1737</a></span>&#160;<a class="code" href="property_8h.xhtml#a9f9847d3b3dd2c258d764d40a648c11b" title="Enumeration for page progression directions.">PageProgression</a> <a class="code" href="class_package.xhtml#a41f48087f3e8be688e75c07aaacf092a">Package::PageProgressionDirection</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    <a class="code" href="_forward_8h.xhtml#aa3e1ae537381203b433fd5a56718456f">PropertyPtr</a> prop = <a class="code" href="class_property_holder.xhtml#a499a5e455dc261a32d01a161eb12b18a">PropertyMatching</a>(<span class="stringliteral">&quot;page-progression-direction&quot;</span>);</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;    <span class="keywordflow">if</span> ( prop )</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;    {</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;        <span class="keywordflow">if</span> ( prop-&gt;Value() == <span class="stringliteral">&quot;ltr&quot;</span> )</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;            <span class="keywordflow">return</span> PageProgression::LeftToRight;</div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( prop-&gt;Value() == <span class="stringliteral">&quot;rtl&quot;</span> )</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;            <span class="keywordflow">return</span> PageProgression::RightToLeft;</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    }</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    <span class="keywordflow">return</span> PageProgression::Default;</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;}</div>
<div class="line"><a name="l01749"></a><span class="lineno"><a class="code" href="class_package.xhtml#ab4fe3854a6f385d9939696176c47fd12"> 1749</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">Package::StringList</a> <a class="code" href="class_package.xhtml#ab4fe3854a6f385d9939696176c47fd12" title="A list of media types which have an installed handler of class MediaHandler.">Package::MediaTypesWithDHTMLHandlers</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">StringList</a> result;</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> pair : <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a> )</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;    {</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> pHandler : pair.second )</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        {</div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;            <span class="keywordflow">if</span> ( <span class="keyword">typeid</span>(*pHandler) == <span class="keyword">typeid</span>(<a class="code" href="class_media_handler.xhtml">MediaHandler</a>) )</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;            {</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;                result.emplace_back(pair.first);</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;            }</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;        }</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    }</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;}</div>
<div class="line"><a name="l01765"></a><span class="lineno"><a class="code" href="class_package.xhtml#a16f6656c24b1820c4131663f26e29c07"> 1765</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classshared__vector.xhtml">PackageBase::ContentHandlerList</a> <a class="code" href="class_package.xhtml#a16f6656c24b1820c4131663f26e29c07">Package::HandlersForMediaType</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; mediaType)<span class="keyword"> const</span></div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;    <span class="keyword">auto</span> found = <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a>.find(mediaType);</div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    <span class="keywordflow">if</span> ( found == <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a>.end() )</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="class_package_base.xhtml#a8ecbf496ae6059615c42e1ce29ebcef3" title="An array of content handler objects.">ContentHandlerList</a>();</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;    <span class="keywordflow">return</span> found-&gt;second;</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;}</div>
<div class="line"><a name="l01772"></a><span class="lineno"><a class="code" href="class_package.xhtml#a04e82817b2c60651c8580b566860c998"> 1772</a></span>&#160;shared_ptr&lt;MediaHandler&gt; <a class="code" href="class_package.xhtml#a04e82817b2c60651c8580b566860c998">Package::OPFHandlerForMediaType</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;mediaType)<span class="keyword"> const</span></div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;    <span class="keyword">auto</span> found = <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a>.find(mediaType);</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;    <span class="keywordflow">if</span> ( found == <a class="code" href="class_package_base.xhtml#ac18a74e936bb9587d4332abc1fdad671" title="All installed content handlers, indexed by media-type.">_contentHandlers</a>.end() )</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;    </div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> ptr : found-&gt;second )</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;    {</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;        <a class="code" href="_forward_8h.xhtml#af22d445af70681fcca57ac49c173922b">MediaHandlerPtr</a> handler = ptr-&gt;CastPtr&lt;<a class="code" href="class_media_handler.xhtml">MediaHandler</a>&gt;();</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;        <span class="keywordflow">if</span> ( handler )</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;            <span class="keywordflow">return</span> handler;</div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;    }</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;    </div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;}</div>
<div class="line"><a name="l01787"></a><span class="lineno"><a class="code" href="class_package.xhtml#a7c0733ca5a3c4c917d1f7cc59288c4b4"> 1787</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">Package::StringList</a> <a class="code" href="class_package.xhtml#a7c0733ca5a3c4c917d1f7cc59288c4b4" title="Returns a list of all media types seen in the manifest.">Package::AllMediaTypes</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    std::map&lt;string, bool&gt;   <span class="keyword">set</span>;</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> pair : <a class="code" href="class_package_base.xhtml#abedf19da463e4049e85c3fafb96d9ea8" title="All manifest items, indexed by unique identifier.">_manifestByID</a> )</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    {</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;        <span class="keyword">set</span>[pair.second-&gt;MediaType()] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;    }</div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;    </div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;    <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">StringList</a> types;</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> pair : <span class="keyword">set</span> )</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;    {</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;        types.push_back(pair.first);</div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;    }</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    </div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    <span class="keywordflow">return</span> types;</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;}</div>
<div class="line"><a name="l01803"></a><span class="lineno"><a class="code" href="class_package.xhtml#a5d322e3e06aaf86302e24e7deda0c1d1"> 1803</a></span>&#160;<span class="keyword">const</span> <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">Package::StringList</a> <a class="code" href="class_package.xhtml#a5d322e3e06aaf86302e24e7deda0c1d1" title="Returns a list of all unsupported media types.">Package::UnsupportedMediaTypes</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    <a class="code" href="class_package.xhtml#a794df747b7f8deba83abac3ed485719e">StringList</a> types;</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span>&amp; pair : <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a> )</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    {</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;        <span class="keywordflow">if</span> ( pair.second-&gt;Support() == <a class="code" href="media__support__info_8h.xhtml#a234dd7170668b24c3c7acfa2a47dcddb" title="The media type is not supported.">MediaSupportInfo::SupportType::Unsupported</a> )</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;        {</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;            types.push_back(pair.first);</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;        }</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;    }</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;    <span class="keywordflow">return</span> types;</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;}</div>
<div class="line"><a name="l01815"></a><span class="lineno"><a class="code" href="class_package.xhtml#a159fc725a21152cdb477581fc871d53c"> 1815</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_package.xhtml#a159fc725a21152cdb477581fc871d53c">Package::SetMediaSupport</a>(<span class="keyword">const</span> <a class="code" href="class_package.xhtml#a1b31a9cb7f6ccb74ace1d170d38dbbe0">MediaSupportList</a> &amp;list)</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;{</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;    <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a> = list;</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;}</div>
<div class="line"><a name="l01819"></a><span class="lineno"><a class="code" href="class_package.xhtml#a9a5f15dff878f2b83467850d74f83786"> 1819</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_package.xhtml#a159fc725a21152cdb477581fc871d53c">Package::SetMediaSupport</a>(<a class="code" href="class_package.xhtml#a1b31a9cb7f6ccb74ace1d170d38dbbe0">MediaSupportList</a> &amp;&amp;list)</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;{</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;    <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a> = std::move(list);</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;}</div>
<div class="line"><a name="l01823"></a><span class="lineno"><a class="code" href="class_package.xhtml#a4e6f43475e115ac22a47f969405d705f"> 1823</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_package.xhtml#a4e6f43475e115ac22a47f969405d705f">Package::InitMediaSupport</a>()</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;{</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span>&amp; mediaType : <a class="code" href="class_package.xhtml#a7c0733ca5a3c4c917d1f7cc59288c4b4" title="Returns a list of all media types seen in the manifest.">AllMediaTypes</a>() )</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    {</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;        <span class="keywordflow">if</span> ( <a class="code" href="class_property_holder.xhtml#a03a702cec1539d0078cc937d69ef0c77" title="The list of Core Media Types from OPF 3.0 ??5.1.">CoreMediaTypes</a>.find(mediaType) != <a class="code" href="class_property_holder.xhtml#a03a702cec1539d0078cc937d69ef0c77" title="The list of Core Media Types from OPF 3.0 ??5.1.">CoreMediaTypes</a>.end() )</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;        {</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;            <span class="comment">// support for core types is required</span></div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;<span class="preprocessor"></span>            <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a>.emplace(mediaType, <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">MediaSupportInfo::New</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>(), mediaType));</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;<span class="preprocessor"></span>            <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a>.insert(std::make_pair(mediaType, <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">MediaSupportInfo::New</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>(), mediaType)));</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;<span class="preprocessor"></span>        }</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;        {</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;            shared_ptr&lt;MediaHandler&gt; pHandler = <a class="code" href="class_package.xhtml#a04e82817b2c60651c8580b566860c998">OPFHandlerForMediaType</a>(mediaType);</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;            <span class="keywordflow">if</span> ( pHandler )</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;            {</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;                <span class="comment">// supported through a handler</span></div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a>.emplace(mediaType, <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">MediaSupportInfo::New</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>(), mediaType, MediaSupportInfo::SupportType::SupportedWithHandler));</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a>.insert(std::make_pair(mediaType, <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">MediaSupportInfo::New</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>(), mediaType, MediaSupportInfo::SupportType::SupportedWithHandler)));</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;<span class="preprocessor"></span>            }</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;            {</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;                <span class="comment">// unsupported</span></div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;<span class="preprocessor">#if EPUB_HAVE(CXX_MAP_EMPLACE)</span></div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a>.emplace(mediaType, <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">MediaSupportInfo::New</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>(), mediaType, <span class="keyword">false</span>));</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;<span class="preprocessor"></span>                <a class="code" href="class_package.xhtml#a1ae21a4ddec1f2d1f50b513688f363f2" title="A list of media types with their support details.">_mediaSupport</a>.insert(std::make_pair(mediaType, <a class="code" href="class_pointer_type.xhtml#a532e3efd5145c8c89933b4fa5531f296">MediaSupportInfo::New</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>(), mediaType, <span class="keyword">false</span>)));</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;<span class="preprocessor"></span>            }</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;        }</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;    }</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;}</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;</div>
<div class="line"><a name="l01861"></a><span class="lineno"><a class="code" href="class_package.xhtml#aa112060dc68e90c8f3780ff980a1c054"> 1861</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_package.xhtml#aa112060dc68e90c8f3780ff980a1c054">Package::EPUB2PropertyMatching</a>(<span class="keywordtype">string</span> name)<span class="keyword"> const</span></div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;    <span class="keyword">auto</span> found = <a class="code" href="class_package.xhtml#a26b81de7d1c2fb5bc9960a8b375a2f1e" title="A list of EPUB 2 properties for backward compatibility.">_EPUB2Properties</a>.find(name);</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    <span class="keywordflow">if</span> (found != <a class="code" href="class_package.xhtml#a26b81de7d1c2fb5bc9960a8b375a2f1e" title="A list of EPUB 2 properties for backward compatibility.">_EPUB2Properties</a>.end()) {</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;        <span class="keywordflow">return</span> found-&gt;second;</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;    }</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a>;</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;}</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;</div>
<div class="line"><a name="l01871"></a><span class="lineno"><a class="code" href="class_package.xhtml#a0d3ebe28059a8fa9c45c99fbcc5a2db7"> 1871</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_package.xhtml#a0d3ebe28059a8fa9c45c99fbcc5a2db7" title="Assigns titlues to SpineItems based on the contents of the TOC nav table.">Package::CompileSpineItemTitles</a>()</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;{</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;    <a class="code" href="nav__table_8h.xhtml#a4d433fe1bfc18a2f048c8d310d7a08db">NavigationTablePtr</a> toc = <a class="code" href="class_package.xhtml#aa2caea7d1f0c24003a1bb597a664d97a" title="Returns the table of contents for this package.">TableOfContents</a>();</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;    <span class="keywordflow">if</span> (!<span class="keywordtype">bool</span>(toc))</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;</div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    <span class="comment">// optimization: we assume that TOC/spine are both in-order, so we can avoid searching a linked-list every time</span></div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;    std::map&lt;string, string&gt; lookup;</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    <a class="code" href="class_package.xhtml#abf5f8e0ccfe842f5798f400c0566d638" title="Internal recursive function for navigating the TOC tree.">_CompileSpineItemTitlesInternal</a>(toc-&gt;Children(), lookup);</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> item = <a class="code" href="class_package_base.xhtml#a65ad10fec002f261e38716b99a48bffc">FirstSpineItem</a>(); bool(item); item = item-&gt;Next())</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;    {</div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;        <span class="keywordtype">string</span> path = item-&gt;ManifestItem()-&gt;AbsolutePath();</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;        <span class="keyword">auto</span> pos = lookup.find(path);</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;        <span class="keywordflow">if</span> (pos != lookup.end())</div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;            item-&gt;SetTitle(pos-&gt;second);</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;    }</div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;}</div>
<div class="line"><a name="l01890"></a><span class="lineno"><a class="code" href="class_package.xhtml#abf5f8e0ccfe842f5798f400c0566d638"> 1890</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_package.xhtml#abf5f8e0ccfe842f5798f400c0566d638" title="Internal recursive function for navigating the TOC tree.">Package::_CompileSpineItemTitlesInternal</a>(<span class="keyword">const</span> <a class="code" href="classshared__vector.xhtml">NavigationList</a>&amp; navPoints, std::map&lt;string, string&gt;&amp; compiled)</div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;{</div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;    <span class="comment">// compile the titles to a list, accessed by absolute path</span></div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; element : navPoints)</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    {</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;        <a class="code" href="nav__point_8h.xhtml#a5b60cff00c5f11109dbd9a630b091374">NavigationPointPtr</a> pt = std::dynamic_pointer_cast&lt;<a class="code" href="class_navigation_point.xhtml">NavigationPoint</a>&gt;(element);</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">bool</span>(pt))</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;        {</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;            <span class="keywordflow">try</span></div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;            {</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;                <span class="keywordtype">string</span> path = pt-&gt;<a class="code" href="class_navigation_point.xhtml#a8e8baa93fba7bde57d24d2d192b429d0" title="Turns the Content() href into an absolute value, similar to ManifestItem::AbsolutePath().">AbsolutePath</a>(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>());</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;                <span class="keyword">auto</span> pos = compiled.<a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(path);</div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;                <span class="keywordflow">if</span> (pos == compiled.end())</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;                    compiled[path] = pt-&gt;Title();</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;            }</div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;            <span class="keywordflow">catch</span> (std::exception&amp; cppErr)</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;            {</div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;                std::cerr &lt;&lt; <span class="stringliteral">&quot;Exception: &quot;</span> &lt;&lt; cppErr.what() &lt;&lt; std::endl;</div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;                std::cerr.flush();</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;<span class="preprocessor">#if EPUB_OS(WINDOWS)</span></div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;<span class="preprocessor"></span>                OutputDebugStringA(_Str(<span class="stringliteral">&quot;Exception: &quot;</span>, cppErr.what()).c_str());</div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;<span class="preprocessor"></span>            }</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;        }</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;        <a class="code" href="class_package.xhtml#abf5f8e0ccfe842f5798f400c0566d638" title="Internal recursive function for navigating the TOC tree.">_CompileSpineItemTitlesInternal</a>(element-&gt;Children(), compiled);</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;    }</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;}</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;EPUB3_END_NAMESPACE</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d81697a4833f1d44a7e9bc8387132cc4.xhtml">ePub</a></li><li class="navelem"><a class="el" href="package_8cpp.xhtml">package.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
