<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/future.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('future_8h.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#namespaces">Namespaces</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">future.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="base_8h_source.xhtml">ePub3/base.h</a>&gt;</code><br/>
<code>#include &lt;list&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
<code>#include &lt;stdexcept&gt;</code><br/>
<code>#include &lt;exception&gt;</code><br/>
<code>#include &lt;system_error&gt;</code><br/>
<code>#include &lt;thread&gt;</code><br/>
<code>#include &lt;memory&gt;</code><br/>
<code>#include &lt;atomic&gt;</code><br/>
<code>#include &lt;<a class="el" href="invoke_8h_source.xhtml">ePub3/utilities/invoke.h</a>&gt;</code><br/>
<code>#include &lt;<a class="el" href="executor_8h_source.xhtml">ePub3/utilities/executor.h</a>&gt;</code><br/>
<code>#include &lt;<a class="el" href="condition__variable__any_8h_source.xhtml">ePub3/utilities/condition_variable_any.h</a>&gt;</code><br/>
</div><div class="textblock"><div class="dynheader">
Include dependency graph for future.h:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="future_8h__incl.svg" width="1455" height="552"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div><div class="textblock"><div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="future_8h__dep__incl.svg" width="1792" height="291"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<p><a href="future_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstd_1_1is__error__code__enum_3_01e_pub3_1_1future__errc_01_4.xhtml">std::is_error_code_enum&lt; ePub3::future_errc &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfuture__error.xhtml">future_error</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfuture__uninitialized.xhtml">future_uninitialized</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbroken__promise.xhtml">broken_promise</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfuture__already__retrieved.xhtml">future_already_retrieved</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpromise__already__satisfied.xhtml">promise_already_satisfied</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtask__already__started.xhtml">task_already_started</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classtask__moved.xhtml">task_moved</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpromise__moved.xhtml">promise_moved</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____relocker.xhtml">__relocker</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____shared__state__base.xhtml">__shared_state_base</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__traits.xhtml">__future_traits&lt; _Tp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__traits_3_01___tp_01_6_01_4.xhtml">__future_traits&lt; _Tp &amp; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__traits_3_01void_01_4.xhtml">__future_traits&lt; void &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____shared__state.xhtml">__shared_state&lt; _Tp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____shared__state_3_01___tp_01_6_01_4.xhtml">__shared_state&lt; _Tp &amp; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____shared__state_3_01void_01_4.xhtml">__shared_state&lt; void &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__async__shared__state__base.xhtml">__future_async_shared_state_base&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__async__shared__state.xhtml">__future_async_shared_state&lt; _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__async__shared__state_3_01___rp_01_6_00_01___fp_01_4.xhtml">__future_async_shared_state&lt; _Rp &amp;, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__async__shared__state_3_01void_00_01___fp_01_4.xhtml">__future_async_shared_state&lt; void, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__deferred__shared__state.xhtml">__future_deferred_shared_state&lt; _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__deferred__shared__state_3_01___rp_01_6_00_01___fp_01_4.xhtml">__future_deferred_shared_state&lt; _Rp &amp;, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__deferred__shared__state_3_01void_00_01___fp_01_4.xhtml">__future_deferred_shared_state&lt; void, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class____scoped__array.xhtml">__scoped_array&lt; _Tp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____range__lock__guard.xhtml">__range_lock_guard&lt; _Iter &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class____future__waiter.xhtml">__future_waiter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfuture.xhtml">future&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classshared__future.xhtml">shared_future&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structis__future__type.xhtml">is_future_type&lt; _Tp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structis__future__type_3_01future_3_01___tp_01_4_01_4.xhtml">is_future_type&lt; future&lt; _Tp &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structis__future__type_3_01shared__future_3_01___tp_01_4_01_4.xhtml">is_future_type&lt; shared_future&lt; _Tp &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpromise.xhtml">promise&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpackaged__task.xhtml">packaged_task&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class____basic__future.xhtml">__basic_future&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__deferred__continuation__shared__state.xhtml">__future_deferred_continuation_shared_state&lt; _Fut, _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__async__continuation__shared__state.xhtml">__future_async_continuation_shared_state&lt; _Fut, _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__executor__continuation__shared__state.xhtml">__future_executor_continuation_shared_state&lt; _Fut, _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__unwrap__shared__state.xhtml">__future_unwrap_shared_state&lt; _Fut, _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____task__base__shared__state.xhtml">__task_base_shared_state&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____task__base__shared__state_3_01___rp_07___args_8_8_8_08_4.xhtml">__task_base_shared_state&lt; _Rp(_Args...)&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____task__shared__state.xhtml">__task_shared_state&lt; _Fp, _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____task__shared__state_3_01___fp_00_01___rp_07___args_8_8_8_08_4.xhtml">__task_shared_state&lt; _Fp, _Rp(_Args...)&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____task__shared__state_3_01___fp_00_01___rp_01_6_07___args_8_8_8_08_4.xhtml">__task_shared_state&lt; _Fp, _Rp &amp;(_Args...)&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____task__shared__state_3_01std_1_1function_3_01___rp_07___args_8_8_8_08_4_00_01___rp_07___args_8_8_8_08_4.xhtml">__task_shared_state&lt; std::function&lt; _Rp(_Args...)&gt;, _Rp(_Args...)&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____task__shared__state_3_01___fp_00_01void_07___args_8_8_8_08_4.xhtml">__task_shared_state&lt; _Fp, void(_Args...)&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfuture.xhtml">future&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfuture_3_01future_3_01___r2_01_4_01_4.xhtml">future&lt; future&lt; _R2 &gt; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classshared__future.xhtml">shared_future&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpromise.xhtml">promise&lt; _Rp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpromise_3_01___rp_01_6_01_4.xhtml">promise&lt; _Rp &amp; &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpromise_3_01void_01_4.xhtml">promise&lt; void &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstd_1_1uses__allocator_3_01_e_p_u_b3___n_a_m_e_s_p_a_c_e_1_1promise_3_01___rp_01_4_00_01___alloc_01_4.xhtml">std::uses_allocator&lt; EPUB3_NAMESPACE::promise&lt; _Rp &gt;, _Alloc &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class____async__func.xhtml">__async_func&lt; _Fp, _Args &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpackaged__task_3_01___rp_07___args_8_8_8_08_4.xhtml">packaged_task&lt; _Rp(_Args...)&gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structstd_1_1uses__allocator_3_01_e_p_u_b3___n_a_m_e_s_p_a_c_e_1_1packaged__task_3_01___rp_01_4_00_01___alloc_01_4.xhtml">std::uses_allocator&lt; EPUB3_NAMESPACE::packaged_task&lt; _Rp &gt;, _Alloc &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__async__continuation__shared__state.xhtml">__future_async_continuation_shared_state&lt; _Fut, _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__async__continuation__shared__state_3_01___fut_00_01void_00_01___fp_01_4.xhtml">__future_async_continuation_shared_state&lt; _Fut, void, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__deferred__continuation__shared__state.xhtml">__future_deferred_continuation_shared_state&lt; _Fut, _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__deferred__continuation__shared__state_3_01___fut_00_01void_00_01___fp_01_4.xhtml">__future_deferred_continuation_shared_state&lt; _Fut, void, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__executor__continuation__shared__state.xhtml">__future_executor_continuation_shared_state&lt; _Fut, _Rp, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct____future__executor__continuation__shared__state_3_01___fut_00_01void_00_01___fp_01_4.xhtml">__future_executor_continuation_shared_state&lt; _Fut, void, _Fp &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacestd"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacestd.xhtml">std</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespace____future__state"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespace____future__state.xhtml">__future_state</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a197afef4e181c466a1c01ca7c7b4b1e6"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6">future_errc</a> { <br/>
&#160;&#160;<a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6a2c6bc6062e72db1c0915032943cb6452">broken_promise</a>, 
<a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6a829037befd349f04ff71ddea385bdb9a">future_already_retrieved</a>, 
<a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6a9327d6f7b9aca59b62b436696fd17a00">promise_already_satisfied</a>, 
<a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6ac537dcef56fd6ff75592c0220fd3dae1">no_state</a>, 
<br/>
&#160;&#160;<a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6a530557da4e4080cd75d17b4d1d91cd72">task_already_started</a>
<br/>
 }</td></tr>
<tr class="separator:a197afef4e181c466a1c01ca7c7b4b1e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b3224d19f20667b3b24145a7b395a33"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33">launch</a> { <a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33a334c4a4c42fdb79d7ebc3e73b517e6f8">none</a> = 0, 
<a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33a0df93e34273b367bb63bad28c94c78d5">async</a> = 1, 
<a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33a43fff3df3fc0b3417c86dc3040fb2d86">deferred</a> = 2, 
<a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33a100b8cad7cf2a56f6df78f171f97a1ec">any</a> = async | deferred
 }</td></tr>
<tr class="separator:a9b3224d19f20667b3b24145a7b395a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaacbde3b6cc8e4622e1aae2beacd4f3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#aeaacbde3b6cc8e4622e1aae2beacd4f3">future_status</a> { <a class="el" href="future_8h.xhtml#aeaacbde3b6cc8e4622e1aae2beacd4f3ab2fdab230a2c39f3595a947861863cb7">ready</a>, 
<a class="el" href="future_8h.xhtml#aeaacbde3b6cc8e4622e1aae2beacd4f3a90272dda245ae1fb3cf197e91a8689dc">timeout</a>, 
<a class="el" href="future_8h.xhtml#aeaacbde3b6cc8e4622e1aae2beacd4f3a43fff3df3fc0b3417c86dc3040fb2d86">deferred</a>
 }</td></tr>
<tr class="separator:aeaacbde3b6cc8e4622e1aae2beacd4f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae989a8c9d02a1fcd02e3faa8ebe93821"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821">__future_state::state</a> { <br/>
&#160;&#160;<a class="el" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821ac02c8b9505820f52ab44d49ef9f62fdd">__future_state::uninitialized</a>, 
<a class="el" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821aaf0d78b40f8069ee261423b270592eb9">__future_state::waiting</a>, 
<a class="el" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821aa243e9b1b334a9e8e485204d6df10559">__future_state::ready</a>, 
<a class="el" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821a6f3553a32f5775e637808b2fc76b75e4">__future_state::moved</a>, 
<br/>
&#160;&#160;<a class="el" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821ad76b7cdc3586b923607f0c8ff5b02512">__future_state::deferred</a>
<br/>
 }</td></tr>
<tr class="separator:ae989a8c9d02a1fcd02e3faa8ebe93821"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a4987ae456986b572cccd6293782d2a8c"><td class="memItemLeft" align="right" valign="top">const std::error_category &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a4987ae456986b572cccd6293782d2a8c">future_category</a> () <a class="el" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></td></tr>
<tr class="separator:a4987ae456986b572cccd6293782d2a8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff0af8d95df7ed68c7e9f53f5387e68d"><td class="memItemLeft" align="right" valign="top">error_code&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacestd.xhtml#aff0af8d95df7ed68c7e9f53f5387e68d">std::make_error_code</a> (<a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6">ePub3::future_errc</a> e) <a class="el" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></td></tr>
<tr class="separator:aff0af8d95df7ed68c7e9f53f5387e68d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a48197e26496e22e36425a542b56d5"><td class="memItemLeft" align="right" valign="top">error_condition&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacestd.xhtml#a94a48197e26496e22e36425a542b56d5">std::make_error_condition</a> (<a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6">ePub3::future_errc</a> e) <a class="el" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></td></tr>
<tr class="separator:a94a48197e26496e22e36425a542b56d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6caf48dc1987f22d9245148c82e154b2"><td class="memTemplParams" colspan="2">template&lt;typename _Iter &gt; </td></tr>
<tr class="memitem:a6caf48dc1987f22d9245148c82e154b2"><td class="memTemplItemLeft" align="right" valign="top">_Iter&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a6caf48dc1987f22d9245148c82e154b2">__try_lock_iter</a> (_Iter, _Iter)</td></tr>
<tr class="separator:a6caf48dc1987f22d9245148c82e154b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b6ffe33d42cba7aea1c08df3c028ffd"><td class="memTemplParams" colspan="2">template&lt;typename _Iter &gt; </td></tr>
<tr class="memitem:a6b6ffe33d42cba7aea1c08df3c028ffd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a6b6ffe33d42cba7aea1c08df3c028ffd">__lock_iter</a> (_Iter, _Iter)</td></tr>
<tr class="separator:a6b6ffe33d42cba7aea1c08df3c028ffd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1aa5ed13b6c7fce9675736b1cb83857"><td class="memTemplParams" colspan="2">template&lt;typename _Iter &gt; </td></tr>
<tr class="memitem:ac1aa5ed13b6c7fce9675736b1cb83857"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt;!<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt; _Iter &gt;<br class="typebreak"/>
::value, void &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#ac1aa5ed13b6c7fce9675736b1cb83857">wait_for_all</a> (_Iter __b, _Iter __e)</td></tr>
<tr class="separator:ac1aa5ed13b6c7fce9675736b1cb83857"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb6802c3b31b9fb0bec83eedbf65243b"><td class="memTemplParams" colspan="2">template&lt;typename _F1 &gt; </td></tr>
<tr class="memitem:aeb6802c3b31b9fb0bec83eedbf65243b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt; <a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt; _F1 &gt;::value, <br class="typebreak"/>
void &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#aeb6802c3b31b9fb0bec83eedbf65243b">wait_for_all</a> (_F1 &amp;__f1)</td></tr>
<tr class="separator:aeb6802c3b31b9fb0bec83eedbf65243b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bf45797312faffe74a7857e412193ec"><td class="memTemplParams" colspan="2">template&lt;typename _F1 , typename... _F2&gt; </td></tr>
<tr class="memitem:a4bf45797312faffe74a7857e412193ec"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt; <a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt; _F1 &gt;::value, <br class="typebreak"/>
void &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a4bf45797312faffe74a7857e412193ec">wait_for_all</a> (_F1 &amp;__f1, _F2 &amp;&amp;...__f2)</td></tr>
<tr class="separator:a4bf45797312faffe74a7857e412193ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1539919f1272bffac39de9a3483d0e36"><td class="memTemplParams" colspan="2">template&lt;typename _Iter &gt; </td></tr>
<tr class="memitem:a1539919f1272bffac39de9a3483d0e36"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt;!<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt; _Iter &gt;<br class="typebreak"/>
::value, _Iter &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a1539919f1272bffac39de9a3483d0e36">wait_for_any</a> (_Iter __b, _Iter __e)</td></tr>
<tr class="separator:a1539919f1272bffac39de9a3483d0e36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d9aa3e72734cdb97f8fef22bf3c9994"><td class="memTemplParams" colspan="2">template&lt;typename _F1 &gt; </td></tr>
<tr class="memitem:a3d9aa3e72734cdb97f8fef22bf3c9994"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt; <a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt; _F1 &gt;::value, <br class="typebreak"/>
unsigned &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a3d9aa3e72734cdb97f8fef22bf3c9994">wait_for_any</a> (<a class="el" href="class____future__waiter.xhtml">__future_waiter</a> &amp;__w, _F1 &amp;__f1)</td></tr>
<tr class="separator:a3d9aa3e72734cdb97f8fef22bf3c9994"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae827f2410435c7914ed9ecce1a82d7f3"><td class="memTemplParams" colspan="2">template&lt;typename _F1 , typename... _F2&gt; </td></tr>
<tr class="memitem:ae827f2410435c7914ed9ecce1a82d7f3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt; <a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt; _F1 &gt;::value, <br class="typebreak"/>
unsigned &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#ae827f2410435c7914ed9ecce1a82d7f3">wait_for_any</a> (<a class="el" href="class____future__waiter.xhtml">__future_waiter</a> &amp;__w, _F1 &amp;__f1, _F2 &amp;&amp;...__f2)</td></tr>
<tr class="separator:ae827f2410435c7914ed9ecce1a82d7f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9854c61e5d46ef7ff8dc697cd78f4a71"><td class="memTemplParams" colspan="2">template&lt;typename _F1 , typename... _F2&gt; </td></tr>
<tr class="memitem:a9854c61e5d46ef7ff8dc697cd78f4a71"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if&lt; <a class="el" href="structis__future__type.xhtml">is_future_type</a><br class="typebreak"/>
&lt; _F1 &gt;::value, unsigned &gt;<br class="typebreak"/>
::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a9854c61e5d46ef7ff8dc697cd78f4a71">wait_for_any</a> (_F1 &amp;__f1, _F2 &amp;&amp;...__f2)</td></tr>
<tr class="separator:a9854c61e5d46ef7ff8dc697cd78f4a71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a307f0bc2dfe34ad70e5ee042197898de"><td class="memTemplParams" colspan="2">template&lt;class _Rp , class _Fp &gt; </td></tr>
<tr class="memitem:a307f0bc2dfe34ad70e5ee042197898de"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a307f0bc2dfe34ad70e5ee042197898de">__make_future_async_shared_state</a> (_Fp &amp;&amp;__f)</td></tr>
<tr class="separator:a307f0bc2dfe34ad70e5ee042197898de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ffa8fac03ea4c605f8d1675d75082e8"><td class="memTemplParams" colspan="2">template&lt;class _Rp , class _Fp &gt; </td></tr>
<tr class="memitem:a3ffa8fac03ea4c605f8d1675d75082e8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a3ffa8fac03ea4c605f8d1675d75082e8">__make_future_deferred_shared_state</a> (_Fp &amp;&amp;__f)</td></tr>
<tr class="separator:a3ffa8fac03ea4c605f8d1675d75082e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a538f0928c47290d356bc45947f88a7c1"><td class="memTemplParams" colspan="2">template&lt;class _Fut , class _Rp , class _Fp &gt; </td></tr>
<tr class="memitem:a538f0928c47290d356bc45947f88a7c1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a538f0928c47290d356bc45947f88a7c1">__make_future_async_continuation_shared_state</a> (std::unique_lock&lt; std::mutex &gt; &amp;__lk, _Fut &amp;&amp;__f, _Fp &amp;&amp;__c)</td></tr>
<tr class="separator:a538f0928c47290d356bc45947f88a7c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bff88753c567e6d527fd826d5f03b70"><td class="memTemplParams" colspan="2">template&lt;class _Fut , class _Rp , class _Fp &gt; </td></tr>
<tr class="memitem:a5bff88753c567e6d527fd826d5f03b70"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a5bff88753c567e6d527fd826d5f03b70">__make_future_deferred_continuation_shared_state</a> (std::unique_lock&lt; std::mutex &gt; &amp;__lk, _Fut &amp;&amp;__f, _Fp &amp;&amp;__c)</td></tr>
<tr class="separator:a5bff88753c567e6d527fd826d5f03b70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af58f0fdbd7a64c3a302aae55fcd76bf1"><td class="memTemplParams" colspan="2">template&lt;class _Fut , class _Rp , class _Fp &gt; </td></tr>
<tr class="memitem:af58f0fdbd7a64c3a302aae55fcd76bf1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#af58f0fdbd7a64c3a302aae55fcd76bf1">__make_future_executor_continuation_shared_state</a> (std::unique_lock&lt; std::mutex &gt; &amp;__lk, _Fut &amp;&amp;__f, <a class="el" href="classexecutor.xhtml">executor</a> *__e, _Fp &amp;&amp;__c)</td></tr>
<tr class="separator:af58f0fdbd7a64c3a302aae55fcd76bf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c328ff47c8e3533aca1b791935294a"><td class="memTemplParams" colspan="2">template&lt;class _Fut , class _Rp &gt; </td></tr>
<tr class="memitem:ad7c328ff47c8e3533aca1b791935294a"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#ad7c328ff47c8e3533aca1b791935294a">__make_future_unwrap_shared_state</a> (std::unique_lock&lt; std::mutex &gt; &amp;__lk, _Fut &amp;&amp;__f)</td></tr>
<tr class="separator:ad7c328ff47c8e3533aca1b791935294a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0755198bdfa968ee99a82b99f38cdbd6"><td class="memTemplParams" colspan="2">template&lt;class _Rp &gt; </td></tr>
<tr class="memitem:a0755198bdfa968ee99a82b99f38cdbd6"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacestd.xhtml#a0755198bdfa968ee99a82b99f38cdbd6">std::swap</a> (EPUB3_NAMESPACE::promise&lt; _Rp &gt; &amp;__x, EPUB3_NAMESPACE::promise&lt; _Rp &gt; &amp;__y) <a class="el" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></td></tr>
<tr class="separator:a0755198bdfa968ee99a82b99f38cdbd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae10d8b0169dd1ecea0c8c92a25b4b25f"><td class="memTemplParams" colspan="2">template&lt;class _Rp , class _Fp &gt; </td></tr>
<tr class="memitem:ae10d8b0169dd1ecea0c8c92a25b4b25f"><td class="memTemplItemLeft" align="right" valign="top">EPUB3_BEGIN_NAMESPACE <a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#ae10d8b0169dd1ecea0c8c92a25b4b25f">__make_future_deferred_shared_state</a> (_Fp &amp;&amp;__f)</td></tr>
<tr class="separator:ae10d8b0169dd1ecea0c8c92a25b4b25f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7a575276abac4581bc57f18ab79c9a5"><td class="memTemplParams" colspan="2">template&lt;class _Rp , class _Fp &gt; </td></tr>
<tr class="memitem:ad7a575276abac4581bc57f18ab79c9a5"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#ad7a575276abac4581bc57f18ab79c9a5">__make_future_async_shared_state</a> (_Fp &amp;&amp;__f)</td></tr>
<tr class="separator:ad7a575276abac4581bc57f18ab79c9a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb3e62fb4f669ea319c9efdb1383a50b"><td class="memTemplParams" colspan="2">template&lt;class _Fp , class... _Args&gt; </td></tr>
<tr class="memitem:abb3e62fb4f669ea319c9efdb1383a50b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classfuture.xhtml">future</a>&lt; typename <a class="el" href="struct____invoke__of.xhtml">__invoke_of</a><br class="typebreak"/>
&lt; typename std::decay&lt; _Fp &gt;<br class="typebreak"/>
::type, typename std::decay<br class="typebreak"/>
&lt; _Args &gt;::type...&gt;::type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#abb3e62fb4f669ea319c9efdb1383a50b">async</a> (<a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33">launch</a> __policy, _Fp &amp;&amp;__f, _Args &amp;&amp;...__args)</td></tr>
<tr class="separator:abb3e62fb4f669ea319c9efdb1383a50b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b3c6b531e6c7dd4928ea43a497ad8bb"><td class="memTemplParams" colspan="2">template&lt;class _Fp , class... _Args&gt; </td></tr>
<tr class="memitem:a1b3c6b531e6c7dd4928ea43a497ad8bb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classfuture.xhtml">future</a>&lt; typename <a class="el" href="struct____invoke__of.xhtml">__invoke_of</a><br class="typebreak"/>
&lt; typename std::decay&lt; _Fp &gt;<br class="typebreak"/>
::type, typename std::decay<br class="typebreak"/>
&lt; _Args &gt;::type...&gt;::type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a1b3c6b531e6c7dd4928ea43a497ad8bb">async</a> (_Fp &amp;&amp;__f, _Args &amp;&amp;...__args)</td></tr>
<tr class="separator:a1b3c6b531e6c7dd4928ea43a497ad8bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55b152286bfb6d7a79b213686bc41753"><td class="memTemplParams" colspan="2">template&lt;typename _Tp &gt; </td></tr>
<tr class="memitem:a55b152286bfb6d7a79b213686bc41753"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; typename <br class="typebreak"/>
std::decay&lt; _Tp &gt;::type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a55b152286bfb6d7a79b213686bc41753">make_ready_future</a> (_Tp &amp;&amp;__v)</td></tr>
<tr class="separator:a55b152286bfb6d7a79b213686bc41753"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff5f96052049a0807ed8297ba1a640b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; void &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#aff5f96052049a0807ed8297ba1a640b3">make_ready_future</a> ()</td></tr>
<tr class="separator:aff5f96052049a0807ed8297ba1a640b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b0011780f3dbbf573fc36e1ccda419"><td class="memTemplParams" colspan="2">template&lt;typename _Tp &gt; </td></tr>
<tr class="memitem:a49b0011780f3dbbf573fc36e1ccda419"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt; _Tp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a49b0011780f3dbbf573fc36e1ccda419">make_ready_future</a> (std::exception_ptr __exc)</td></tr>
<tr class="separator:a49b0011780f3dbbf573fc36e1ccda419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab437fa2ffdc0eb8f713ad3ca5d12f9f3"><td class="memTemplParams" colspan="2">template&lt;typename _Tp , typename _E &gt; </td></tr>
<tr class="memitem:ab437fa2ffdc0eb8f713ad3ca5d12f9f3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt; !std::is_same&lt; _Tp, _E &gt;<br class="typebreak"/>
::value, <a class="el" href="classfuture.xhtml">future</a>&lt; _Tp &gt;&gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#ab437fa2ffdc0eb8f713ad3ca5d12f9f3">make_ready_future</a> (_E __exc)</td></tr>
<tr class="separator:ab437fa2ffdc0eb8f713ad3ca5d12f9f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4169b82c2ce96c1aaee8e3a17b621250"><td class="memTemplParams" colspan="2">template&lt;typename _Tp &gt; </td></tr>
<tr class="memitem:a4169b82c2ce96c1aaee8e3a17b621250"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classshared__future.xhtml">shared_future</a><br class="typebreak"/>
&lt; typename std::decay&lt; _Tp &gt;<br class="typebreak"/>
::type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a4169b82c2ce96c1aaee8e3a17b621250">make_ready_shared_future</a> (_Tp &amp;&amp;__v)</td></tr>
<tr class="separator:a4169b82c2ce96c1aaee8e3a17b621250"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0953dba322348d09c60c8bb448beaf26"><td class="memItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classshared__future.xhtml">shared_future</a>&lt; void &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a0953dba322348d09c60c8bb448beaf26">make_ready_shared_future</a> ()</td></tr>
<tr class="separator:a0953dba322348d09c60c8bb448beaf26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8904e965fe5c83fcfb9f22aed1c69a2d"><td class="memTemplParams" colspan="2">template&lt;typename _Tp &gt; </td></tr>
<tr class="memitem:a8904e965fe5c83fcfb9f22aed1c69a2d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classshared__future.xhtml">shared_future</a>&lt; _Tp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a8904e965fe5c83fcfb9f22aed1c69a2d">make_ready_shared_future</a> (std::exception_ptr __exc)</td></tr>
<tr class="separator:a8904e965fe5c83fcfb9f22aed1c69a2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b9722cc836b35712b3a6a90ebadf0c2"><td class="memTemplParams" colspan="2">template&lt;typename _Tp , typename _E &gt; </td></tr>
<tr class="memitem:a7b9722cc836b35712b3a6a90ebadf0c2"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if<br class="typebreak"/>
&lt; !std::is_same&lt; _Tp, _E &gt;<br class="typebreak"/>
::value, <a class="el" href="classshared__future.xhtml">shared_future</a>&lt; _Tp &gt;<br class="typebreak"/>
&gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a7b9722cc836b35712b3a6a90ebadf0c2">make_ready_shared_future</a> (_E __e)</td></tr>
<tr class="separator:a7b9722cc836b35712b3a6a90ebadf0c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07c45ba4c25b7bc6b721f7510ca3db15"><td class="memTemplParams" colspan="2">template&lt;typename _Fut , typename _Rp , typename _Fp &gt; </td></tr>
<tr class="memitem:a07c45ba4c25b7bc6b721f7510ca3db15"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a07c45ba4c25b7bc6b721f7510ca3db15">__make_future_deferred_continuation_shared_state</a> (std::unique_lock&lt; std::mutex &gt; &amp;__lk, _Fut &amp;&amp;__f, _Fp &amp;&amp;__c)</td></tr>
<tr class="separator:a07c45ba4c25b7bc6b721f7510ca3db15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3281eaa8120576a87a102b5a362e7216"><td class="memTemplParams" colspan="2">template&lt;typename _Fut , typename _Rp , typename _Fp &gt; </td></tr>
<tr class="memitem:a3281eaa8120576a87a102b5a362e7216"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a3281eaa8120576a87a102b5a362e7216">__make_future_async_continuation_shared_state</a> (std::unique_lock&lt; std::mutex &gt; &amp;__lk, _Fut &amp;&amp;__f, _Fp &amp;&amp;__c)</td></tr>
<tr class="separator:a3281eaa8120576a87a102b5a362e7216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c6e0aa6d2e44bfb41aeca7c56d63630"><td class="memTemplParams" colspan="2">template&lt;typename _Fut , typename _Rp , typename _Fp &gt; </td></tr>
<tr class="memitem:a4c6e0aa6d2e44bfb41aeca7c56d63630"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classfuture.xhtml">future</a>&lt; _Rp &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="future_8h.xhtml#a4c6e0aa6d2e44bfb41aeca7c56d63630">__make_future_executor_continuation_shared_state</a> (std::unique_lock&lt; std::mutex &gt; &amp;__lk, _Fut &amp;&amp;__f, <a class="el" href="classexecutor.xhtml">executor</a> *__exec, _Fp &amp;&amp;__c)</td></tr>
<tr class="separator:a4c6e0aa6d2e44bfb41aeca7c56d63630"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="a197afef4e181c466a1c01ca7c7b4b1e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="future_8h.xhtml#a197afef4e181c466a1c01ca7c7b4b1e6">future_errc</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a197afef4e181c466a1c01ca7c7b4b1e6a2c6bc6062e72db1c0915032943cb6452"></a>broken_promise</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a197afef4e181c466a1c01ca7c7b4b1e6a829037befd349f04ff71ddea385bdb9a"></a>future_already_retrieved</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a197afef4e181c466a1c01ca7c7b4b1e6a9327d6f7b9aca59b62b436696fd17a00"></a>promise_already_satisfied</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a197afef4e181c466a1c01ca7c7b4b1e6ac537dcef56fd6ff75592c0220fd3dae1"></a>no_state</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a197afef4e181c466a1c01ca7c7b4b1e6a530557da4e4080cd75d17b4d1d91cd72"></a>task_already_started</em>&nbsp;</td><td class="fielddoc">
</td></tr>
</table>

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l00403">403</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="aeaacbde3b6cc8e4622e1aae2beacd4f3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="future_8h.xhtml#aeaacbde3b6cc8e4622e1aae2beacd4f3">future_status</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="aeaacbde3b6cc8e4622e1aae2beacd4f3ab2fdab230a2c39f3595a947861863cb7"></a>ready</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aeaacbde3b6cc8e4622e1aae2beacd4f3a90272dda245ae1fb3cf197e91a8689dc"></a>timeout</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aeaacbde3b6cc8e4622e1aae2beacd4f3a43fff3df3fc0b3417c86dc3040fb2d86"></a>deferred</em>&nbsp;</td><td class="fielddoc">
</td></tr>
</table>

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l00421">421</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9b3224d19f20667b3b24145a7b395a33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33">launch</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a9b3224d19f20667b3b24145a7b395a33a334c4a4c42fdb79d7ebc3e73b517e6f8"></a>none</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a9b3224d19f20667b3b24145a7b395a33a0df93e34273b367bb63bad28c94c78d5"></a>async</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a9b3224d19f20667b3b24145a7b395a33a43fff3df3fc0b3417c86dc3040fb2d86"></a>deferred</em>&nbsp;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a9b3224d19f20667b3b24145a7b395a33a100b8cad7cf2a56f6df78f171f97a1ec"></a>any</em>&nbsp;</td><td class="fielddoc">
</td></tr>
</table>

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l00413">413</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a6b6ffe33d42cba7aea1c08df3c028ffd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Iter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void __lock_iter </td>
          <td>(</td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01569">1569</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a538f0928c47290d356bc45947f88a7c1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Fut , class _Rp , class _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_async_continuation_shared_state </td>
          <td>(</td>
          <td class="paramtype">std::unique_lock&lt; std::mutex &gt; &amp;&#160;</td>
          <td class="paramname"><em>__lk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fut &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03925">3925</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3281eaa8120576a87a102b5a362e7216"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Fut , typename _Rp , typename _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_async_continuation_shared_state </td>
          <td>(</td>
          <td class="paramtype">std::unique_lock&lt; std::mutex &gt; &amp;&#160;</td>
          <td class="paramname"><em>__lk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fut &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03925">3925</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a307f0bc2dfe34ad70e5ee042197898de"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Rp , class _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_async_shared_state </td>
          <td>(</td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03537">3537</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad7a575276abac4581bc57f18ab79c9a5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Rp , class _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_async_shared_state </td>
          <td>(</td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03537">3537</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5bff88753c567e6d527fd826d5f03b70"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Fut , class _Rp , class _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_deferred_continuation_shared_state </td>
          <td>(</td>
          <td class="paramtype">std::unique_lock&lt; std::mutex &gt; &amp;&#160;</td>
          <td class="paramname"><em>__lk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fut &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03916">3916</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a07c45ba4c25b7bc6b721f7510ca3db15"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Fut , typename _Rp , typename _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_deferred_continuation_shared_state </td>
          <td>(</td>
          <td class="paramtype">std::unique_lock&lt; std::mutex &gt; &amp;&#160;</td>
          <td class="paramname"><em>__lk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fut &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03916">3916</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3ffa8fac03ea4c605f8d1675d75082e8"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Rp , class _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_deferred_shared_state </td>
          <td>(</td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03529">3529</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae10d8b0169dd1ecea0c8c92a25b4b25f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Rp , class _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">EPUB3_BEGIN_NAMESPACE <a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_deferred_shared_state </td>
          <td>(</td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03529">3529</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="af58f0fdbd7a64c3a302aae55fcd76bf1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Fut , class _Rp , class _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_executor_continuation_shared_state </td>
          <td>(</td>
          <td class="paramtype">std::unique_lock&lt; std::mutex &gt; &amp;&#160;</td>
          <td class="paramname"><em>__lk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fut &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classexecutor.xhtml">executor</a> *&#160;</td>
          <td class="paramname"><em>__e</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03934">3934</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4c6e0aa6d2e44bfb41aeca7c56d63630"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Fut , typename _Rp , typename _Fp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_executor_continuation_shared_state </td>
          <td>(</td>
          <td class="paramtype">std::unique_lock&lt; std::mutex &gt; &amp;&#160;</td>
          <td class="paramname"><em>__lk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fut &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classexecutor.xhtml">executor</a> *&#160;</td>
          <td class="paramname"><em>__exec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03934">3934</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad7c328ff47c8e3533aca1b791935294a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Fut , class _Rp &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;_Rp&gt; __make_future_unwrap_shared_state </td>
          <td>(</td>
          <td class="paramtype">std::unique_lock&lt; std::mutex &gt; &amp;&#160;</td>
          <td class="paramname"><em>__lk</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fut &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a6caf48dc1987f22d9245148c82e154b2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Iter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">_Iter __try_lock_iter </td>
          <td>(</td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01551">1551</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="abb3e62fb4f669ea319c9efdb1383a50b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Fp , class... _Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfuture.xhtml">future</a>&lt;typename <a class="el" href="struct____invoke__of.xhtml">__invoke_of</a>&lt;typename std::decay&lt;_Fp&gt;::type, typename std::decay&lt;_Args&gt;::type...&gt;::type&gt; async </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="future_8h.xhtml#a9b3224d19f20667b3b24145a7b395a33">launch</a>&#160;</td>
          <td class="paramname"><em>__policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>__args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03552">3552</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1b3c6b531e6c7dd4928ea43a497ad8bb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class _Fp , class... _Args&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfuture.xhtml">future</a>&lt;typename <a class="el" href="struct____invoke__of.xhtml">__invoke_of</a>&lt;typename std::decay&lt;_Fp&gt;::type, typename std::decay&lt;_Args&gt;::type...&gt;::type&gt; async </td>
          <td>(</td>
          <td class="paramtype">_Fp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Args &amp;&amp;...&#160;</td>
          <td class="paramname"><em>__args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03572">3572</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4987ae456986b572cccd6293782d2a8c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::error_category&amp; future_category </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="future_8cpp_source.xhtml">future.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a55b152286bfb6d7a79b213686bc41753"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;typename std::decay&lt;_Tp&gt;::type&gt; make_ready_future </td>
          <td>(</td>
          <td class="paramtype">_Tp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03580">3580</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="aff5f96052049a0807ed8297ba1a640b3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;void&gt; make_ready_future </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03591">3591</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a49b0011780f3dbbf573fc36e1ccda419"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classfuture.xhtml">future</a>&lt;_Tp&gt; make_ready_future </td>
          <td>(</td>
          <td class="paramtype">std::exception_ptr&#160;</td>
          <td class="paramname"><em>__exc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03606">3606</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab437fa2ffdc0eb8f713ad3ca5d12f9f3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , typename _E &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt; !std::is_same&lt;_Tp, _E&gt;::value, <a class="el" href="classfuture.xhtml">future</a>&lt;_Tp&gt;&gt;::type make_ready_future </td>
          <td>(</td>
          <td class="paramtype">_E&#160;</td>
          <td class="paramname"><em>__exc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03622">3622</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4169b82c2ce96c1aaee8e3a17b621250"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classshared__future.xhtml">shared_future</a>&lt;typename std::decay&lt;_Tp&gt;::type&gt; make_ready_shared_future </td>
          <td>(</td>
          <td class="paramtype">_Tp &amp;&amp;&#160;</td>
          <td class="paramname"><em>__v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03634">3634</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a0953dba322348d09c60c8bb448beaf26"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classshared__future.xhtml">shared_future</a>&lt;void&gt; make_ready_shared_future </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03645">3645</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a8904e965fe5c83fcfb9f22aed1c69a2d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="el" href="classshared__future.xhtml">shared_future</a>&lt;_Tp&gt; make_ready_shared_future </td>
          <td>(</td>
          <td class="paramtype">std::exception_ptr&#160;</td>
          <td class="paramname"><em>__exc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03660">3660</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a7b9722cc836b35712b3a6a90ebadf0c2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , typename _E &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt; !std::is_same&lt;_Tp, _E&gt;::value, <a class="el" href="classshared__future.xhtml">shared_future</a>&lt;_Tp&gt;&gt;::type make_ready_shared_future </td>
          <td>(</td>
          <td class="paramtype">_E&#160;</td>
          <td class="paramname"><em>__e</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l03676">3676</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac1aa5ed13b6c7fce9675736b1cb83857"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Iter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt;!<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt;_Iter&gt;::value, void&gt;::type wait_for_all </td>
          <td>(</td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01738">1738</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="aeb6802c3b31b9fb0bec83eedbf65243b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _F1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt;<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt;_F1&gt;::value, void&gt;::type wait_for_all </td>
          <td>(</td>
          <td class="paramtype">_F1 &amp;&#160;</td>
          <td class="paramname"><em>__f1</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01747">1747</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4bf45797312faffe74a7857e412193ec"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _F1 , typename... _F2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt;<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt;_F1&gt;::value, void&gt;::type wait_for_all </td>
          <td>(</td>
          <td class="paramtype">_F1 &amp;&#160;</td>
          <td class="paramname"><em>__f1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_F2 &amp;&amp;...&#160;</td>
          <td class="paramname"><em>__f2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01756">1756</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1539919f1272bffac39de9a3483d0e36"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Iter &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt;!<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt;_Iter&gt;::value, _Iter&gt;::type wait_for_any </td>
          <td>(</td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_Iter&#160;</td>
          <td class="paramname"><em>__e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01765">1765</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3d9aa3e72734cdb97f8fef22bf3c9994"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _F1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt;<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt;_F1&gt;::value, unsigned&gt;::type wait_for_any </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class____future__waiter.xhtml">__future_waiter</a> &amp;&#160;</td>
          <td class="paramname"><em>__w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_F1 &amp;&#160;</td>
          <td class="paramname"><em>__f1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01779">1779</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae827f2410435c7914ed9ecce1a82d7f3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _F1 , typename... _F2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> std::enable_if&lt;<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt;_F1&gt;::value, unsigned&gt;::type wait_for_any </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class____future__waiter.xhtml">__future_waiter</a> &amp;&#160;</td>
          <td class="paramname"><em>__w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_F1 &amp;&#160;</td>
          <td class="paramname"><em>__f1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_F2 &amp;&amp;...&#160;</td>
          <td class="paramname"><em>__f2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01788">1788</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9854c61e5d46ef7ff8dc697cd78f4a71"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _F1 , typename... _F2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;<a class="el" href="structis__future__type.xhtml">is_future_type</a>&lt;_F1&gt;::value, unsigned&gt;::type wait_for_any </td>
          <td>(</td>
          <td class="paramtype">_F1 &amp;&#160;</td>
          <td class="paramname"><em>__f1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">_F2 &amp;&amp;...&#160;</td>
          <td class="paramname"><em>__f2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="future_8h_source.xhtml#l01796">1796</a> of file <a class="el" href="future_8h_source.xhtml">future.h</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="future_8h.xhtml">future.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:41 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
