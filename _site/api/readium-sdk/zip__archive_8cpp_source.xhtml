<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/ePub/zip_archive.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('zip__archive_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">zip_archive.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="zip__archive_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  zip_archive.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-11-27.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="zip__archive_8h.xhtml">zip_archive.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;libzip/zipint.h&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="byte__stream_8h.xhtml">byte_stream.h</a>&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="make__unique_8h.xhtml">make_unique.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if EPUB_OS(UNIX)</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;unistd.h&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;fcntl.h&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#if EPUB_OS(WINDOWS)</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;windows.h&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#if EPUB_OS(ANDROID)</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> <span class="keywordtype">char</span>* gAndroidCacheDir;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">static</span> <span class="keywordtype">string</span> GetTempFilePath(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; ext)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WIN)</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor"></span>    TCHAR tmpPath[MAX_PATH];</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    TCHAR tmpFile[MAX_PATH];</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    DWORD pathLen = ::GetTempPath(MAX_PATH, tmpPath);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> ( pathLen == 0 || pathLen &gt; MAX_PATH )</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">throw</span> std::system_error(static_cast&lt;int&gt;(::GetLastError()), std::system_category());</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    UINT fileLen = ::GetTempFileName(tmpPath, TEXT(<span class="stringliteral">&quot;ZIP&quot;</span>), 0, tmpFile);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> ( fileLen == 0 )</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">throw</span> std::system_error(static_cast&lt;int&gt;(::GetLastError()), std::system_category());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">string</span> r(tmpFile);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#elif EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor"></span>    <span class="keyword">using</span> ToUTF8 = std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt;;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">auto</span> tempFolder = ::Windows::Storage::ApplicationData::Current-&gt;TemporaryFolder;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    std::wstring tempFolderPath(tempFolder-&gt;Path-&gt;Data(), tempFolder-&gt;Path-&gt;Length());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::wstringstream ss;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    ss &lt;&lt; tempFolderPath;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    ss &lt;&lt; TEXT(<span class="stringliteral">&quot;\\epub3.&quot;</span>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    ss &lt;&lt; Windows::Security::Cryptography::CryptographicBuffer::GenerateRandomNumber();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    ss &lt;&lt; TEXT(<span class="stringliteral">&quot;.&quot;</span>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    ss &lt;&lt; ToUTF8().from_bytes(ext.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>());</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> ToUTF8().to_bytes(ss.str());</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor"></span>    std::stringstream ss;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#if EPUB_OS(ANDROID)</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor"></span>    ss &lt;&lt; gAndroidCacheDir &lt;&lt; <span class="stringliteral">&quot;epub3.XXXXXX&quot;</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor"></span>    ss &lt;&lt; <span class="stringliteral">&quot;/tmp/epub3.XXXXXX.&quot;</span> &lt;&lt; ext;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> path(ss.str());</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">char</span> *buf = <span class="keyword">new</span> <span class="keywordtype">char</span>[path.length()];</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::char_traits&lt;char&gt;::copy(buf, ss.str().c_str(), <span class="keyword">sizeof</span>(buf));</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#if EPUB_OS(ANDROID)</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">int</span> fd = ::mkstemp(buf);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">int</span> fd = ::mkstemps(buf, static_cast&lt;int&gt;(ext.size()+1));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> ( fd == -1 )</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">throw</span> std::runtime_error(std::string(<span class="stringliteral">&quot;mkstemp() failed: &quot;</span>) + strerror(errno));</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    ::close(fd);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(buf);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml">   97</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_zip_reader.xhtml">ZipReader</a> : <span class="keyword">public</span> <a class="code" href="class_archive_reader.xhtml">ArchiveReader</a></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml#a72068c625cfcc13dc55ac8e3086a46a7">  100</a></span>&#160;    <a class="code" href="class_zip_reader.xhtml#a72068c625cfcc13dc55ac8e3086a46a7">ZipReader</a>(<span class="keyword">struct</span> zip_file* file) : _file(file), _total_size(_file-&gt;bytes_left) {}</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml#a75f46d6e234ab738e8728e484054c0c2">  101</a></span>&#160;    <a class="code" href="class_zip_reader.xhtml#a75f46d6e234ab738e8728e484054c0c2">ZipReader</a>(<a class="code" href="class_zip_reader.xhtml">ZipReader</a>&amp;&amp; o) : _file(o._file) { o._file = <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml#ac1c4de22c3257d29216965c76ebf4cad">  102</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_zip_reader.xhtml#ac1c4de22c3257d29216965c76ebf4cad">~ZipReader</a>() { <span class="keywordflow">if</span> (_file != <span class="keyword">nullptr</span>) zip_fclose(_file); }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml#ade832f436e78ea8d615752d7400db566">  104</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_zip_reader.xhtml#ade832f436e78ea8d615752d7400db566" title="Returns true if reading is possible (i.e. no error has occurred).">operator !</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _file == <span class="keyword">nullptr</span> || _file-&gt;bytes_left == 0; }</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml#a1abbf97efe5e01fadb6d99e1ebdab022">  105</a></span>&#160;    <span class="keyword">virtual</span> ssize_t <a class="code" href="class_zip_reader.xhtml#a1abbf97efe5e01fadb6d99e1ebdab022">read</a>(<span class="keywordtype">void</span>* p, <span class="keywordtype">size_t</span> len)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> zip_fread(_file, p, len); }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml#af0a58ddc76e1f2290141b5ca20d2ed64">  107</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_zip_reader.xhtml#af0a58ddc76e1f2290141b5ca20d2ed64">total_size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _total_size; }</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="code" href="class_zip_reader.xhtml#a996e5307f7207b68f241f56617998b6a">  108</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_zip_reader.xhtml#a996e5307f7207b68f241f56617998b6a">position</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _total_size - _file-&gt;bytes_left; }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">struct </span>zip_file * _file;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">size_t</span> _total_size;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;};</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml">  115</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_zip_writer.xhtml">ZipWriter</a> : <span class="keyword">public</span> <a class="code" href="class_archive_writer.xhtml">ArchiveWriter</a></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">class </span>DataBlob</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        DataBlob() : _tmpPath(GetTempFilePath(<span class="stringliteral">&quot;tmp&quot;</span>)), _fs(_tmpPath.c_str(), std::ios::in|std::ios::out|std::ios::binary|std::ios::trunc) {}</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        DataBlob(DataBlob&amp;&amp; o) : _tmpPath(std::move(o._tmpPath)), _fs(_tmpPath.c_str(), std::ios::in|std::ios::out|std::ios::binary|std::ios::trunc) {}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        ~DataBlob() {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            _fs.close();</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#if EPUB_OS(WINDOWS)</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor"></span>            ::_unlink(_tmpPath.c_str());</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor"></span>            ::unlink(_tmpPath.c_str());</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor"></span>        }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordtype">void</span> Append(<span class="keyword">const</span> <span class="keywordtype">void</span> * data, <span class="keywordtype">size_t</span> len);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordtype">size_t</span> Read(<span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> len);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordtype">size_t</span> Size() { <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(_fs.tellp()); }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordtype">size_t</span> Size()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>DataBlob*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;Size(); }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordtype">size_t</span> Avail() { <span class="keywordflow">return</span> Size() - <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(_fs.tellg()); }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordtype">size_t</span> Avail()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>DataBlob*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;Avail(); }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordtype">string</span>          _tmpPath;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        std::fstream    _fs;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        DataBlob(<span class="keyword">const</span> DataBlob&amp;) <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    };</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="class_zip_writer.xhtml#a7463e60cdc982217a65fc8dcf6128384">ZipWriter</a>(<span class="keyword">struct</span> zip* zip, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path, <span class="keywordtype">bool</span> compressed);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="class_zip_writer.xhtml#a7463e60cdc982217a65fc8dcf6128384">ZipWriter</a>(<a class="code" href="class_zip_writer.xhtml">ZipWriter</a>&amp;&amp; o);</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#af67e7bba48741c5b07aa554a02ecde7c">  149</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_zip_writer.xhtml#af67e7bba48741c5b07aa554a02ecde7c">~ZipWriter</a>() { <span class="keywordflow">if</span> (<a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a> != <span class="keyword">nullptr</span>) zip_source_free(<a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a>); }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    </div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#ab9113d1f020ab5b5521ebf9bfd3a5b7b">  151</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="class_zip_writer.xhtml#ab9113d1f020ab5b5521ebf9bfd3a5b7b" title="Returns true if writing is possible (i.e. no error has occurred).">operator !</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#aab1006aef785165887f53ae318cecf3e">  152</a></span>&#160;    <span class="keyword">virtual</span> ssize_t <a class="code" href="class_zip_writer.xhtml#aab1006aef785165887f53ae318cecf3e">write</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *p, <span class="keywordtype">size_t</span> len) { <a class="code" href="class_zip_writer.xhtml#a7a87b7de874279ae9423bec5291f5d68">_data</a>.Append(p, len); <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>ssize_t<span class="keyword">&gt;</span>(len); }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    </div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a85aea93e70d3df5313cac1d53c4a3e3f">  154</a></span>&#160;    <span class="keyword">struct </span>zip_source* <a class="code" href="class_zip_writer.xhtml#a85aea93e70d3df5313cac1d53c4a3e3f">ZipSource</a>() { <span class="keywordflow">return</span> <a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a>; }</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a6c034f84fd4482d24af9357096264fc8">  155</a></span>&#160;    <span class="keyword">const</span> <span class="keyword">struct </span>zip_source* <a class="code" href="class_zip_writer.xhtml#a6c034f84fd4482d24af9357096264fc8">ZipSource</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a>; }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a7e605d086149881df7722535ae5dd957">  157</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_zip_writer.xhtml#a7e605d086149881df7722535ae5dd957">total_size</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="class_zip_writer.xhtml#a7a87b7de874279ae9423bec5291f5d68">_data</a>.Size(); }</div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#afe99096adf87d1e125aff462bdb90afb">  158</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> <a class="code" href="class_zip_writer.xhtml#afe99096adf87d1e125aff462bdb90afb">position</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="class_zip_writer.xhtml#a7a87b7de874279ae9423bec5291f5d68">_data</a>.Size(); }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a18fc95781bcdbc16d39676189b28a7ed">  161</a></span>&#160;    <span class="keywordtype">bool</span>                <a class="code" href="class_zip_writer.xhtml#a18fc95781bcdbc16d39676189b28a7ed">_compressed</a>;</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a7a87b7de874279ae9423bec5291f5d68">  162</a></span>&#160;    DataBlob            <a class="code" href="class_zip_writer.xhtml#a7a87b7de874279ae9423bec5291f5d68">_data</a>;</div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">  163</a></span>&#160;    <span class="keyword">struct </span>zip_source*  <a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a>;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">static</span> ssize_t <a class="code" href="class_zip_writer.xhtml#a023f0173967cbfd965abd2d0d68de1f3">_source_callback</a>(<span class="keywordtype">void</span> *<a class="code" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821">state</a>, <span class="keywordtype">void</span> *data, <span class="keywordtype">size_t</span> len, <span class="keyword">enum</span> zip_source_cmd cmd);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;};</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;ZipArchive::ZipItemInfo::ZipItemInfo(<span class="keyword">struct</span> zip_stat &amp; info) : <a class="code" href="class_archive_item_info.xhtml">ArchiveItemInfo</a>()</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    SetPath(info.name);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    SetIsCompressed(info.comp_method == ZIP_CM_STORE);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    SetCompressedSize(static_cast&lt;size_t&gt;(info.comp_size));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    SetUncompressedSize(static_cast&lt;size_t&gt;(info.size));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keywordtype">string</span> ZipArchive::TempFilePath()</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span> GetTempFilePath(<span class="stringliteral">&quot;zip&quot;</span>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a1c654854a6941fc00080e3563dcf35fd">  181</a></span>&#160;<a class="code" href="class_zip_archive.xhtml#a1c654854a6941fc00080e3563dcf35fd" title="Opens the ZipArchive at a given filesystem path.">ZipArchive::ZipArchive</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; path)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">int</span> zerr = 0;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a> = zip_open(path.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), ZIP_CREATE, &amp;zerr);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a> == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">throw</span> std::runtime_error(std::string(<span class="stringliteral">&quot;zip_open() failed: &quot;</span>) + zError(zerr));</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="class_archive.xhtml#af2a793433a33f007c69accbffdf044d4" title="The path to the archive file.">_path</a> = path;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a384754cb68b9a6a3a0c922eefd3d4317">  189</a></span>&#160;<a class="code" href="class_zip_archive.xhtml#a384754cb68b9a6a3a0c922eefd3d4317">ZipArchive::~ZipArchive</a>()</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a> != <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        zip_close(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a53384f9b71f7043a5e8686ec3e833c54">  194</a></span>&#160;<a class="code" href="class_archive.xhtml">Archive</a> &amp; <a class="code" href="class_zip_archive.xhtml#a53384f9b71f7043a5e8686ec3e833c54" title="Move assignment.">ZipArchive::operator = </a>(<a class="code" href="class_zip_archive.xhtml">ZipArchive</a> &amp;&amp;o)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a> != <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        zip_close(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a> = o._zip;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    o._zip = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">dynamic_cast&lt;</span><a class="code" href="class_archive.xhtml">Archive</a>&amp;<span class="keyword">&gt;</span>(*this);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a4fbc7f6eda61a46cbbe65f7cb931d6bb">  202</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="class_zip_archive.xhtml#a4fbc7f6eda61a46cbbe65f7cb931d6bb">ZipArchive::EachItem</a>(std::function&lt;<span class="keywordtype">void</span> (<span class="keyword">const</span> <a class="code" href="class_archive_item_info.xhtml">ArchiveItemInfo</a> &amp;)&gt; fn)<span class="keyword"> const</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">struct </span>zip_stat zinfo = {0};</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    zip_stat_init(&amp;zinfo);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0, n = zip_get_num_files(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>); i &lt; n; i++)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">if</span> (zip_stat_index(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, i, 0, &amp;zinfo) &lt; 0)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        ZipItemInfo info(zinfo);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        fn(info);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#ac4767eb147c16f9d1ae17ed2a502ded3">  215</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_zip_archive.xhtml#ac4767eb147c16f9d1ae17ed2a502ded3">ZipArchive::ContainsItem</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; path)<span class="keyword"> const</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> (zip_name_locate(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, Sanitized(path).c_str(), 0) &gt;= 0);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a808ef27c0692265a8b1ba3ea15b97af2">  219</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_zip_archive.xhtml#a808ef27c0692265a8b1ba3ea15b97af2">ZipArchive::DeleteItem</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; path)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">int</span> idx = zip_name_locate(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, Sanitized(path).c_str(), 0);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span> ( idx &gt;= 0 )</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">return</span> (zip_delete(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, idx) &gt;= 0);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a04f6bb7ecb71cbb50bdb8a4ce2a694b2">  226</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_zip_archive.xhtml#a04f6bb7ecb71cbb50bdb8a4ce2a694b2">ZipArchive::CreateFolder</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; path)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> (zip_add_dir(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, Sanitized(path).c_str()) &gt;= 0);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a08f8fab2595be221adce3fcb6661fc3f">  230</a></span>&#160;unique_ptr&lt;ByteStream&gt; <a class="code" href="class_zip_archive.xhtml#a08f8fab2595be221adce3fcb6661fc3f">ZipArchive::ByteStreamAtPath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;path)<span class="keyword"> const</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> make_unique&lt;ZipFileByteStream&gt;(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, path);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">#ifdef SUPPORT_ASYNC</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor"></span>unique_ptr&lt;AsyncByteStream&gt; ZipArchive::AsyncByteStreamAtPath(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path)<span class="keyword"> const</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">return</span> make_unique&lt;AsyncZipFileByteStream&gt;(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, path);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_ASYNC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a2a05bdbd0faffe3d063f04b77e96621e">  242</a></span>&#160;unique_ptr&lt;ArchiveReader&gt; <a class="code" href="class_zip_archive.xhtml#a2a05bdbd0faffe3d063f04b77e96621e">ZipArchive::ReaderAtPath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; path)<span class="keyword"> const</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a> == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">struct </span>zip_file* file = zip_fopen(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, Sanitized(path).c_str(), 0);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">if</span> (file == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> unique_ptr&lt;ZipReader&gt;(<span class="keyword">new</span> <a class="code" href="class_zip_reader.xhtml">ZipReader</a>(file));</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a1de8da8761aa2a0a13e9b66d2b2f5f5f">  254</a></span>&#160;unique_ptr&lt;ArchiveWriter&gt; <a class="code" href="class_zip_archive.xhtml#a1de8da8761aa2a0a13e9b66d2b2f5f5f">ZipArchive::WriterAtPath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; path, <span class="keywordtype">bool</span> compressed, <span class="keywordtype">bool</span> create)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a> == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordtype">int</span> idx = zip_name_locate(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, Sanitized(path).c_str(), (create ? ZIP_CREATE : 0));</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">if</span> (idx == -1)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="class_zip_writer.xhtml">ZipWriter</a>* writer = <span class="keyword">new</span> <a class="code" href="class_zip_writer.xhtml">ZipWriter</a>(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, Sanitized(path), compressed);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">if</span> ( zip_replace(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, idx, writer-&gt;<a class="code" href="class_zip_writer.xhtml#a85aea93e70d3df5313cac1d53c4a3e3f">ZipSource</a>()) == -1 )</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keyword">delete</span> writer;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> unique_ptr&lt;ZipWriter&gt;(writer);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div>
<div class="line"><a name="l00272"></a><span class="lineno"><a class="code" href="class_zip_archive.xhtml#a6257996d788aa8c0a3b6e34ae6299248">  272</a></span>&#160;<a class="code" href="class_archive_item_info.xhtml">ArchiveItemInfo</a> <a class="code" href="class_zip_archive.xhtml#a6257996d788aa8c0a3b6e34ae6299248">ZipArchive::InfoAtPath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; path)<span class="keyword"> const</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">struct </span>zip_stat sbuf;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">if</span> ( zip_stat(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>, Sanitized(path).c_str(), 0, &amp;sbuf) &lt; 0 )</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">throw</span> std::runtime_error(std::string(<span class="stringliteral">&quot;zip_stat(&quot;</span>+path.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>()+<span class="stringliteral">&quot;) - &quot;</span> + zip_strerror(<a class="code" href="class_zip_archive.xhtml#ae36daa8ad3942426c35f70fb9f18f627" title="Pointer to the underlying libzip data type.">_zip</a>)));</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> ZipItemInfo(sbuf);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keywordtype">void</span> ZipWriter::DataBlob::Append(<span class="keyword">const</span> <span class="keywordtype">void</span> *data, <span class="keywordtype">size_t</span> len)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    _fs.write(reinterpret_cast&lt;const std::fstream::char_type *&gt;(data), len);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordtype">size_t</span> ZipWriter::DataBlob::Read(<span class="keywordtype">void</span> *data, <span class="keywordtype">size_t</span> len)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">if</span> ( _fs.tellg() == std::streamsize(0) )</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        _fs.flush();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(_fs.readsome(reinterpret_cast&lt;std::fstream::char_type *&gt;(data), len));</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a7463e60cdc982217a65fc8dcf6128384">  291</a></span>&#160;<a class="code" href="class_zip_writer.xhtml#a7463e60cdc982217a65fc8dcf6128384">ZipWriter::ZipWriter</a>(<span class="keyword">struct</span> zip *zip, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; path, <span class="keywordtype">bool</span> compressed)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    : _compressed(compressed)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a> = zip_source_function(zip, &amp;<a class="code" href="class_zip_writer.xhtml#a023f0173967cbfd965abd2d0d68de1f3">ZipWriter::_source_callback</a>, reinterpret_cast&lt;void*&gt;(<span class="keyword">this</span>));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a98cfa8b6d621e5967122eda890f54e09">  296</a></span>&#160;<a class="code" href="class_zip_writer.xhtml#a7463e60cdc982217a65fc8dcf6128384">ZipWriter::ZipWriter</a>(<a class="code" href="class_zip_writer.xhtml">ZipWriter</a>&amp;&amp; o) : _compressed(o._compressed), _data(std::move(o._data)), _zsrc(o._zsrc)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;{</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    o._zsrc = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a>-&gt;ud = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;}</div>
<div class="line"><a name="l00301"></a><span class="lineno"><a class="code" href="class_zip_writer.xhtml#a023f0173967cbfd965abd2d0d68de1f3">  301</a></span>&#160;ssize_t <a class="code" href="class_zip_writer.xhtml#a023f0173967cbfd965abd2d0d68de1f3">ZipWriter::_source_callback</a>(<span class="keywordtype">void</span> *<a class="code" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821">state</a>, <span class="keywordtype">void</span> *data, <span class="keywordtype">size_t</span> len, <span class="keyword">enum</span> zip_source_cmd cmd)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    ssize_t r = 0;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="class_zip_writer.xhtml">ZipWriter</a> * writer = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="class_zip_writer.xhtml">ZipWriter</a>*<span class="keyword">&gt;</span>(<a class="code" href="namespace____future__state.xhtml#ae989a8c9d02a1fcd02e3faa8ebe93821">state</a>);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">switch</span> ( cmd )</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">case</span> ZIP_SOURCE_OPEN:</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keywordflow">if</span> ( !(*writer) )</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">case</span> ZIP_SOURCE_CLOSE:</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">case</span> ZIP_SOURCE_STAT:</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="keywordflow">if</span> (len &lt; <span class="keyword">sizeof</span>(<span class="keyword">struct</span> zip_stat))</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keyword">struct </span>zip_stat *st = <span class="keyword">reinterpret_cast&lt;</span>struct zip_stat*<span class="keyword">&gt;</span>(data);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            zip_stat_init(st);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            st-&gt;mtime = ::time(NULL);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            st-&gt;size = <span class="keyword">static_cast&lt;</span>off_t<span class="keyword">&gt;</span>(writer-&gt;<a class="code" href="class_zip_writer.xhtml#a7a87b7de874279ae9423bec5291f5d68">_data</a>.Size());</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            st-&gt;comp_method = (writer-&gt;<a class="code" href="class_zip_writer.xhtml#a18fc95781bcdbc16d39676189b28a7ed">_compressed</a> ? ZIP_CM_DEFLATE : ZIP_CM_STORE);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            r = <span class="keyword">sizeof</span>(<span class="keyword">struct </span>zip_stat);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">case</span> ZIP_SOURCE_ERROR:</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">if</span> ( len &lt; <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)*2 )</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordtype">int</span> *p = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">int</span>*<span class="keyword">&gt;</span>(data);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            p[0] = p[1] = 0;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            r = <span class="keyword">sizeof</span>(int)*2;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">case</span> ZIP_SOURCE_READ:</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            r = <span class="keyword">static_cast&lt;</span>ssize_t<span class="keyword">&gt;</span>(writer-&gt;<a class="code" href="class_zip_writer.xhtml#a7a87b7de874279ae9423bec5291f5d68">_data</a>.Read(data, len));</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">case</span> ZIP_SOURCE_FREE:</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="comment">// the caller will free this</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            writer-&gt;<a class="code" href="class_zip_writer.xhtml#a6ef6384e3563dbc0d2953022cd4c6003">_zsrc</a> = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keyword">delete</span> writer;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;EPUB3_END_NAMESPACE</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d81697a4833f1d44a7e9bc8387132cc4.xhtml">ePub</a></li><li class="navelem"><a class="el" href="zip__archive_8cpp.xhtml">zip_archive.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
