<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/xml/tree/node_win.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('node__win_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">node_win.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="node__win_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  node_win.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-09-24.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="node_8h.xhtml">node.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;../validation/ns.h&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="xpath_8h.xhtml">xpath.h</a>&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="document_8h.xhtml">document.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;../validation/dtd.h&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// for IIterator</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;collection.h&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">using namespace </span>Windows::Data::Xml::Dom;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<a class="code" href="xml_2utilities_2base_8h.xhtml#aad3f08b1d0c77112eed0e2524e14be9d">EPUB3_XML_BEGIN_NAMESPACE</a></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="code" href="node__win_8cpp.xhtml#abbb651a7954f3f44ae6c624a45daaf0e">   38</a></span>&#160;std::string <a class="code" href="group__xml-utils.xhtml#gab535f74b89ff9a60f8bf1149bc835d80">TypeString</a>(<a class="code" href="group__tree.xhtml#ga94dfb1c8fbb2b0291508beb395b7affa">xml::NodeType</a> type)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    std::string r;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#define _TYPESTR(x) case xml::NodeType::x: r = #x; break;</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">switch</span> (type)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="class_element.xhtml">Element</a>);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaaf2bbdf9f72c085adc4d0404e370f0f4c">Attribute</a>);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa9dffbf69ffba8bc38bc4e01abf4b1675">Text</a>);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa124734c355b3a980576fe104fad14630">CDATASection</a>);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaab192d9a33a15ffbfddc4ce45d2201590">EntityReference</a>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa1a434befae3f49ae09347ded52032f6f">Entity</a>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa2b9f6898f2b04eda17c66078f58467bc">ProcessingInstruction</a>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa0be8406951cdfda82f00f79328cf4efc">Comment</a>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="class_document.xhtml">Document</a>);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaaa3e4a918932e72ec84ec065eb5100c22">DocumentType</a>);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa390cd63297605bcda8092de386afe7a2">DocumentFragment</a>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa7e015b62703c0b31707f9a9dbf81db4f">Notation</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor"></span>        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa6df553a9c9197eb6d2df6ff7f88d6b6a">HTMLDocument</a>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="class_d_t_d.xhtml">DTD</a>);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa4ef6580e339c8d7a1b95676683e3959e">ElementDeclaration</a>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa76950f2ca8c0c443c252dbf12f7af814">AttributeDeclaration</a>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaabc0d2af642920625f02a7ec600cf6a40">EntityDeclaration</a>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaabd520411b2a43ba447d55b681a2797f7">NamespaceDeclaration</a>);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa4cacd3733f59366bf21702728beeccb3">XIncludeStart</a>);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(<a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaabeedff67463c5b01092b8a1231feeaf7">XIncludeEnd</a>);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#ifdef LIBXML_DOCBOOK_ENABLED</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor"></span>        <a class="code" href="node_8cpp.xhtml#a71a4b9a90eb78e37185e6f09e1490212">_TYPESTR</a>(DocbookSGMLDocument);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="code" href="class_node.xhtml#afbdc89eb4079e1d6ce50380a72556b7c">   76</a></span>&#160;<a class="code" href="class_node.xhtml#afbdc89eb4079e1d6ce50380a72556b7c">Node::Node</a>(NativePtr xml) : _xml(xml)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor"></span><a class="code" href="class_node.xhtml#afbdc89eb4079e1d6ce50380a72556b7c">Node::Node</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; name, <a class="code" href="group__tree.xhtml#ga94dfb1c8fbb2b0291508beb395b7affa">NodeType</a> type, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; content, <span class="keyword">const</span> <span class="keyword">class</span> Namespace &amp; ns)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    NativePtr newNode = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">switch</span> (type)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa231afe47f3f37d3808096b36c28b4ded">NodeType::Element</a>:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// needs subclass</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa9dffbf69ffba8bc38bc4e01abf4b1675">NodeType::Text</a>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// needs subclass</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaaf2bbdf9f72c085adc4d0404e370f0f4c">NodeType::Attribute</a>:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Not Applicable</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa124734c355b3a980576fe104fad14630">NodeType::CDATASection</a>:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#ifdef LIBXML_DOCBOOK_ENABLED</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">case</span> NodeType::DocbookSGMLDocument:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa0945359809dad1fbf3dea1c95a0da951">NodeType::Document</a>:</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa390cd63297605bcda8092de386afe7a2">NodeType::DocumentFragment</a>:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa7d6c51c62232cfbc206eff4724c3442c">NodeType::DTD</a>:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa6df553a9c9197eb6d2df6ff7f88d6b6a">NodeType::HTMLDocument</a>:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">// need document ptr to create these</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa0be8406951cdfda82f00f79328cf4efc">NodeType::Comment</a>:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="comment">// needs subclass</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa2b9f6898f2b04eda17c66078f58467bc">NodeType::ProcessingInstruction</a>:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        newNode = xmlNewPI(name.<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>(), content.<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>());</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        newNode = xmlNewNode(const_cast&lt;_xmlNs*&gt;(ns.xml()), name.<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>());</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (newNode == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">throw</span> InvalidNodeType(std::string(<span class="stringliteral">&quot;NodeType &#39;&quot;</span>) + <a class="code" href="group__xml-utils.xhtml#gab535f74b89ff9a60f8bf1149bc835d80">TypeString</a>(type) + <span class="stringliteral">&quot;&#39; is not supported&quot;</span>);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a> = newNode;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;_private = <span class="keyword">this</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor"></span><a class="code" href="class_node.xhtml#afbdc89eb4079e1d6ce50380a72556b7c">Node::Node</a>(<a class="code" href="class_node.xhtml">Node</a> &amp;&amp; o) : _xml(o._xml) {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    o._xml = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<a class="code" href="class_node.xhtml#aa0840c3cb5c7159be6d992adecd2097c">Node::~Node</a>()</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Properties</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_node.xhtml#a8d86112090494d5c3d050f473396e3fe">Node::Name</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> __winstr(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;LocalName);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> Node::SetName(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;name)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    xmlNodeSetName(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>, name.<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>());</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> <a class="code" href="class_node.xhtml#a4c5e3967062c6f68e6bb9d466c8c07e6">Node::Content</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">auto</span> str = __winstr(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;InnerText);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span> (str == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>();</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> str;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> Node::SetContent(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;content)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    xmlNodeSetContent(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>, content.<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>());</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> <a class="code" href="class_node.xhtml#af6bbb51ec9ce9da94b7c89748aefb834">Node::AttributeValue</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; namespaceURI)<span class="keyword"> const</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_node.xhtml#a3e783b2fd7b38def126afa30cf25ae45">IsElementNode</a>() == <span class="keyword">false</span>)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    IXmlElement^ element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (element == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> (namespaceURI.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>())</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">return</span> element-&gt;GetAttribute(name);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">return</span> element-&gt;GetAttributeNS(namespaceURI, name);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;std::shared_ptr&lt;Namespace&gt; <a class="code" href="class_node.xhtml#a55aa0fdcd97cab4049a8b87c25db8590">Node::Namespace</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">switch</span> (<a class="code" href="class_node.xhtml#a1a6a9787af2a0443be2675e265e7c163">Type</a>())</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa0945359809dad1fbf3dea1c95a0da951">NodeType::Document</a>:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaaa3e4a918932e72ec84ec065eb5100c22">NodeType::DocumentType</a>:</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa390cd63297605bcda8092de386afe7a2">NodeType::DocumentFragment</a>:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa7d6c51c62232cfbc206eff4724c3442c">NodeType::DTD</a>:</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa124734c355b3a980576fe104fad14630">NodeType::CDATASection</a>:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2) &amp;&amp; defined(LIBXML_DOCBOOK_ENABLED)</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">case</span> NodeType::DocbookSGMLDocument:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa6df553a9c9197eb6d2df6ff7f88d6b6a">NodeType::HTMLDocument</a>:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="group__tree.xhtml#gga94dfb1c8fbb2b0291508beb395b7affaa2b9f6898f2b04eda17c66078f58467bc">NodeType::ProcessingInstruction</a>:</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="comment">// these types never have namespaces</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;class Namespace&gt;(std::const_pointer_cast&lt;<span class="keyword">class </span><a class="code" href="class_document.xhtml">Document</a>&gt;(<a class="code" href="class_document.xhtml">Document</a>()), __winstr(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;Prefix), __winstr(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;NamespaceUri));</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> Node::SetNamespace(<span class="keyword">const</span> <span class="keyword">class</span> <a class="code" href="class_node.xhtml#a55aa0fdcd97cab4049a8b87c25db8590">Namespace</a> *ns)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">auto</span> element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span> (element == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">auto</span> attr = element-&gt;GetAttributeNodeNS(XMLNSNamespace, ns-&gt;Prefix());</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span> (attr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        attr-&gt;NodeValue = ns-&gt;URI();</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((attr = element-&gt;GetAttributeNode(__TEXT(<span class="stringliteral">&quot;xmlns&quot;</span>))) != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        attr-&gt;NodeValue = ns-&gt;URI();</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ns-&gt;Prefix() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        element-&gt;Prefix = ns-&gt;Prefix();</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordtype">string</span> qname(__TEXT(<span class="stringliteral">&quot;xmlns&quot;</span>));</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        qname.append(ns-&gt;Prefix().Data, ns-&gt;Prefix.Length);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        element-&gt;SetAttributeNS(XMLNSNamespace, qname, ns-&gt;URI());</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        element-&gt;Prefix = __TEXT(<span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        element-&gt;SetAttribute(__TEXT(<span class="stringliteral">&quot;xmlns&quot;</span>), ns-&gt;URI());</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> <a class="code" href="class_node.xhtml#af6572c7c0964be35755402f589e18118">Node::Language</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">auto</span> native = GetAttributeValueRecursiveNS(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>, XMLNamespace, __TEXT(<span class="stringliteral">&quot;lang&quot;</span>));</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">if</span> (native == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>();</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(native);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> Node::SetLanguage(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;language)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">auto</span> element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">if</span> (element == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">auto</span> attr = element-&gt;GetAttributeNodeNS(XMLNamespace, __TEXT(<span class="stringliteral">&quot;lang&quot;</span>));</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">if</span> (attr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span> (language.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>())</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            element-&gt;RemoveAttributeNode(attr);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            attr-&gt;NodeValue = language;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!language.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>())</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        element-&gt;SetAttributeNS(XMLNamespace, __TEXT(<span class="stringliteral">&quot;xml:lang&quot;</span>), language);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor"></span><span class="keywordtype">bool</span> <a class="code" href="class_node.xhtml#a137fb379ade02653471ba3d4a2da191a">Node::PreserveSpace</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">auto</span> native = GetAttributeValueRecursiveNS(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>, XMLNamespace, __TEXT(<span class="stringliteral">&quot;space&quot;</span>));</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">return</span> native == __TEXT(<span class="stringliteral">&quot;preserve&quot;</span>);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> Node::SetPreserveSpace(<span class="keywordtype">bool</span> preserve)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">auto</span> element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">if</span> (element == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">auto</span> attr = element-&gt;GetAttributeNodeNS(XMLNamespace, __TEXT(<span class="stringliteral">&quot;space&quot;</span>));</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">if</span> (attr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        attr-&gt;NodeValue = (preserve ? __TEXT(<span class="stringliteral">&quot;preserve&quot;</span>) : __TEXT(<span class="stringliteral">&quot;default&quot;</span>));</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        element-&gt;SetAttributeNS(XMLNamespace, __TEXT(<span class="stringliteral">&quot;xml:space&quot;</span>), (preserve ? __TEXT(<span class="stringliteral">&quot;preserve&quot;</span>) : __TEXT(<span class="stringliteral">&quot;default&quot;</span>));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> <a class="code" href="class_node.xhtml#a7c02bd5a162beb5f7f63da683881c1ec">Node::BaseURL</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">auto</span> native = GetAttributeValueRecursiveNS(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>, XMLNamespace, __TEXT(<span class="stringliteral">&quot;base&quot;</span>));</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">if</span> (native == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>();</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(native);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;}</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> Node::SetBaseURL(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;baseURL)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">auto</span> element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">if</span> (element == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">auto</span> attr = element-&gt;GetAttributeNodeNS(XMLNamespace, __TEXT(<span class="stringliteral">&quot;base&quot;</span>));</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (attr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span> (baseURL.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>())</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            element-&gt;RemoveAttributeNode(attr);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            attr-&gt;NodeValue = baseURL;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!baseURL.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>())</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        element-&gt;SetAttributeNS(XMLNamespace, __TEXT(<span class="stringliteral">&quot;xml:base&quot;</span>), baseURL);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor"></span><a class="code" href="group__validation.xhtml#ga4d56589b82d0b58e6ee34f5bba2a8a35">NamespaceList</a> <a class="code" href="class_node.xhtml#ae046e5007a931ecc24a61b80000e9287">Node::NamespacesInScope</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="group__validation.xhtml#ga4d56589b82d0b58e6ee34f5bba2a8a35">NamespaceList</a> result;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">auto</span> element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">if</span> (element == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;ParentNode);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    std::map&lt;::Platform::String^, std::shared_ptr&lt;class Namespace&gt;&gt; nsmap;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">while</span> (element != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keyword">auto</span> prefix = __winstr(element-&gt;Prefix);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">if</span> (prefix-&gt;IsEmpty() == <span class="keyword">false</span>)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keyword">auto</span> uri = __winstr(element-&gt;NamespaceUri);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            nsmap[uri] = std::make_shared&lt;class Namespace&gt;(std::const_pointer_cast&lt;<span class="keyword">class </span><a class="code" href="class_document.xhtml">Document</a>&gt;(<a class="code" href="class_document.xhtml">Document</a>()), prefix, uri);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        element = <span class="keyword">dynamic_cast&lt;</span>IXmlElement^<span class="keyword">&gt;</span>(element-&gt;ParentNode);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pair : nsmap)</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        result.push_back(pair.second);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<a class="code" href="group__tree.xhtml#ga94dfb1c8fbb2b0291508beb395b7affa">NodeType</a> <a class="code" href="class_node.xhtml#a1a6a9787af2a0443be2675e265e7c163">Node::Type</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__tree.xhtml#ga94dfb1c8fbb2b0291508beb395b7affa">NodeType</a>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;NodeType);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor"></span><span class="keywordtype">int</span> Node::Index()<span class="keyword"> const</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordtype">int</span> idx = 1;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    xmlNodePtr node = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">while</span> (node-&gt;prev != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        idx++;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        node = node-&gt;prev;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">return</span> idx;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="keywordtype">int</span> Node::Line()<span class="keyword"> const</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(XML_GET_LINE(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>));</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Values</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_node.xhtml#a4efa31fd83fa75b3b731c3878565f196">Node::XMLString</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;GetXml();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;}</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_node.xhtml#a2a698b8b667f5a21b5eb551829e10e3d">Node::StringValue</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;InnerText;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;}</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keywordtype">int</span> <a class="code" href="class_node.xhtml#ac78287c291afd70f90d246a5edbbb142">Node::IntValue</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    return ::_wtoi(<a class="code" href="class_node.xhtml#a2a698b8b667f5a21b5eb551829e10e3d">StringValue</a>().c_str());</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="keywordtype">double</span> <a class="code" href="class_node.xhtml#a814c5fba6e721d1d01420f75bac582cb">Node::DoubleValue</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    return ::wcstod(<a class="code" href="class_node.xhtml#a2a698b8b667f5a21b5eb551829e10e3d">StringValue</a>().c_str(), <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_node.xhtml#a619196c7ae332e44e5248c17f238b4ce">Node::BoolValue</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordtype">string</span> str(<a class="code" href="class_node.xhtml#a2a698b8b667f5a21b5eb551829e10e3d">StringValue</a>());</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">if</span> (::_wcsnicmp(str.c_str(), __TEXT(<span class="stringliteral">&quot;true&quot;</span>), min((<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a>)4, str.length())) == 0)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">if</span> (::_wcsnicmp(str.c_str(), __TEXT(<span class="stringliteral">&quot;yes&quot;</span>), min((<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a>)3, str.length())) == 0)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">return</span> (::_wtoi(str.c_str()) != 0);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;}</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Hierarchy</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;std::shared_ptr&lt;Document&gt; <a class="code" href="class_node.xhtml#a4960e0081853a3ec9defa3a0a418b163">Node::Document</a>()</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;{</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;class Document&gt;(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;OwnerDocument);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;}</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;std::shared_ptr&lt;const Document&gt; <a class="code" href="class_node.xhtml#a4960e0081853a3ec9defa3a0a418b163">Node::Document</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="class_node.xhtml">Node</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="class_node.xhtml#a4960e0081853a3ec9defa3a0a418b163">Document</a>();</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;std::shared_ptr&lt;Node&gt; <a class="code" href="class_node.xhtml#a26f8411048a78b549f895f32cf75981e">Node::NextSibling</a>()</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;{</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;NextSibling == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">return</span> NewNode(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;NextSibling);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;}</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;std::shared_ptr&lt;const Node&gt; <a class="code" href="class_node.xhtml#a26f8411048a78b549f895f32cf75981e">Node::NextSibling</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="class_node.xhtml">Node</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="class_node.xhtml#a26f8411048a78b549f895f32cf75981e">NextSibling</a>();</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;}</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;std::shared_ptr&lt;Node&gt; <a class="code" href="class_node.xhtml#ab393a29697ae68efc8fcfc181f2b55c7">Node::NextElementSibling</a>()</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;{</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">auto</span> next = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;NextSibling;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">while</span> (next != <span class="keyword">nullptr</span> &amp;&amp; next-&gt;NodeType != ::Windows::Data::Xml::Dom::NodeType::ElementNode)</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        next = next-&gt;NextSibling;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">if</span> (next == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">return</span> NewNode(next);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;std::shared_ptr&lt;const Node&gt; <a class="code" href="class_node.xhtml#ab393a29697ae68efc8fcfc181f2b55c7">Node::NextElementSibling</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="class_node.xhtml">Node</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="class_node.xhtml#ab393a29697ae68efc8fcfc181f2b55c7">NextElementSibling</a>();</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;}</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;std::shared_ptr&lt;Node&gt; <a class="code" href="class_node.xhtml#a17bed9da7fa8916c6375c71c7b09b852">Node::PreviousSibling</a>()</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;PreviousSibling == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">return</span> NewNode(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;PreviousSibling);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;std::shared_ptr&lt;const Node&gt; <a class="code" href="class_node.xhtml#a17bed9da7fa8916c6375c71c7b09b852">Node::PreviousSibling</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="class_node.xhtml">Node</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="class_node.xhtml#a17bed9da7fa8916c6375c71c7b09b852">PreviousSibling</a>();</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;}</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;std::shared_ptr&lt;Node&gt; <a class="code" href="class_node.xhtml#a8ca93350f815b08643fa64141ccd7463">Node::FirstChild</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; filterByName)</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;HasChildNodes() == <span class="keyword">false</span>)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">if</span> (filterByName.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>())</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keywordflow">return</span> NewNode(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;FirstChild);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keyword">auto</span> child = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;FirstChild;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">do</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">if</span> (filterByName == __winstr(child-&gt;LocalName)-&gt;Data())</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordflow">return</span> NewNode(child);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    } <span class="keywordflow">while</span> ((child = child-&gt;NextSibling) != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;}</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;std::shared_ptr&lt;const Node&gt; <a class="code" href="class_node.xhtml#a8ca93350f815b08643fa64141ccd7463">Node::FirstChild</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; filterByName)<span class="keyword"> const</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="class_node.xhtml">Node</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="class_node.xhtml#a8ca93350f815b08643fa64141ccd7463">FirstChild</a>(filterByName);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;std::shared_ptr&lt;Node&gt; <a class="code" href="class_node.xhtml#a80b9922d872182f92331b9e7a17e2db6">Node::FirstElementChild</a>()</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;{</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keyword">auto</span> child = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;FirstChild;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">while</span> (child != <span class="keyword">nullptr</span> &amp;&amp; child-&gt;NodeType != ::Windows::Data::Xml::Dom::NodeType::ElementNode)</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        child = child-&gt;NextSibling;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">if</span> (child == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">return</span> NewNode(child);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;}</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;std::shared_ptr&lt;const Node&gt; <a class="code" href="class_node.xhtml#a80b9922d872182f92331b9e7a17e2db6">Node::FirstElementChild</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="class_node.xhtml">Node</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="class_node.xhtml#a80b9922d872182f92331b9e7a17e2db6">FirstElementChild</a>();</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<a class="code" href="class_node.xhtml#ab98e08405472eb1a94cd05a990251836">Node::NodeList</a> <a class="code" href="class_node.xhtml#a1f10805510223ca4a8878107346710b9">Node::Children</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; filterByName)</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;{</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="class_node.xhtml#ab98e08405472eb1a94cd05a990251836">NodeList</a> list;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;HasChildNodes() == <span class="keyword">false</span>)</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> child = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;FirstChild; child != <span class="keyword">nullptr</span>; child = child-&gt;NextSibling)</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keywordflow">if</span> (filterByName.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() || filterByName == __winstr(child-&gt;LocalName)-&gt;Data())</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            list.push_back(NewNode(child));</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">return</span> list;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">const</span> <a class="code" href="class_node.xhtml#ab98e08405472eb1a94cd05a990251836">Node::NodeList</a> <a class="code" href="class_node.xhtml#a1f10805510223ca4a8878107346710b9">Node::Children</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; filterByName)<span class="keyword"> const</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="class_node.xhtml">Node</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="class_node.xhtml#a1f10805510223ca4a8878107346710b9">Children</a>(filterByName);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="preprocessor">#if EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> XmlElement^ NewElement(::Platform::String^ name, ::Platform::String^ prefix, <a class="code" href="class_node.xhtml">Node</a>* contextNode)</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;{</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    XmlElement^ newNode = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordflow">if</span> (prefix-&gt;IsEmpty())</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    {</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        newNode = contextNode-&gt;<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>()-&gt;OwnerDocument-&gt;CreateElement(name);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    }</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <a class="code" href="group__validation.xhtml#ga4d56589b82d0b58e6ee34f5bba2a8a35">NamespaceList</a> nslist = contextNode-&gt;<a class="code" href="class_node.xhtml#ae046e5007a931ecc24a61b80000e9287">NamespacesInScope</a>();</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        ::Platform::String^ uri = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">class</span> <a class="code" href="class_node.xhtml#a55aa0fdcd97cab4049a8b87c25db8590">Namespace</a>* ns : nslist)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keywordflow">if</span> (prefix == ns-&gt;Prefix())</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            {</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                uri = ns-&gt;URI();</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            }</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        }</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        ::Platform::String^ qname = ::Platform::String::Concat(::Platform::String::Concat(prefix, __TEXT(<span class="stringliteral">&quot;:&quot;</span>)), name);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        newNode = contextNode-&gt;<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>()-&gt;OwnerDocument-&gt;CreateElementNS(uri, qname);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    }</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">return</span> newNode;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<a class="code" href="class_element.xhtml">Element</a> * Node::AddChild(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;name, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; prefix)</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">auto</span> child = NewElement(name, prefix, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">if</span> (child == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    </div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    XmlElement^ newNode = <span class="keyword">dynamic_cast&lt;</span>XmlElement^<span class="keyword">&gt;</span>(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;AppendChild(child));</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordflow">if</span> (newNode == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_node.xhtml#a016b821f88c7c0a2de1451c175cefbf9">Element</a>(newNode);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;}</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="keywordtype">void</span> Node::AddChild(<a class="code" href="class_node.xhtml">Node</a> *child)</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;{</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;AppendChild(child-&gt;<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>());</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;}</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<a class="code" href="class_element.xhtml">Element</a> * Node::InsertAfter(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;name, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; prefix)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;{</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;ParentNode == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keyword">auto</span> child = NewElement(name, prefix, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;NextSibling != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        child = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;ParentNode-&gt;InsertBefore(child, <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;NextSibling);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        child = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;ParentNode-&gt;AppendChild(child);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">if</span> (child == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="class_node.xhtml#a016b821f88c7c0a2de1451c175cefbf9">Element</a>(newNode);</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;}</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="keywordtype">void</span> Node::InsertAfter(<a class="code" href="class_node.xhtml">Node</a> *child)</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    xmlNodePtr newNode = xmlAddNextSibling(<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>(), child-&gt;<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>());</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">if</span> (newNode == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="keywordflow">throw</span> InternalError(<span class="stringliteral">&quot;Unable to add child node&quot;</span>, xmlGetLastError());</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    child-&gt;rebind(newNode);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;}</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<a class="code" href="class_element.xhtml">Element</a> * Node::InsertBefore(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;name, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; prefix)</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;{</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    xmlNodePtr child = createChild(name, prefix);</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    xmlNodePtr newNode = xmlAddPrevSibling(<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>(), child);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordflow">if</span> (newNode == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    {</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        xmlFreeNode(child);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="keywordflow">throw</span> InternalError(std::string(<span class="stringliteral">&quot;Could not add child element node named &#39;&quot;</span>) + name.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>() + <span class="stringliteral">&quot;&#39;&quot;</span>, xmlGetLastError());</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">return</span> Wrapped&lt;Element, _xmlNode&gt;(newNode);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="keywordtype">void</span> Node::InsertBefore(<a class="code" href="class_node.xhtml">Node</a> *child)</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;{</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    xmlNodePtr newNode = xmlAddPrevSibling(<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>(), child-&gt;<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>());</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">if</span> (newNode == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">throw</span> InternalError(<span class="stringliteral">&quot;Unable to add child node&quot;</span>, xmlGetLastError());</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    child-&gt;rebind(newNode);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;}</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<a class="code" href="class_node.xhtml">Node</a> * Node::CopyIn(<span class="keyword">const</span> <a class="code" href="class_node.xhtml">Node</a> *nodeToCopy, <span class="keywordtype">bool</span> recursive)</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;{</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keywordflow">if</span> (nodeToCopy == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="comment">// complains about the difference between &#39;const xmlNode *&#39; and &#39;xmlNode const *&#39; ...</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    xmlNodePtr theCopy = xmlDocCopyNode(const_cast&lt;_xmlNode *&gt;(nodeToCopy-&gt;<a class="code" href="class_node.xhtml#a6e1cbf3fe96d139d2869889175cbdf1b">xml</a>()), <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;doc, recursive ? 1 : 0);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">if</span> (theCopy == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">throw</span> InternalError(<span class="stringliteral">&quot;Unable to copy node&quot;</span>, xmlGetLastError());</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    xmlNode * added = xmlAddChild(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>, theCopy);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keywordflow">if</span> (added == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        xmlFreeNode(theCopy);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="keywordflow">throw</span> InternalError(<span class="stringliteral">&quot;Unable to add copied node as a new child&quot;</span>, xmlGetLastError());</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="comment">// if added != theCopy, then theCopy has already been freed</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">return</span> Wrapped&lt;Node, _xmlNode&gt;(added);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;}</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="keywordtype">void</span> Node::Detach()</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;{</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    xmlUnlinkNode(<a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;}</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="preprocessor">#endif  // EPUB_ENABLE(XML_BUILDER)</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - XPath Utilities</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">NodeSet</a> <a class="code" href="class_node.xhtml#a5b2ec4906d580c19d0394b00914602d4">Node::FindByXPath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;xpath)<span class="keyword"> const</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keyword">auto</span> nodeList = <a class="code" href="class_node.xhtml#a4b8f0f37dd1d071e70322204c7abe72d">_xml</a>-&gt;SelectNodes(xpath);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">if</span> (nodeList == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">NodeSet</a>();</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">NodeSet</a> result;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keyword">auto</span> pos = nodeList-&gt;First();</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">while</span> (pos-&gt;HasCurrent)</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        result.push_back(NewNode(pos-&gt;Current));</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        pos-&gt;MoveNext();</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;}</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">NodeSet</a> <a class="code" href="class_node.xhtml#a5b2ec4906d580c19d0394b00914602d4">Node::FindByXPath</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;xpath, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afe7b8e253a0fd7698be48d0c034ac766">NamespaceMap</a> &amp;namespaces)<span class="keyword"> const</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <a class="code" href="class_x_path_evaluator.xhtml">XPathEvaluator</a> eval(xpath, <a class="code" href="class_node.xhtml#a4960e0081853a3ec9defa3a0a418b163">Document</a>());</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    eval.RegisterNamespaces(namespaces);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    XPathEvaluator::ObjectType type = XPathEvaluator::ObjectType::Undefined;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordflow">if</span> (eval.Evaluate(shared_from_this(), &amp;type) &amp;&amp; type == <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">XPathEvaluator::ObjectType::NodeSet</a>)</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordflow">return</span> eval.NodeSetResult();</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="node_8h.xhtml#ae3307b459c7fb4bdd8209f965914e070">NodeSet</a>();</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;}</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;std::shared_ptr&lt;Node&gt; Node::NewNode(NativePtr newNode)</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;{</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="group__tree.xhtml#ga94dfb1c8fbb2b0291508beb395b7affa">using ::Windows::Data::Xml::Dom::NodeType</a>;</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordflow">switch</span> (newNode-&gt;NodeType)</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    {</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">case</span> NodeType::ElementNode:</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;Element&gt;(<span class="keyword">dynamic_cast&lt;</span>XmlElement^<span class="keyword">&gt;</span>(newNode));</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    </div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">case</span> NodeType::DocumentNode:</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;class Document&gt;(<span class="keyword">dynamic_cast&lt;</span>XmlDocument^<span class="keyword">&gt;</span>(newNode));</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordflow">case</span> NodeType::NotationNode:</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keywordflow">return</span> std::make_shared&lt;DTD&gt;(<span class="keyword">dynamic_cast&lt;</span>DtdNotation^<span class="keyword">&gt;</span>(newNode));</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;Node&gt;(newNode);</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;}</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<a class="code" href="xml_2utilities_2base_8h.xhtml#a1855726ae847a4b9be62158be5842e55">EPUB3_XML_END_NAMESPACE</a></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d2dc3c0cadcebb3fe799a79b2b95c908.xhtml">xml</a></li><li class="navelem"><a class="el" href="dir_f24255c03ecd8d9b97df6bed7f990a1d.xhtml">tree</a></li><li class="navelem"><a class="el" href="node__win_8cpp.xhtml">node_win.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:41 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
