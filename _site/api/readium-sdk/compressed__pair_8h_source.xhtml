<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/compressed_pair.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('compressed__pair_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">compressed_pair.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="compressed__pair_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  compressed_pair.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2013-05-17.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3__compressed_pair__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3__compressed_pair__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="basic_8h.xhtml">ePub3/utilities/basic.h</a>&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="swap__traits_8h.xhtml">swap_traits.h</a>&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// internal template classes</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// based on LLVM libc++ std::__compressed_pair implementation (why is there no compressed_pair in C++11 STL?)</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">//  which is released under MIT and University of Illinios Open Source licenses.</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"></span><span class="comment">// helper pretty much copied verbatim from libc++, where it&#39;s an internal class used to help with some tuple stuff</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">template</span> &lt;std::size_t...&gt; <span class="keyword">struct </span>__tuple_indices {};</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> _Sp, <span class="keyword">class</span> _IntTuple, std::<span class="keywordtype">size_t</span> _Ep&gt;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">struct </span>__make_indices_imp;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">template</span> &lt;std::size_t _Sp, std::size_t ..._Indices, std::size_t _Ep&gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">struct </span>__make_indices_imp&lt;_Sp, __tuple_indices&lt;_Indices...&gt;, _Ep&gt;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> __make_indices_imp&lt;_Sp+1, __tuple_indices&lt;_Indices..., _Sp&gt;, _Ep&gt;::type type;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;};</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">template</span> &lt;std::size_t _Ep, std::size_t ..._Indices&gt;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">struct </span>__make_indices_imp&lt;_Ep, __tuple_indices&lt;_Indices...&gt;, _Ep&gt;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">typedef</span> __tuple_indices&lt;_Indices...&gt; type;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> _Ep, std::<span class="keywordtype">size_t</span> _Sp = 0&gt;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">struct </span>__make_tuple_indices</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    static_assert(_Sp &lt; _Ep, <span class="stringliteral">&quot;__make_tuple_indices input error&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> __make_indices_imp&lt;_Sp, __tuple_indices&lt;&gt;, _Ep&gt;::type type;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;};</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">// basic type used to switch() on traits</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;template &lt;class _T1, class _T2, bool = std::is_same&lt;typename std::remove_cv&lt;_T1&gt;::type,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                                    <span class="keyword">typename</span> std::remove_cv&lt;_T2&gt;::type&gt;::value,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                <span class="keywordtype">bool</span> = std::is_empty&lt;_T1&gt;::value</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#if EPUB_COMPILER(CLANG) &amp;&amp; __has_feature(is_final)</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor"></span>                                       &amp;&amp; !__is_final(_T1)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor"></span>                                ,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                <span class="keywordtype">bool</span> = std::is_empty&lt;_T2&gt;::value</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#if EPUB_COMPILER(CLANG) &amp;&amp; __has_feature(is_final)</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor"></span>                                       &amp;&amp; !__is_final(_T2)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor"></span>         &gt;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="struct____epub3__compressed__pair__switch.xhtml">   73</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____epub3__compressed__pair__switch.xhtml">__epub3_compressed_pair_switch</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">// specializations to define value for different sets of inputs</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">// neither member is empty (or neither can be subclassed)</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2, <span class="keywordtype">bool</span> IsSame&gt;</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="struct____epub3__compressed__pair__switch_3_01___t1_00_01___t2_00_01_is_same_00_01false_00_01false_01_4.xhtml#a0d6d4e8b0e1cec477feb438dd3bb6ea2a77963ccde8c8da123f4589a4fb9ac121">   79</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____epub3__compressed__pair__switch.xhtml">__epub3_compressed_pair_switch</a>&lt;_T1, _T2, IsSame, false, false&gt;   {<span class="keyword">enum</span> {value = 0};};</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">// only first member is empty (ahnd subclassable)</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2, <span class="keywordtype">bool</span> IsSame&gt;</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="struct____epub3__compressed__pair__switch_3_01___t1_00_01___t2_00_01_is_same_00_01true_00_01false_01_4.xhtml#a2b54a3e9ddc4fa3719cde483196069b5a2e5efcbf2ea44306cb57f9578056b3ec">   83</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____epub3__compressed__pair__switch.xhtml">__epub3_compressed_pair_switch</a>&lt;_T1, _T2, IsSame, true, false&gt;    {<span class="keyword">enum</span> {value = 1};};</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">// only second member is empty (and subclassable)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2, <span class="keywordtype">bool</span> IsSame&gt;</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="code" href="struct____epub3__compressed__pair__switch_3_01___t1_00_01___t2_00_01_is_same_00_01false_00_01true_01_4.xhtml#af857b4bb4d49d543e1ed56cbc629d3c3a5fc1e45343069200f91b196289d51e5a">   87</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____epub3__compressed__pair__switch.xhtml">__epub3_compressed_pair_switch</a>&lt;_T1, _T2, IsSame, false, true&gt;    {<span class="keyword">enum</span> {value = 2};};</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">// two differing empty/subclassable members</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="code" href="struct____epub3__compressed__pair__switch_3_01___t1_00_01___t2_00_01false_00_01true_00_01true_01_4.xhtml#a27ca72f756d7b8733d4c3f5e30fad444a90e15f7252d2f66295f50f920a79e21c">   91</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____epub3__compressed__pair__switch.xhtml">__epub3_compressed_pair_switch</a>&lt;_T1, _T2, false, true, true&gt;      {<span class="keyword">enum</span> {value = 3};};</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">// two identical empty/subclassable members</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="code" href="struct____epub3__compressed__pair__switch_3_01___t1_00_01___t2_00_01true_00_01true_00_01true_01_4.xhtml#a93f893294046af4d0befd767420c0ed2aecb7eed8248a683384d42d37a6244758">   95</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct____epub3__compressed__pair__switch.xhtml">__epub3_compressed_pair_switch</a>&lt;_T1, _T2, true, true, true&gt;       {<span class="keyword">enum</span> {value = 1};};</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">// implementation type -- specialized based on above switch constants</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;template &lt;class _T1, class _T2, unsigned = __epub3_compressed_pair_switch&lt;_T1, _T2&gt;::value&gt;</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp.xhtml">   99</a></span>&#160;<span class="keyword">class </span><a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">// implementation for two non-empty members</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml">  103</a></span>&#160;<span class="keyword">class </span><a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&lt;_T1, _T2, 0&gt;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    _T1 __first_;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    _T2 __second_;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a120fd19ba9058d1af7ed2762895ca8bb">  110</a></span>&#160;    <span class="keyword">typedef</span> _T1 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a120fd19ba9058d1af7ed2762895ca8bb">_T1_param</a>;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ae6e94423f649115a76a96a976a470044">  111</a></span>&#160;    <span class="keyword">typedef</span> _T2 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ae6e94423f649115a76a96a976a470044">_T2_param</a>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    </div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a667ab8c29614b60cfb00e8bab39e4f30">  113</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::remove_reference&lt;_T1&gt;::type&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a667ab8c29614b60cfb00e8bab39e4f30">_T1_reference</a>;</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#abb7cff93d84627de350e89b77ccc324c">  114</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::remove_reference&lt;_T2&gt;::type&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#abb7cff93d84627de350e89b77ccc324c">_T2_reference</a>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    </div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a0c4545447b86bd182a57d2ccbb7d5542">  116</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">typename</span> std::remove_reference&lt;_T1&gt;::type&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a0c4545447b86bd182a57d2ccbb7d5542">_T1_const_reference</a>;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ac4022843391ece8f047ec6f5e24a2380">  117</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">typename</span> std::remove_reference&lt;_T2&gt;::type&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ac4022843391ece8f047ec6f5e24a2380">_T2_const_reference</a>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    </div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a513fa726cda4294de9311fed256944df">  119</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a513fa726cda4294de9311fed256944df">__epub3_compressed_pair_imp</a>() {}</div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#afa27ed29f3e54aa4f3403fdeba8caf40">  120</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a120fd19ba9058d1af7ed2762895ca8bb">_T1_param</a> __t1)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        : __first_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a120fd19ba9058d1af7ed2762895ca8bb">_T1_param</a>&gt;(__t1)) {}</div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#abef3126baea81d391131186ba6571a63">  122</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ae6e94423f649115a76a96a976a470044">_T2_param</a> __t2)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        : __second_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ae6e94423f649115a76a96a976a470044">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a9bfba7f5bd3722f2800466f5732afcef">  124</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a120fd19ba9058d1af7ed2762895ca8bb">_T1_param</a> __t1, <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ae6e94423f649115a76a96a976a470044">_T2_param</a> __t2)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        : __first_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a120fd19ba9058d1af7ed2762895ca8bb">_T1_param</a>&gt;(__t1)), __second_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ae6e94423f649115a76a96a976a470044">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a176a64c7d6b541aba304d95c7eea9ce8">  128</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                   std::is_nothrow_copy_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        : __first_(__p.first()), __second_(__p.second()) {}</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a8f82d182e3a08254d512017006188efc">  134</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                   std::is_nothrow_copy_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        __first_ = __p.first();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        __second_ = __p.second();</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a8bd7ef5e474cb644ee4605c9e8ef4fac">  144</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                   std::is_nothrow_move_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        : __first_(std::forward&lt;_T1&gt;(__p.first())), __second_(std::forward&lt;_T2&gt;(__p.second())) {}</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#af5b14a99d2940b558d46362f53e51a33">  150</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                   std::is_nothrow_move_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        __first_ = std::forward&lt;_T1&gt;(__p.first());</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        __second_ = std::forward&lt;_T2&gt;(__p.second());</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Args1, <span class="keyword">class</span>... _Args2, <span class="keywordtype">size_t</span>... _I1, <span class="keywordtype">size_t</span>... _I2&gt;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(std::piecewise_construct_t __pc,</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                std::tuple&lt;_Args1...&gt; __first_args,</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                std::tuple&lt;_Args2...&gt; __second_args,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                __tuple_indices&lt;_I1...&gt;,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                __tuple_indices&lt;_I2...&gt;)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        : __first_(std::forward&lt;_Args1&gt;(std::get&lt;_I1&gt;(__first_args))...),</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;          __second_(std::forward&lt;_Args2&gt;(std::get&lt;_I2&gt;(__second_args))...)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a71512145c6c57fc0f794fb16e8b75ef1">  172</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a667ab8c29614b60cfb00e8bab39e4f30">_T1_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a71512145c6c57fc0f794fb16e8b75ef1">first</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>           { <span class="keywordflow">return</span> __first_; }</div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ab710605692f0f009702f115e721d7651">  173</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a0c4545447b86bd182a57d2ccbb7d5542">_T1_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ab710605692f0f009702f115e721d7651">first</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>     { <span class="keywordflow">return</span> __first_; }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    </div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a02ea493e9b145f9082e5e5acbf7512fc">  175</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#abb7cff93d84627de350e89b77ccc324c">_T2_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a02ea493e9b145f9082e5e5acbf7512fc">second</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>          { <span class="keywordflow">return</span> __second_; }</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a9d2903a4cae222f8b66b56d35a927d81">  176</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#ac4022843391ece8f047ec6f5e24a2380">_T2_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a9d2903a4cae222f8b66b56d35a927d81">second</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>    { <span class="keywordflow">return</span> __second_; }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    </div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_010_01_4.xhtml#a7c06ce2e0ed63f2a479e6c4e7401ea40">  178</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keywordtype">void</span> <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __x)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(<a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T1&gt;::value</a> &amp;&amp;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                   <a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T2&gt;::value</a>)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">using</span> <a class="code" href="namespacestd.xhtml#a0755198bdfa968ee99a82b99f38cdbd6">std::swap</a>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(__first_, __x.__first);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(__second_, __x.__second_);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;};</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">// Implementation where only first member is empty &amp; subclassable</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml">  191</a></span>&#160;<span class="keyword">class </span><a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&lt;_T1, _T2, 1&gt;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    : <span class="keyword">private</span> _T1</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    _T2 __second_;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a0eb79806801b9f601244cce2f172e39b">  198</a></span>&#160;    <span class="keyword">typedef</span> _T1 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a0eb79806801b9f601244cce2f172e39b">_T1_param</a>;</div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a05b382996078fad6f14a592c1b25f5b3">  199</a></span>&#160;    <span class="keyword">typedef</span> _T2 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a05b382996078fad6f14a592c1b25f5b3">_T2_param</a>;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    </div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a03056022127bb799d52085270af572ef">  201</a></span>&#160;    <span class="keyword">typedef</span> _T1&amp;                                        <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a03056022127bb799d52085270af572ef">_T1_reference</a>;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#aeee0c1ab1ed78f54631e930de0d0a57d">  202</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::remove_reference&lt;_T2&gt;::type&amp;  <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#aeee0c1ab1ed78f54631e930de0d0a57d">_T2_reference</a>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    </div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a1bff6de1533be6c42625d8ee6b7237f8">  204</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> _T1&amp;                                          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a1bff6de1533be6c42625d8ee6b7237f8">_T1_const_reference</a>;</div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a42c3cc513526eb43b019a54b98902a2c">  205</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">typename</span> std::remove_reference&lt;_T2&gt;::type&amp;    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a42c3cc513526eb43b019a54b98902a2c">_T2_const_reference</a>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    </div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a38104dd6618ce7e619b478a7715cfe3e">  207</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a38104dd6618ce7e619b478a7715cfe3e">__epub3_compressed_pair_imp</a>() {}</div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a75e5defc5bf82d7679ee061e83aeaa1e">  208</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a0eb79806801b9f601244cce2f172e39b">_T1_param</a> __t1)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        : _T1(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a0eb79806801b9f601244cce2f172e39b">_T1_param</a>&gt;(__t1)) {}</div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a9e635715ff3e3b2ded192e53164abf13">  210</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a05b382996078fad6f14a592c1b25f5b3">_T2_param</a> __t2)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        : __second_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a05b382996078fad6f14a592c1b25f5b3">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a144bc3e4d89590241d055284a0076226">  212</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a0eb79806801b9f601244cce2f172e39b">_T1_param</a> __t1, <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a05b382996078fad6f14a592c1b25f5b3">_T2_param</a> __t2)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        : _T1(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a0eb79806801b9f601244cce2f172e39b">_T1_param</a>&gt;(__t1)), __second_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a05b382996078fad6f14a592c1b25f5b3">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a27168d1d9629d3fb193c89c98ce7e443">  216</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                   std::is_nothrow_copy_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        : _T1(__p.first()), __second_(__p.second()) {}</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00222"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a30436f2a1afe00c2c42f9b4444fe8500">  222</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                   std::is_nothrow_copy_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        _T1::operator=(__p.first());</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        __second_ = __p.second();</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a3d3b43ab9e9f9bd5584e00d981246341">  232</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                   std::is_nothrow_move_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        : _T1(std::move(__p.first())), __second_(std::forward&lt;_T2&gt;(__p.second())) {}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#af5879ff528135b83ae58f44732607d64">  238</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                   std::is_nothrow_move_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        _T1::operator=(std::move(__p.first()));</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        __second_ = std::forward&lt;_T2&gt;(__p.second());</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Args1, <span class="keyword">class</span>... _Args2, <span class="keywordtype">size_t</span>... _I1, <span class="keywordtype">size_t</span>... _I2&gt;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(std::piecewise_construct_t __pc,</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                std::tuple&lt;_Args1...&gt; __first_args,</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                std::tuple&lt;_Args2...&gt; __second_args,</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                __tuple_indices&lt;_I1...&gt;,</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                __tuple_indices&lt;_I2...&gt;)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        : _T1(std::forward&lt;_Args1&gt;(std::get&lt;_I1&gt;(__first_args))...),</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;          __second_(std::forward&lt;_Args2&gt;(std::get&lt;_I2&gt;(__second_args))...)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {}</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#aa2122bf0ab6f2bfe0937974006f2d46d">  260</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a03056022127bb799d52085270af572ef">_T1_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#aa2122bf0ab6f2bfe0937974006f2d46d">first</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>           { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a5511402588ca8ca95e1d48cf46358077">  261</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a1bff6de1533be6c42625d8ee6b7237f8">_T1_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a5511402588ca8ca95e1d48cf46358077">first</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>     { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    </div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a7a6b7184c80e864de7d08cbfd04e3020">  263</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#aeee0c1ab1ed78f54631e930de0d0a57d">_T2_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a7a6b7184c80e864de7d08cbfd04e3020">second</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>          { <span class="keywordflow">return</span> __second_; }</div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a68a489110e5f58513a164710006fa809">  264</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a42c3cc513526eb43b019a54b98902a2c">_T2_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#a68a489110e5f58513a164710006fa809">second</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>    { <span class="keywordflow">return</span> __second_; }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    </div>
<div class="line"><a name="l00266"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_011_01_4.xhtml#ab005c0a5961ac335db31dc5c2c00ee49">  266</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keywordtype">void</span> <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __x)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(<a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T1&gt;::value</a> &amp;&amp;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;               <a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T2&gt;::value</a>)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keyword">using</span> <a class="code" href="namespacestd.xhtml#a0755198bdfa968ee99a82b99f38cdbd6">std::swap</a>;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(__second_, __x.__second_);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;};</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">// implementation where only second member is empty &amp; subclassable</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00277"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml">  277</a></span>&#160;<span class="keyword">class </span><a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&lt;_T1, _T2, 2&gt;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    : <span class="keyword">private</span> _T2</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    _T1 __first_;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00284"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a8b7c8760345c8572fc77809135ca4fb0">  284</a></span>&#160;    <span class="keyword">typedef</span> _T1 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a8b7c8760345c8572fc77809135ca4fb0">_T1_param</a>;</div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a39f3e627e5fd13acec81ee9c9df3bc55">  285</a></span>&#160;    <span class="keyword">typedef</span> _T2 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a39f3e627e5fd13acec81ee9c9df3bc55">_T2_param</a>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    </div>
<div class="line"><a name="l00287"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#ad1243987d8e45f28be7554aa5d878d51">  287</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> std::remove_reference&lt;_T1&gt;::type&amp;  <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#ad1243987d8e45f28be7554aa5d878d51">_T1_reference</a>;</div>
<div class="line"><a name="l00288"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a54e301c822d2372d7bee695ce76cce15">  288</a></span>&#160;    <span class="keyword">typedef</span> _T2&amp;                                        <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a54e301c822d2372d7bee695ce76cce15">_T2_reference</a>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    </div>
<div class="line"><a name="l00290"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a5e69abea5eafe8f5c579283ecd58ae6f">  290</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">typename</span> std::remove_reference&lt;_T1&gt;::type&amp;    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a5e69abea5eafe8f5c579283ecd58ae6f">_T1_const_reference</a>;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a16fb91c3f3e77aaaf02602077356ca7c">  291</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> _T2&amp;                                          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a16fb91c3f3e77aaaf02602077356ca7c">_T2_const_reference</a>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    </div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a246bafd87837141c9f665ee5d5d04281">  293</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a246bafd87837141c9f665ee5d5d04281">__epub3_compressed_pair_imp</a>() {}</div>
<div class="line"><a name="l00294"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a13f6f279ac24d59ef1d0963868e33fc9">  294</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a8b7c8760345c8572fc77809135ca4fb0">_T1_param</a> __t1)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        : __first_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a8b7c8760345c8572fc77809135ca4fb0">_T1_param</a>&gt;(__t1)) {}</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a1a6e249b953c9a2e668f40f4155bba45">  296</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a39f3e627e5fd13acec81ee9c9df3bc55">_T2_param</a> __t2)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        : _T2(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a39f3e627e5fd13acec81ee9c9df3bc55">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#aff327d7518d0c985100e97fc8e472609">  298</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a8b7c8760345c8572fc77809135ca4fb0">_T1_param</a> __t1, <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a39f3e627e5fd13acec81ee9c9df3bc55">_T2_param</a> __t2)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        : _T2(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a39f3e627e5fd13acec81ee9c9df3bc55">_T2_param</a>&gt;(__t2)), __first_(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a8b7c8760345c8572fc77809135ca4fb0">_T1_param</a>&gt;(__t1)) {}</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#af62174cd4733c86a984d3ce199ddf8a2">  302</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                   std::is_nothrow_copy_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        : _T2(__p.second()), __first_(__p.first()) {}</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a630a0c50ddb45fdf27a19aa200803d07">  308</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                   std::is_nothrow_copy_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        __first_ = __p.first();</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        _T2::operator=(__p.second());</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00318"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a5ec9b4f3d8205c246dd4e410fcf0f472">  318</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                   std::is_nothrow_move_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        : _T2(std::move(__p.second())), __first_(std::forward&lt;_T1&gt;(__p.first())) {}</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#acefcce8e7afad035340643748b85bc4e">  324</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                   std::is_nothrow_move_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        __first_ = std::forward&lt;_T1&gt;(__p.first());</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        _T2::operator=(std::move(__p.second()));</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Args1, <span class="keyword">class</span>... _Args2, <span class="keywordtype">size_t</span>... _I1, <span class="keywordtype">size_t</span>... _I2&gt;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(std::piecewise_construct_t __pc,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                std::tuple&lt;_Args1...&gt; __first_args,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                std::tuple&lt;_Args2...&gt; __second_args,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                __tuple_indices&lt;_I1...&gt;,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                __tuple_indices&lt;_I2...&gt;)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        : _T2(std::forward&lt;_Args2&gt;(std::get&lt;_I2&gt;(__second_args))...),</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;          __first_(std::forward&lt;_Args1&gt;(std::get&lt;_I1&gt;(__first_args))...)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    {}</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00346"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a853174418c92cf151168c68dc7c29a2e">  346</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#ad1243987d8e45f28be7554aa5d878d51">_T1_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a853174418c92cf151168c68dc7c29a2e">first</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>           { <span class="keywordflow">return</span> __first_; }</div>
<div class="line"><a name="l00347"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a6a75c01d4ef119dfdb9fee3563bf9e5e">  347</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a5e69abea5eafe8f5c579283ecd58ae6f">_T1_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a6a75c01d4ef119dfdb9fee3563bf9e5e">first</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>     { <span class="keywordflow">return</span> __first_; }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    </div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#adf1666559defd5be8e5623a04c1cb737">  349</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a54e301c822d2372d7bee695ce76cce15">_T2_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#adf1666559defd5be8e5623a04c1cb737">second</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>          { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a4b31490213f9e2a23cc4471296c91c77">  350</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a16fb91c3f3e77aaaf02602077356ca7c">_T2_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a4b31490213f9e2a23cc4471296c91c77">second</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>    { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    </div>
<div class="line"><a name="l00352"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_012_01_4.xhtml#a85c72fc0319f0758864710843d2206bd">  352</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keywordtype">void</span> <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __x)</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(<a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T1&gt;::value</a> &amp;&amp;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;               <a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T2&gt;::value</a>)</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keyword">using</span> <a class="code" href="namespacestd.xhtml#a0755198bdfa968ee99a82b99f38cdbd6">std::swap</a>;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(__first_, __x.__first);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;};</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="comment">// implementation for two empty L&amp; subclassable members</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00364"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml">  364</a></span>&#160;<span class="keyword">class </span><a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&lt;_T1, _T2, 3&gt;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    : <span class="keyword">private</span> _T1, <span class="keyword">private</span> _T2</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a8b6d7b90f2b368d117cb7239b2149c4a">  368</a></span>&#160;    <span class="keyword">typedef</span> _T1 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a8b6d7b90f2b368d117cb7239b2149c4a">_T1_param</a>;</div>
<div class="line"><a name="l00369"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a73f0979f1a1827bd996f1d99608598a6">  369</a></span>&#160;    <span class="keyword">typedef</span> _T2 <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a73f0979f1a1827bd996f1d99608598a6">_T2_param</a>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    </div>
<div class="line"><a name="l00371"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#ae452c9df4a09ecdc8c4dd659c2fd340c">  371</a></span>&#160;    <span class="keyword">typedef</span> _T1&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#ae452c9df4a09ecdc8c4dd659c2fd340c">_T1_reference</a>;</div>
<div class="line"><a name="l00372"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a208d6bcf1862f3133db06f77e3443303">  372</a></span>&#160;    <span class="keyword">typedef</span> _T2&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a208d6bcf1862f3133db06f77e3443303">_T2_reference</a>;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    </div>
<div class="line"><a name="l00374"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a38c8e96c1aa9423470302943e0c45f4f">  374</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> _T1&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a38c8e96c1aa9423470302943e0c45f4f">_T1_const_reference</a>;</div>
<div class="line"><a name="l00375"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a79aa8c3ad45537403e93ace68d518b0a">  375</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> _T2&amp; <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a79aa8c3ad45537403e93ace68d518b0a">_T2_const_reference</a>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    </div>
<div class="line"><a name="l00377"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a3bc76f477431cf1925f422ae4c5bbedb">  377</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a3bc76f477431cf1925f422ae4c5bbedb">__epub3_compressed_pair_imp</a>() {}</div>
<div class="line"><a name="l00378"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a7a7a1e68061812fa6663061b8dcd7012">  378</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a8b6d7b90f2b368d117cb7239b2149c4a">_T1_param</a> __t1)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        : _T1(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a8b6d7b90f2b368d117cb7239b2149c4a">_T1_param</a>&gt;(__t1)) {}</div>
<div class="line"><a name="l00380"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a3debca88b275b191f49f4309230ae667">  380</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a73f0979f1a1827bd996f1d99608598a6">_T2_param</a> __t2)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        : _T2(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a73f0979f1a1827bd996f1d99608598a6">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#ab974d067c087549989bf99f4fb0a80ff">  382</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a8b6d7b90f2b368d117cb7239b2149c4a">_T1_param</a> __t1, <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a73f0979f1a1827bd996f1d99608598a6">_T2_param</a> __t2)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        : _T1(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a8b6d7b90f2b368d117cb7239b2149c4a">_T1_param</a>&gt;(__t1)), _T2(std::forward&lt;<a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a73f0979f1a1827bd996f1d99608598a6">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a812678b29dcfd75bce5d79cecb896b37">  386</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                   std::is_nothrow_copy_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        : _T1(__p.first()), _T2(__p.second()) {}</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00392"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a16b0db96e7a758cbb8aace57c79806b7">  392</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __p)</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                   std::is_nothrow_copy_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        _T1::operator=(__p.first());</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        _T2::operator=(__p.second());</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00402"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a24c9c6bfa83b4eb674cde554725a72ae">  402</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                   std::is_nothrow_move_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        : _T1(std::move(__p.first())), _T2(std::move(__p.second())) {}</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00408"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a8bd00957ca6a5acdbad193bd18930978">  408</a></span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; operator=(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                   std::is_nothrow_move_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        _T1::operator=(std::move(__p.first()));</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        _T2::operator=(std::move(__p.second()));</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Args1, <span class="keyword">class</span>... _Args2, <span class="keywordtype">size_t</span>... _I1, <span class="keywordtype">size_t</span>... _I2&gt;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>(std::piecewise_construct_t __pc,</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                std::tuple&lt;_Args1...&gt; __first_args,</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                std::tuple&lt;_Args2...&gt; __second_args,</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                __tuple_indices&lt;_I1...&gt;,</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                __tuple_indices&lt;_I2...&gt;)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        : _T1(std::forward&lt;_Args1&gt;(std::get&lt;_I1&gt;(__first_args))...),</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;          _T2(std::forward&lt;_Args2&gt;(std::get&lt;_I2&gt;(__second_args))...)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    {}</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00430"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a448e335e9207ae40f33e8106dcbe9a1d">  430</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#ae452c9df4a09ecdc8c4dd659c2fd340c">_T1_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a448e335e9207ae40f33e8106dcbe9a1d">first</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>           { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00431"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a5c80a2c83b6bba51a4c8897d8aa969d4">  431</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a38c8e96c1aa9423470302943e0c45f4f">_T1_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a5c80a2c83b6bba51a4c8897d8aa969d4">first</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>     { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    </div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#ac4b42960ff50d139dbb6cb4d2fff1003">  433</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a208d6bcf1862f3133db06f77e3443303">_T2_reference</a>          <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#ac4b42960ff50d139dbb6cb4d2fff1003">second</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>          { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a912e9ef8da2d37e743fea23ba1f41169">  434</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a79aa8c3ad45537403e93ace68d518b0a">_T2_const_reference</a>    <a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#a912e9ef8da2d37e743fea23ba1f41169">second</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>    { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    </div>
<div class="line"><a name="l00436"></a><span class="lineno"><a class="code" href="class____epub3__compressed__pair__imp_3_01___t1_00_01___t2_00_013_01_4.xhtml#aca9f11586d4d113c15c7b142bf384a6e">  436</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keywordtype">void</span> <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(<a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&amp; __x)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(<a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T1&gt;::value</a> &amp;&amp;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;               <a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T2&gt;::value</a>)</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    {</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;};</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml">  445</a></span>&#160;<span class="keyword">class </span><a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    : <span class="keyword">private</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp</a>&lt;_T1, _T2&gt;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;{</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">__epub3_compressed_pair_imp&lt;_T1, _T2&gt;</a> <a class="code" href="class____epub3__compressed__pair__imp.xhtml">base</a>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    </div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00451"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a24117ae6ccdcffb0820479907feccf1e">  451</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> base::_T1_param <a class="code" href="class____compressed__pair.xhtml#a24117ae6ccdcffb0820479907feccf1e">_T1_param</a>;</div>
<div class="line"><a name="l00452"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#ab97264057266ee532a9ea2506e8034db">  452</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> base::_T2_param <a class="code" href="class____compressed__pair.xhtml#ab97264057266ee532a9ea2506e8034db">_T2_param</a>;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    </div>
<div class="line"><a name="l00454"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#aa177937ca1474c9eb3a6acfe0f55e757">  454</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> base::_T1_reference <a class="code" href="class____compressed__pair.xhtml#aa177937ca1474c9eb3a6acfe0f55e757">_T1_reference</a>;</div>
<div class="line"><a name="l00455"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#acf844ce4671b30144dd569eaa9de45eb">  455</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> base::_T2_reference <a class="code" href="class____compressed__pair.xhtml#acf844ce4671b30144dd569eaa9de45eb">_T2_reference</a>;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    </div>
<div class="line"><a name="l00457"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#ace2f1f92fec0609b31e6e7c5f267db0a">  457</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> base::_T1_const_reference <a class="code" href="class____compressed__pair.xhtml#ace2f1f92fec0609b31e6e7c5f267db0a">_T1_const_reference</a>;</div>
<div class="line"><a name="l00458"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a1f3f732472864a61c2a60ef5632d9566">  458</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> base::_T2_const_reference <a class="code" href="class____compressed__pair.xhtml#a1f3f732472864a61c2a60ef5632d9566">_T2_const_reference</a>;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    </div>
<div class="line"><a name="l00460"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">  460</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">__compressed_pair</a>() {}</div>
<div class="line"><a name="l00461"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#adcb0a74a8a351c548a20e094c80e1f33">  461</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">__compressed_pair</a>(<a class="code" href="class____compressed__pair.xhtml#a24117ae6ccdcffb0820479907feccf1e">_T1_param</a> __t1)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        : <a class="code" href="class____epub3__compressed__pair__imp.xhtml">base</a>(std::forward&lt;<a class="code" href="class____compressed__pair.xhtml#a24117ae6ccdcffb0820479907feccf1e">_T1_param</a>&gt;(__t1)) {}</div>
<div class="line"><a name="l00463"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a72f355152cfa6d81ed482f6ec1d9ba4d">  463</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keyword">explicit</span> <a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">__compressed_pair</a>(<a class="code" href="class____compressed__pair.xhtml#ab97264057266ee532a9ea2506e8034db">_T2_param</a> __t2)</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        : <a class="code" href="class____epub3__compressed__pair__imp.xhtml">base</a>(std::forward&lt;<a class="code" href="class____compressed__pair.xhtml#ab97264057266ee532a9ea2506e8034db">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00465"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#aaa349148015cc9603fa478e686d08edf">  465</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">__compressed_pair</a>(<a class="code" href="class____compressed__pair.xhtml#a24117ae6ccdcffb0820479907feccf1e">_T1_param</a> __t1, <a class="code" href="class____compressed__pair.xhtml#ab97264057266ee532a9ea2506e8034db">_T2_param</a> __t2)</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        : <a class="code" href="class____epub3__compressed__pair__imp.xhtml">base</a>(std::forward&lt;<a class="code" href="class____compressed__pair.xhtml#a24117ae6ccdcffb0820479907feccf1e">_T1_param</a>&gt;(__t1), std::forward&lt;<a class="code" href="class____compressed__pair.xhtml#ab97264057266ee532a9ea2506e8034db">_T2_param</a>&gt;(__t2)) {}</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00469"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a7755ad539f75b5aff9eb27472959afab">  469</a></span>&#160;    <a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">__compressed_pair</a>(<span class="keyword">const</span> <a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a>&amp; __p)</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;               std::is_nothrow_copy_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        : <a class="code" href="class____epub3__compressed__pair__imp.xhtml">base</a>(__p) {}</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00475"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a07d49d8ba7a6fd7b64fe273d2392676f">  475</a></span>&#160;    <a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a>&amp; <a class="code" href="class____compressed__pair.xhtml#a07d49d8ba7a6fd7b64fe273d2392676f">operator=</a>(<span class="keyword">const</span> <a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a>&amp; __p)</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_copy_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                   std::is_nothrow_copy_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    {</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        base::operator=(__p);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    </div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00484"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a4b9e3eb7468d9afd1a55fdc7df65f6bd">  484</a></span>&#160;    <a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">__compressed_pair</a>(<a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_constructible&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                   std::is_nothrow_move_constructible&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        : <a class="code" href="class____epub3__compressed__pair__imp.xhtml">base</a>(std::move(__p)) {}</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00490"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a15eeac8947b298e61676b4601875e664">  490</a></span>&#160;    <a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a>&amp; <a class="code" href="class____compressed__pair.xhtml#a07d49d8ba7a6fd7b64fe273d2392676f">operator=</a>(<a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a>&amp;&amp; __p)</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(std::is_nothrow_move_assignable&lt;_T1&gt;::value &amp;&amp;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                   std::is_nothrow_move_assignable&lt;_T2&gt;::value)</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        base::operator=(std::move(__p));</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Args1, <span class="keyword">class</span>... _Args2&gt;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <a class="code" href="class____compressed__pair.xhtml#abadf1513381fa5de5dafd5232289c8ca">__compressed_pair</a>(std::piecewise_construct_t __pc, std::tuple&lt;_Args1...&gt; __first_args,</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                                       std::tuple&lt;_Args2...&gt; __second_args)</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        : base(__pc, std::move(__first_args), std::move(__second_args),</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;               typename __make_tuple_indices&lt;sizeof...(_Args1)&gt;::type(),</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;               typename __make_tuple_indices&lt;sizeof...(_Args2)&gt;::type())</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        {}</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00508"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#adcdf99b819a938f25a88ec4cd4c30ace">  508</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____compressed__pair.xhtml#aa177937ca1474c9eb3a6acfe0f55e757">_T1_reference</a>          <a class="code" href="class____compressed__pair.xhtml#adcdf99b819a938f25a88ec4cd4c30ace">first</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>           { <span class="keywordflow">return</span> base::first(); }</div>
<div class="line"><a name="l00509"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a5824ffd7bd5b1be87ff639d6e64c8d8a">  509</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____compressed__pair.xhtml#ace2f1f92fec0609b31e6e7c5f267db0a">_T1_const_reference</a>    <a class="code" href="class____compressed__pair.xhtml#a5824ffd7bd5b1be87ff639d6e64c8d8a">first</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>     { <span class="keywordflow">return</span> base::first(); }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    </div>
<div class="line"><a name="l00511"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#ab6be860828af32bc00399e0f4a5a36cb">  511</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____compressed__pair.xhtml#acf844ce4671b30144dd569eaa9de45eb">_T2_reference</a>          <a class="code" href="class____compressed__pair.xhtml#ab6be860828af32bc00399e0f4a5a36cb">second</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>          { <span class="keywordflow">return</span> base::second(); }</div>
<div class="line"><a name="l00512"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a8ae52b138798209d3b99259ff4a794eb">  512</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <a class="code" href="class____compressed__pair.xhtml#a1f3f732472864a61c2a60ef5632d9566">_T2_const_reference</a>    <a class="code" href="class____compressed__pair.xhtml#a8ae52b138798209d3b99259ff4a794eb">second</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>    { <span class="keywordflow">return</span> base::second(); }</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    </div>
<div class="line"><a name="l00514"></a><span class="lineno"><a class="code" href="class____compressed__pair.xhtml#a03fb0d7924cff7a757f7d316c4f86a29">  514</a></span>&#160;    <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> <span class="keywordtype">void</span> <a class="code" href="class____compressed__pair.xhtml#a03fb0d7924cff7a757f7d316c4f86a29">swap</a>(<a class="code" href="class____compressed__pair.xhtml">__compressed_pair</a>&amp; __x)</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(<a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T1&gt;::value</a> &amp;&amp;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                   <a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T2&gt;::value</a>)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    {</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">base::swap</a>(__x);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    </div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;};</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _T1, <span class="keyword">class</span> _T2&gt;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00526"></a><span class="lineno"><a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">  526</a></span>&#160;<a class="code" href="compressed__pair_8h.xhtml#afd4fbcdab1861fa8025a90401a21b9a5">swap</a>(<a class="code" href="class____compressed__pair.xhtml">__compressed_pair&lt;_T1, _T2&gt;</a>&amp; __x, <a class="code" href="class____compressed__pair.xhtml">__compressed_pair&lt;_T1, _T2&gt;</a>&amp; __y)</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="__compiler_8h.xhtml#ad4c4a3ac6bd1cb96a9108497d2a44b00">_NOEXCEPT_</a>(<a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T1&gt;::value</a> &amp;&amp;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;               <a class="code" href="struct____is__nothrow__swappable.xhtml">__is_nothrow_swappable&lt;_T2&gt;::value</a>)</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;{</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    __x.swap(__y);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;}</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3__compressed_pair__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="compressed__pair_8h.xhtml">compressed_pair.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
