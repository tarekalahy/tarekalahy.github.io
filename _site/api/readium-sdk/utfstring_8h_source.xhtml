<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/utfstring.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('utfstring_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">utfstring.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utfstring_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  utfstring.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-11-22.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3_xml_string__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3_xml_string__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="basic_8h.xhtml">ePub3/utilities/basic.h</a>&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="integer__sequence_8h.xhtml">ePub3/utilities/integer_sequence.h</a>&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="string__view_8h.xhtml">ePub3/utilities/string_view.h</a>&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;initializer_list&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;locale&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include REGEX_INCLUDE</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;libxml/xmlstring.h&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">   42</a></span>&#160;<span class="preprocessor"></span><span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a59e101a5876de8aebb7d64348d68f770">   43</a></span>&#160;<span class="preprocessor">#define xmlStrlen(s) ::strlen(reinterpret_cast&lt;const char*&gt;(s))</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#if EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;ePub3/xml/xmlstring.h&gt;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#if EPUB_OS(WINDOWS)</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># include &lt;codecvt&gt;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &lt;utf8/utf8.h&gt;</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">// the GNU runtime hasn&#39;t updated std::string to the C++11 standard yet, so much of</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">// our `const_iterator` usage needs to be plain `iterator` to keep Android happy.</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#if defined(CXX11_STRING_UNAVAILABLE) &amp;&amp; CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># define cxx11_const_iterator iterator</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">   61</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor"># define cxx11_const_iterator const_iterator</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#afe7b8e253a0fd7698be48d0c034ac766">   66</a></span>&#160;<span class="keyword">class </span><a class="code" href="classstring.xhtml">string</a>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">typedef</span> std::map&lt;string, string&gt;  <a class="code" href="utfstring_8h.xhtml#afe7b8e253a0fd7698be48d0c034ac766">NamespaceMap</a>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">extern</span> <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="utfstring_8cpp.xhtml#ae9dd2e58eba6b74418fb7fa156fa116e">utf8_sizes</a>[256];</div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">   70</a></span>&#160;<span class="preprocessor">#define UTF8CharLen(c) ePub3::utf8_sizes[static_cast&lt;xmlChar&gt;(c)]</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="code" href="classstring.xhtml">   75</a></span>&#160;<span class="keyword">class </span><a class="code" href="classstring.xhtml">string</a></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">   78</a></span>&#160;    <span class="keyword">typedef</span> std::string                 <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">   80</a></span>&#160;    <span class="keyword">typedef</span> __base::size_type           <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a>;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="code" href="classstring.xhtml#afb4e9c2450f820d77de4fa80cc9eb9a7">   81</a></span>&#160;    <span class="keyword">typedef</span> __base::difference_type     <a class="code" href="classstring.xhtml#afb4e9c2450f820d77de4fa80cc9eb9a7">difference_type</a>;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="code" href="classstring.xhtml#a0eb9df193f2eaff4058bb173b3eeb3dc">   82</a></span>&#160;    <span class="keyword">typedef</span> std::char_traits&lt;char32_t&gt;  <a class="code" href="classstring.xhtml#a0eb9df193f2eaff4058bb173b3eeb3dc">traits_type</a>;</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">   83</a></span>&#160;    <span class="keyword">typedef</span> char32_t                    <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a>;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad4573ddde6b80235130619419d805d6a">   84</a></span>&#160;    <span class="keyword">typedef</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a>&amp;                 <a class="code" href="classstring.xhtml#ad4573ddde6b80235130619419d805d6a">reference</a>;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="code" href="classstring.xhtml#a237ee0cd652c3bee594812ea840e58b4">   85</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a>&amp;           <a class="code" href="classstring.xhtml#a237ee0cd652c3bee594812ea840e58b4">const_reference</a>;</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="code" href="classstring.xhtml#a827ff0d3607b5fe058614fe5f86260ac">   86</a></span>&#160;    <span class="keyword">typedef</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a>*                 <a class="code" href="classstring.xhtml#a827ff0d3607b5fe058614fe5f86260ac">u4pointer</a>;</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">   87</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a>*           <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">static</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> <a class="code" href="classstring.xhtml#afb4f6da67da53b03789b024c96a8e24c">utf8_to_utf32</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">static</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> <a class="code" href="classstring.xhtml#afb4f6da67da53b03789b024c96a8e24c">utf8_to_utf32</a>(<span class="keyword">const</span> __base::const_iterator p);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7ab8dbaa72c6afb0b7081710f8ce40d2">   93</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> <a class="code" href="classstring.xhtml#a7ab8dbaa72c6afb0b7081710f8ce40d2">utf8_of</a>(_CharT ch) { <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;_CharT&gt;::toUTF8</a>(ch); }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    </div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">   95</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">EmptyString</a>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    </div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml">   97</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml">InvalidUTF8Sequence</a> : std::invalid_argument {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml#ab9206d6acac32b7bec8bc6625ad998f2">   99</a></span>&#160;        <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml#ab9206d6acac32b7bec8bc6625ad998f2">InvalidUTF8Sequence</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str) : invalid_argument(str.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>()) {}</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml#a3d536f9243f40cf84f8366bbf9d6d1e1">  100</a></span>&#160;        <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml#a3d536f9243f40cf84f8366bbf9d6d1e1">InvalidUTF8Sequence</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * str) : invalid_argument(str) {}</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml#aa15e05154f416bd89985672021278b1d">  101</a></span>&#160;        <span class="keyword">virtual</span> <a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml#aa15e05154f416bd89985672021278b1d">~InvalidUTF8Sequence</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {}</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    };</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">  104</a></span>&#160;    <span class="keyword">typedef</span> utf8::iterator&lt;__base::iterator&gt;        <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">  105</a></span>&#160;    <span class="keyword">typedef</span> utf8::iterator&lt;__base::const_iterator&gt;  <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    </div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">  107</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Construction/Destruction</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// Standard</span></div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">  114</a></span>&#160;    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>() : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>() {}</div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5a702469fc20900ce62573598294d92f">  115</a></span>&#160;    <a class="code" href="classstring.xhtml#a5a702469fc20900ce62573598294d92f">string</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;o) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(o.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>) {}</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa26e6814fbf0fe95d041393922cc3be9">  116</a></span>&#160;    <a class="code" href="classstring.xhtml#aa26e6814fbf0fe95d041393922cc3be9">string</a>(<span class="keywordtype">string</span> &amp;&amp;o) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(std::move(o.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>)) {}</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9843afd396a991bc4a50e4acb78d1e65">  117</a></span>&#160;    <a class="code" href="classstring.xhtml#a9843afd396a991bc4a50e4acb78d1e65">string</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(s.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, s.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(i), s.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(i,n)) {}</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// From char32_t (value_type)</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s);   <span class="comment">// NUL-delimited</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(std::initializer_list&lt;value_type&gt; __il) : <a class="code" href="classstring.xhtml">string</a>(__il.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>(), __il.<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>()) {}</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// From char16_t (pure UTF-16)</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> char16_t* s);    <span class="comment">// NUL-delimited</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(std::initializer_list&lt;char16_t&gt; __il) : <a class="code" href="classstring.xhtml">string</a>(__il.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>(), __il.<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>()) {}</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// From wchar_t (pure UTF-16)</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* s);    <span class="comment">// NUL-delimited</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">wchar_t</span> c);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> std::wstring&amp; s);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(std::initializer_list&lt;wchar_t&gt; __il) : <a class="code" href="classstring.xhtml">string</a>(__il.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>(), __il.<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>()) {}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor">#if EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor"></span>    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> xml::string&amp; s);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// From std::string</span></div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="code" href="classstring.xhtml#afe087c84a0496aed7c2279d58d006bd9">  149</a></span>&#160;    <a class="code" href="classstring.xhtml#afe087c84a0496aed7c2279d58d006bd9">string</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;o) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(o) {}</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8ff90dc50cf42eb5adef6a42e6a79a76">  150</a></span>&#160;    <a class="code" href="classstring.xhtml#a8ff90dc50cf42eb5adef6a42e6a79a76">string</a>(<a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;&amp;o) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(o) {}</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// From char</span></div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="code" href="classstring.xhtml#af57b95218cf3f736e262a59fb90e7738">  154</a></span>&#160;    <a class="code" href="classstring.xhtml#af57b95218cf3f736e262a59fb90e7738">string</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(s) {}</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="code" href="classstring.xhtml#aba6bf3ae27bbdbfdaa11ed834730d97e">  155</a></span>&#160;    <a class="code" href="classstring.xhtml#aba6bf3ae27bbdbfdaa11ed834730d97e">string</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(s, n) {}</div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9c3ed3be28b310e25bb7af518143e385">  156</a></span>&#160;    <a class="code" href="classstring.xhtml#a9c3ed3be28b310e25bb7af518143e385">string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(n, c) {}</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// From xmlChar (unsigned char)</span></div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac0358f7a2a7d65ab0db9be7c07c251b1">  159</a></span>&#160;    <a class="code" href="classstring.xhtml#ac0358f7a2a7d65ab0db9be7c07c251b1">string</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(reinterpret_cast&lt;const char *&gt;(s)) {}</div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9fb5079513d002cd0c5986c86ab0a696">  160</a></span>&#160;    <a class="code" href="classstring.xhtml#a9fb5079513d002cd0c5986c86ab0a696">string</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(reinterpret_cast&lt;const char *&gt;(s)) {}</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="classstring.xhtml#adf3227094b908081f08265a6d45d383a">  161</a></span>&#160;    <a class="code" href="classstring.xhtml#adf3227094b908081f08265a6d45d383a">string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(n, static_cast&lt;char&gt;(c)) {}</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#if 0//EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(::Platform::String^ s) : <a class="code" href="classstring.xhtml">string</a>(s-&gt;Data(), s-&gt;Length()) {}</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(const ::Platform::StringReference&amp; s) : <a class="code" href="classstring.xhtml">string</a>(s.Data(), s.Length()) {}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// From string_view, u16string_view, u32string_view, wstring_view</span></div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad1d2ef81112912aac79152d96d8e820b">  169</a></span>&#160;    <a class="code" href="classstring.xhtml#ad1d2ef81112912aac79152d96d8e820b">string</a>(<span class="keyword">const</span> <a class="code" href="classbasic__string__view.xhtml">string_view</a>&amp; <a class="code" href="classstring.xhtml#ac25c03c90f274589b8ccfac0dd81087e">view</a>) : <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>(view.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>(), view.<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>()) {}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> <a class="code" href="classbasic__string__view.xhtml">u16string_view</a>&amp; <a class="code" href="classstring.xhtml#ac25c03c90f274589b8ccfac0dd81087e">view</a>);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> <a class="code" href="classbasic__string__view.xhtml">u32string_view</a>&amp; <a class="code" href="classstring.xhtml#ac25c03c90f274589b8ccfac0dd81087e">view</a>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<span class="keyword">const</span> <a class="code" href="classbasic__string__view.xhtml">wstring_view</a>&amp; <a class="code" href="classstring.xhtml#ac25c03c90f274589b8ccfac0dd81087e">view</a>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(InputIterator <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>, InputIterator <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">    template &lt;typename... Args&gt;</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">    string(const Args&amp;... args) : _base(_Str(args...)) {}</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa46b81ec44c09fc1bd81ebdbac9d1daf">  180</a></span>&#160;    <a class="code" href="classstring.xhtml#aa46b81ec44c09fc1bd81ebdbac9d1daf">~string</a>() {}</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Length/Iteration/Indexing</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="code" href="classstring.xhtml#a051c72132ba48143bf73150ac29ba665">  187</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a051c72132ba48143bf73150ac29ba665">length</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>(); }</div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7ae28b8592d2434559563706dd9e6a2b">  188</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a7ae28b8592d2434559563706dd9e6a2b">max_size</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.max_size()/<span class="keyword">sizeof</span>(<a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a>); }</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1e4d34bd6574c117666ea7435e3b5acf">  189</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a1e4d34bd6574c117666ea7435e3b5acf">capacity</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.capacity(); }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    </div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="classstring.xhtml#a708e8f77226917886c81e234d4ca339c">  191</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a708e8f77226917886c81e234d4ca339c">utf8_size</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.size(); }</div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5138a6601e8c6e948e8ee172680f8d52">  192</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a5138a6601e8c6e948e8ee172680f8d52">utf8_length</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a708e8f77226917886c81e234d4ca339c">utf8_size</a>(); }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">resize</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">resize</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    </div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab8b2c358440001bb3adc57c5cb00a8fc">  197</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#ab8b2c358440001bb3adc57c5cb00a8fc">reserve</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> res_arg = 0) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.reserve(res_arg*4); } <span class="comment">// best guess</span></div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="code" href="classstring.xhtml#a057c3a25bdccd2771f2d1ea6d9a1cd30">  198</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a057c3a25bdccd2771f2d1ea6d9a1cd30">shrink_to_fit</a>() { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.shrink_to_fit(); }</div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="code" href="classstring.xhtml#a61728c6a130781ce3d6d0f5cf42537d5">  199</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a61728c6a130781ce3d6d0f5cf42537d5">clear</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.clear(); }</div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">  200</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.empty(); }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    </div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">  202</a></span>&#160;    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end()); }</div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="code" href="classstring.xhtml#a194aad0ffb22780b76f42bde54bc8edc">  203</a></span>&#160;    <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> <a class="code" href="classstring.xhtml#a194aad0ffb22780b76f42bde54bc8edc">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end()); }</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="classstring.xhtml#a350b8142d031e1678ee70e89313507d9">  204</a></span>&#160;    <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> <a class="code" href="classstring.xhtml#a350b8142d031e1678ee70e89313507d9">cbegin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end()); }</div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">  205</a></span>&#160;    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end()); }</div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3602765dc65a97c0cbb7cafceec41fe5">  206</a></span>&#160;    <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> <a class="code" href="classstring.xhtml#a3602765dc65a97c0cbb7cafceec41fe5">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end()); }</div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="code" href="classstring.xhtml#a707dfee633e2f9ef1cd5a1269876dc1b">  207</a></span>&#160;    <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> <a class="code" href="classstring.xhtml#a707dfee633e2f9ef1cd5a1269876dc1b">cend</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end()); }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keyword">const</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> <a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">at</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> <a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">at</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    </div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7887b398d1cc17fe924bee6c16ee6d92">  212</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> <a class="code" href="classstring.xhtml#a7887b398d1cc17fe924bee6c16ee6d92">operator[]</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">at</a>(pos); }</div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="code" href="classstring.xhtml#a825f4cf79497227d26e54c2e10aa2130">  213</a></span>&#160;    <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> <a class="code" href="classstring.xhtml#a825f4cf79497227d26e54c2e10aa2130">operator[]</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">at</a>(pos); }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <a class="code" href="classstring.xhtml#a87093cbddedcdd7e65d1a7c68db80f1a">xmlAt</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <a class="code" href="classstring.xhtml#a87093cbddedcdd7e65d1a7c68db80f1a">xmlAt</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> <a class="code" href="classstring.xhtml#a2ea41866e34b3f28349389f26df6cb3a">utf8At</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Splitting</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// courtesy of: http://stackoverflow.com/questions/9435385/split-a-string-using-c11</span></div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7ea242429f8b63e5750cff43390f4fbb">  225</a></span>&#160;    <span class="keyword">inline</span> std::vector&lt;string&gt; <a class="code" href="classstring.xhtml#a7ea242429f8b63e5750cff43390f4fbb">split</a>(<span class="keyword">const</span> REGEX_NS::regex&amp; regex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="comment">// passing -1 as the submatch index parameter performs splitting</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        REGEX_NS:: sregex_token_iterator first(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end(), regex, -1), last;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;string&gt;(first, last);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Assign</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(InputIterator first, InputIterator last);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// standard</span></div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="code" href="classstring.xhtml#a361b58736449327c21db3aee8675ac3b">  240</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a361b58736449327c21db3aee8675ac3b">assign</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(o.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;o, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="code" href="classstring.xhtml#a484d70beb74ff0843394160b7d78a60d">  242</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a484d70beb74ff0843394160b7d78a60d">assign</a>(<span class="keywordtype">string</span> &amp;&amp;o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(std::move(o._base)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3c2509b32f521e1c33176256673d73b3">  243</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a3c2509b32f521e1c33176256673d73b3">operator=</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(o); }</div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7e22fc302e8adf0ed01578cb19639ae5">  244</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a7e22fc302e8adf0ed01578cb19639ae5">operator=</a>(<span class="keywordtype">string</span> &amp;&amp;o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(o); }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// char32_t</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8ead77515162fb85e4ef9cb41531e8c4">  248</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a8ead77515162fb85e4ef9cb41531e8c4">assign</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c) { <a class="code" href="classstring.xhtml#a61728c6a130781ce3d6d0f5cf42537d5">clear</a>(); <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">resize</a>(n, c); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(std::initializer_list&lt;value_type&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(__il.begin(), __il.end()); }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad02b66ae27ca6fe99159ba9b550b866e">  252</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad02b66ae27ca6fe99159ba9b550b866e">operator=</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(s, <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>); }</div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="code" href="classstring.xhtml#a75132309eb31b15f5b74765c000f420c">  253</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a75132309eb31b15f5b74765c000f420c">operator=</a>(<a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(1, c); }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a3c2509b32f521e1c33176256673d73b3">operator=</a>(std::initializer_list&lt;value_type&gt; l) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(l); }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// char16_t</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(<span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="code" href="classstring.xhtml#add311bc69bd8fada57806c88a8455f18">  260</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#add311bc69bd8fada57806c88a8455f18">assign</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c) { <a class="code" href="classstring.xhtml#a61728c6a130781ce3d6d0f5cf42537d5">clear</a>(); <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">resize</a>(n, static_cast&lt;value_type&gt;(c)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(std::initializer_list&lt;char16_t&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(__il.begin(), __il.end()); }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab26babbf2747afa886abebc95dfe1186">  264</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ab26babbf2747afa886abebc95dfe1186">operator=</a>(<span class="keyword">const</span> char16_t* s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(s, <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>); }</div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="code" href="classstring.xhtml#a201a3eb870e53afe8d7c8a1319338377">  265</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a201a3eb870e53afe8d7c8a1319338377">operator=</a>(char16_t c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(1, c); }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a3c2509b32f521e1c33176256673d73b3">operator=</a>(std::initializer_list&lt;char16_t&gt; l) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(l); }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">// std::string</span></div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac2b5e54ff6abbc9d64c565980964a796">  271</a></span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ac2b5e54ff6abbc9d64c565980964a796">assign</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(o); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00272"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad6b5054209affa9fb6466c553f2902ca">  272</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; o, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(o, i, n); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3041ddbf01f038a1ef865d140af3061f">  274</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a3041ddbf01f038a1ef865d140af3061f">assign</a>(<a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;&amp;o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(o); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00275"></a><span class="lineno"><a class="code" href="classstring.xhtml#aee4e755d0d7c2154df5f2cb85b6652cd">  275</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#aee4e755d0d7c2154df5f2cb85b6652cd">operator=</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(o); }</div>
<div class="line"><a name="l00276"></a><span class="lineno"><a class="code" href="classstring.xhtml#a74415135ff04b430204c3d14826679fd">  276</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a74415135ff04b430204c3d14826679fd">operator=</a>(<a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;&amp;o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(o); }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="comment">// char</span></div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="code" href="classstring.xhtml#a21bc4730bd48a4317b6979a64afc5673">  279</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a21bc4730bd48a4317b6979a64afc5673">assign</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(s, n); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00280"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1c81fee61135aaa639b0cae5553993e6">  280</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a1c81fee61135aaa639b0cae5553993e6">assign</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(s); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="code" href="classstring.xhtml#a89c97fd0d298be0bf4ec6155b478be91">  281</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a89c97fd0d298be0bf4ec6155b478be91">assign</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(n, c); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(std::initializer_list&lt;__base::value_type&gt; __il) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(__il); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00285"></a><span class="lineno"><a class="code" href="classstring.xhtml#abad6a59f7b25040643a4b836a07a11eb">  285</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#abad6a59f7b25040643a4b836a07a11eb">operator=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(s, __base::traits_type::length(s)); }</div>
<div class="line"><a name="l00286"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1c22a0d729faf80460f11157578fa41d">  286</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a1c22a0d729faf80460f11157578fa41d">operator=</a>(<span class="keywordtype">char</span> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(1, c); }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a3c2509b32f521e1c33176256673d73b3">operator=</a>(std::initializer_list&lt;__base::value_type&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(__il); }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// xmlChar</span></div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="code" href="classstring.xhtml#af3792a0010aa64d5dd476ba986465ad7">  292</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#af3792a0010aa64d5dd476ba986465ad7">assign</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(reinterpret_cast&lt;const char *&gt;(s), n); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="code" href="classstring.xhtml#a03efe6523a1aaf27140cd0dba2287788">  293</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a03efe6523a1aaf27140cd0dba2287788">assign</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(reinterpret_cast&lt;const char *&gt;(s), <a class="code" href="utfstring_8h.xhtml#a59e101a5876de8aebb7d64348d68f770">xmlStrlen</a>(s)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00294"></a><span class="lineno"><a class="code" href="classstring.xhtml#a392481117109494a1c549b33d6b7b4ae">  294</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a392481117109494a1c549b33d6b7b4ae">assign</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(n, static_cast&lt;char&gt;(c)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(std::initializer_list&lt;xmlChar&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(__il.begin(), __il.end()); }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="code" href="classstring.xhtml#ae89bfbf1f02a951ed25b2ab37f66f3af">  298</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae89bfbf1f02a951ed25b2ab37f66f3af">operator=</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(s, <a class="code" href="utfstring_8h.xhtml#a59e101a5876de8aebb7d64348d68f770">xmlStrlen</a>(s)); }</div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="code" href="classstring.xhtml#a0a58565bb176fa15ba897cd287a608b6">  299</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a0a58565bb176fa15ba897cd287a608b6">operator=</a>(<a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(1, c); }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a3c2509b32f521e1c33176256673d73b3">operator=</a>(std::initializer_list&lt;xmlChar&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">assign</a>(__il); }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Append</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(InputIterator first, InputIterator last);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(<span class="keyword">const</span> Args&amp;... args) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(<span class="keywordtype">string</span>(args...)); }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor"></span>    <span class="comment">// standard</span></div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="code" href="classstring.xhtml#a6e8cbb0c3442fc60ccbce360c384c1fd">  315</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a6e8cbb0c3442fc60ccbce360c384c1fd">append</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(o.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;o, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="code" href="classstring.xhtml#a76d832c53762a8365c315026f377233e">  317</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a76d832c53762a8365c315026f377233e">append</a>(<span class="keywordtype">string</span> &amp;&amp;o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(std::move(o._base)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00318"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7edc6e5b59dd7e039c45550046c95fc2">  318</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a7edc6e5b59dd7e039c45550046c95fc2">operator+=</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(o); }</div>
<div class="line"><a name="l00319"></a><span class="lineno"><a class="code" href="classstring.xhtml#af2b93a46d68bfd6c66dcc050ce8146d1">  319</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#af2b93a46d68bfd6c66dcc050ce8146d1">operator+=</a>(<span class="keywordtype">string</span> &amp;&amp;o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(o); }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// char32_t</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(std::initializer_list&lt;value_type&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(__il.begin(), __il.end()); }</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00327"></a><span class="lineno"><a class="code" href="classstring.xhtml#a50e65ae35aec658df5a8d19ceaa636f8">  327</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a50e65ae35aec658df5a8d19ceaa636f8">operator+=</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(s, <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>); }</div>
<div class="line"><a name="l00328"></a><span class="lineno"><a class="code" href="classstring.xhtml#a59a54bf92611bb073b71cd5fd0273b2c">  328</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a59a54bf92611bb073b71cd5fd0273b2c">operator+=</a>(<a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(1, c); }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a7edc6e5b59dd7e039c45550046c95fc2">operator+=</a>(std::initializer_list&lt;value_type&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(__il); }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">// char16_t</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(<span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(std::initializer_list&lt;char16_t&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(__il.begin(), __il.end()); }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00339"></a><span class="lineno"><a class="code" href="classstring.xhtml#afc5723d7bc43369d5bd5ce7207b973d1">  339</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afc5723d7bc43369d5bd5ce7207b973d1">operator+=</a>(<span class="keyword">const</span> char16_t* s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(s, <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>); }</div>
<div class="line"><a name="l00340"></a><span class="lineno"><a class="code" href="classstring.xhtml#a33fd6aa3d7e39d65d09ae51e12ef9c69">  340</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a33fd6aa3d7e39d65d09ae51e12ef9c69">operator+=</a>(char16_t c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(1, c); }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a7edc6e5b59dd7e039c45550046c95fc2">operator+=</a>(std::initializer_list&lt;char16_t&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(__il); }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="comment">// std::string</span></div>
<div class="line"><a name="l00346"></a><span class="lineno"><a class="code" href="classstring.xhtml#a631ba7710449ca1c61b3d982c61a72c4">  346</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a631ba7710449ca1c61b3d982c61a72c4">append</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(o); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00347"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab591e8f479dce82ceb39a174d3827561">  347</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ab591e8f479dce82ceb39a174d3827561">append</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; o, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(o, i, n); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="code" href="classstring.xhtml#a11fef1885c324fcd1e40e205f7b042f7">  348</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a11fef1885c324fcd1e40e205f7b042f7">append</a>(<a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;&amp;o) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(o); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac2f2cd70a01d07487ffd82f5023abe2f">  349</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ac2f2cd70a01d07487ffd82f5023abe2f">operator+=</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(o); }</div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="code" href="classstring.xhtml#a977c96d90103e5bc710976552093aaf5">  350</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a977c96d90103e5bc710976552093aaf5">operator+=</a>(<a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;&amp;o) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(o); }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// char</span></div>
<div class="line"><a name="l00353"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa9dfea4eb2c059a3a250b10b191a8c9a">  353</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#aa9dfea4eb2c059a3a250b10b191a8c9a">append</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(s, n); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00354"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8743c39f365d00147b460724e31f1a86">  354</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a8743c39f365d00147b460724e31f1a86">append</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(s); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00355"></a><span class="lineno"><a class="code" href="classstring.xhtml#a16933f4e70c69e8a8ad80ecc597a32af">  355</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a16933f4e70c69e8a8ad80ecc597a32af">append</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(n, c); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(std::initializer_list&lt;__base::value_type&gt; __il) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(__il); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00359"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2eff128f10305551501801fb5d28336d">  359</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a2eff128f10305551501801fb5d28336d">operator+=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(s); }</div>
<div class="line"><a name="l00360"></a><span class="lineno"><a class="code" href="classstring.xhtml#af9d2610eb933b8987407631c2586f21e">  360</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#af9d2610eb933b8987407631c2586f21e">operator+=</a>(<span class="keywordtype">char</span> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(1, c); }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a7edc6e5b59dd7e039c45550046c95fc2">operator+=</a>(std::initializer_list&lt;__base::value_type&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(__il); }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// xmlChar</span></div>
<div class="line"><a name="l00366"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3acb4bbe4a321fc6233e3e2653b75c9a">  366</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a3acb4bbe4a321fc6233e3e2653b75c9a">append</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(reinterpret_cast&lt;const char *&gt;(s), n); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00367"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4b5460bb5d6313544197eb6249b896ae">  367</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a4b5460bb5d6313544197eb6249b896ae">append</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(reinterpret_cast&lt;const char *&gt;(s), <a class="code" href="utfstring_8h.xhtml#a59e101a5876de8aebb7d64348d68f770">xmlStrlen</a>(s)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4165b75b9e540a5c564b3622e755f717">  368</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a4165b75b9e540a5c564b3622e755f717">append</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c) { <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(n, static_cast&lt;char&gt;(c)); <span class="keywordflow">return</span> *<span class="keyword">this</span>; }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(std::initializer_list&lt;xmlChar&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(__il.begin(), __il.end()); }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00372"></a><span class="lineno"><a class="code" href="classstring.xhtml#a665ee04d4474ee7f0915fcbf95d50ac3">  372</a></span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a665ee04d4474ee7f0915fcbf95d50ac3">operator+=</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *s) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(s, <a class="code" href="utfstring_8h.xhtml#a59e101a5876de8aebb7d64348d68f770">xmlStrlen</a>(s)); }</div>
<div class="line"><a name="l00373"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5773143a33a24a896e2b8c3ede69cbd8">  373</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a5773143a33a24a896e2b8c3ede69cbd8">operator+=</a>(<a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(1, c); }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a7edc6e5b59dd7e039c45550046c95fc2">operator+=</a>(std::initializer_list&lt;xmlChar&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(__il); }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Insertion</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, InputIterator first, InputIterator last);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <span class="keyword">const</span> Args&amp;... args) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(p, <span class="keywordtype">string</span>(args...)); }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <span class="keyword">const</span> Args&amp;... args) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(p, <span class="keywordtype">string</span>(args...)); }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor"></span>    <span class="comment">// standard</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    </div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="comment">// char32_t</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, std::initializer_list&lt;value_type&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(p, __il.begin(), __il.end()); }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="comment">// char16_t</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, std::initializer_list&lt;char16_t&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(p, __il.begin(), __il.end()); }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="comment">// std::string</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, __base::iterator b, __base::iterator e);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// char</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, std::initializer_list&lt;char&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(p, __il.begin(), __il.end()); }</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// xmlChar</span></div>
<div class="line"><a name="l00427"></a><span class="lineno"><a class="code" href="classstring.xhtml#a97e87d1140e0260bf81075987a0c7f12">  427</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>)</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a97e87d1140e0260bf81075987a0c7f12">insert</a>(p, reinterpret_cast&lt;const char*&gt;(s), b, e); }</div>
<div class="line"><a name="l00429"></a><span class="lineno"><a class="code" href="classstring.xhtml#ae1d3848a85b644e1fa1a232571230c7d">  429</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae1d3848a85b644e1fa1a232571230c7d">insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ae1d3848a85b644e1fa1a232571230c7d">insert</a>(p, n, static_cast&lt;char&gt;(c)); }</div>
<div class="line"><a name="l00430"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7757ea920d418b3845ced421495041dc">  430</a></span>&#160;    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a7757ea920d418b3845ced421495041dc">insert</a>(p, reinterpret_cast&lt;const char*&gt;(s), b, e); }</div>
<div class="line"><a name="l00432"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2502b047c0b47aec3d93c887027d5e20">  432</a></span>&#160;    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#a2502b047c0b47aec3d93c887027d5e20">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a2502b047c0b47aec3d93c887027d5e20">insert</a>(p, n, static_cast&lt;char&gt;(c)); }</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> p, std::initializer_list&lt;xmlChar&gt; __il) { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">insert</a>(p, __il.begin(), __il.end()); }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Erasing</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#af0ce19fec16ed458359c7c3dd51e3f46">erase</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#af0ce19fec16ed458359c7c3dd51e3f46">erase</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> pos);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> <a class="code" href="classstring.xhtml#af0ce19fec16ed458359c7c3dd51e3f46">erase</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> first, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> last);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Replacements</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> InputIterator&gt;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, InputIterator j1, InputIterator j2);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(VARIADIC_TEMPLATES)</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="preprocessor"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> Args&amp;... args) {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keywordtype">string</span> __s(args...);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(pos1, n1, __s);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, Args&amp;... args) {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordtype">string</span> __s(args...);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(i1, i2, __s);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="preprocessor"></span>    <span class="comment">// standard</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// char32_t</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, std::initializer_list&lt;value_type&gt; __il) {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(i1, i2, __il.begin(), __il.end());</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="comment">// char16_t</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> char16_t* s);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2, char16_t c);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> char16_t* s);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, std::initializer_list&lt;char16_t&gt; __il) {</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(i1, i2, __il.begin(), __il.end());</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    }</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="comment">// std::string</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; str);</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; str);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="comment">// char</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2);</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">char</span> * s);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2, <span class="keywordtype">char</span> c);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <span class="keywordtype">char</span> * s);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, std::initializer_list&lt;char&gt; __il) {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(i1, i2, __il.begin(), __il.end());</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="comment">// xmlChar</span></div>
<div class="line"><a name="l00513"></a><span class="lineno"><a class="code" href="classstring.xhtml#aeb715d0e515cb1b56e9718bcac3dfff1">  513</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#aeb715d0e515cb1b56e9718bcac3dfff1">replace</a>(pos, n1, reinterpret_cast&lt;const char*&gt;(s), n2); }</div>
<div class="line"><a name="l00515"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4a261580bd87194c53196236f53b1066">  515</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s)</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a4a261580bd87194c53196236f53b1066">replace</a>(pos, n1, reinterpret_cast&lt;const char*&gt;(s)); }</div>
<div class="line"><a name="l00517"></a><span class="lineno"><a class="code" href="classstring.xhtml#aaa7de8432d085fbe0d2f52342ac7359a">  517</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c)</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#aaa7de8432d085fbe0d2f52342ac7359a">replace</a>(pos, n1, n2, static_cast&lt;char&gt;(c)); }</div>
<div class="line"><a name="l00519"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7013c5b31333f59badeebd1d32fe6e51">  519</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a7013c5b31333f59badeebd1d32fe6e51">replace</a>(i1, i2, reinterpret_cast&lt;const char*&gt;(s), n); }</div>
<div class="line"><a name="l00521"></a><span class="lineno"><a class="code" href="classstring.xhtml#acac90434c30d1c389e5a14e2b37e0ddc">  521</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s)</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#acac90434c30d1c389e5a14e2b37e0ddc">replace</a>(i1, i2, reinterpret_cast&lt;const char*&gt;(s)); }</div>
<div class="line"><a name="l00523"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9242a1b4fce19ee3497d91e4108b29ee">  523</a></span>&#160;    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c)</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a9242a1b4fce19ee3497d91e4108b29ee">replace</a>(i1, i2, n, static_cast&lt;char&gt;(c)); }</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, std::initializer_list&lt;xmlChar&gt; __il) {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">replace</a>(i1, i2, __il.begin(), __il.end());</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Outputs</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a383564cfaac408dba9d96e4e37843bf6">copy</a>(<a class="code" href="classstring.xhtml#a827ff0d3607b5fe058614fe5f86260ac">u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a383564cfaac408dba9d96e4e37843bf6">copy</a>(char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00537"></a><span class="lineno"><a class="code" href="classstring.xhtml#adc7b329f1e9170fd0b8a7fb3498835b3">  537</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#adc7b329f1e9170fd0b8a7fb3498835b3">copyC</a>(<span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.copy(s, n, pos); }</div>
<div class="line"><a name="l00538"></a><span class="lineno"><a class="code" href="classstring.xhtml#ace5ef26f3cedda04c620443824c6ede1">  538</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#ace5ef26f3cedda04c620443824c6ede1">copyXML</a>(<a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.copy(reinterpret_cast&lt;char*&gt;(s), n, pos); }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    </div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    </div>
<div class="line"><a name="l00542"></a><span class="lineno"><a class="code" href="classstring.xhtml#a185a36265bc48a495fc4140053c23178">  542</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a185a36265bc48a495fc4140053c23178">swap</a>(<span class="keywordtype">string</span> &amp; str)</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="preprocessor">#ifdef _LIBCPP_VERSION      // specific to LLVM libc++ runtime</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor"></span>    <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>(!__base::__alloc_traits::propagate_on_container_swap::value || std::__is_nothrow_swappable&lt;__base::__alloc_traits&gt;::value)</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="preprocessor"></span>    {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.swap(str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    }</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> std::u32string <a class="code" href="classstring.xhtml#a855707c67bb7d50f93f836394a2fdaf4">utf32string</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00551"></a><span class="lineno"><a class="code" href="classstring.xhtml#adf439480715eb86b26777f9bb5028f1d">  551</a></span>&#160;    <span class="keyword">inline</span> <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> <a class="code" href="classstring.xhtml#adf439480715eb86b26777f9bb5028f1d">utf32</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a855707c67bb7d50f93f836394a2fdaf4">utf32string</a>().c_str(); }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> std::u16string <a class="code" href="classstring.xhtml#ac536ec55387a215f506cb76e56b91ce8">utf16string</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00554"></a><span class="lineno"><a class="code" href="classstring.xhtml#a408aedef03ff148d246d21c25c762f9e">  554</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">const</span> char16_t* <a class="code" href="classstring.xhtml#a408aedef03ff148d246d21c25c762f9e">utf16</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ac536ec55387a215f506cb76e56b91ce8">utf16string</a>().c_str(); }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> std::wstring <a class="code" href="classstring.xhtml#a27209c5cb7609e20062324ce55a8e7f2">wchar_string</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00557"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa90e3b2dc3cc15045710eb1297137aef">  557</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* <a class="code" href="classstring.xhtml#aa90e3b2dc3cc15045710eb1297137aef">wchar_str</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a27209c5cb7609e20062324ce55a8e7f2">wchar_string</a>().c_str(); }</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    </div>
<div class="line"><a name="l00559"></a><span class="lineno"><a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">  559</a></span>&#160;    __base::const_pointer <a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.c_str(); }</div>
<div class="line"><a name="l00560"></a><span class="lineno"><a class="code" href="classstring.xhtml#a13ba64038a761eae37abec55273003a2">  560</a></span>&#160;    __base::const_pointer <a class="code" href="classstring.xhtml#a13ba64038a761eae37abec55273003a2">data</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.data(); }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    </div>
<div class="line"><a name="l00562"></a><span class="lineno"><a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">  562</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>&amp; <a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>; }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    </div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac25c03c90f274589b8ccfac0dd81087e">  564</a></span>&#160;    <a class="code" href="classbasic__string__view.xhtml">string_view</a> <a class="code" href="classstring.xhtml#ac25c03c90f274589b8ccfac0dd81087e">view</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="string__view_8h.xhtml#a5d6bbf71ea9bff8e61ba89717123ebff">string_view</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>); }</div>
<div class="line"><a name="l00565"></a><span class="lineno"><a class="code" href="classstring.xhtml#a08ae8c66eb34f698cdf692d7c44f8414">  565</a></span>&#160;    <span class="keyword">operator</span> <a class="code" href="string__view_8h.xhtml#a5d6bbf71ea9bff8e61ba89717123ebff">string_view</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ac25c03c90f274589b8ccfac0dd81087e">view</a>(); }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="preprocessor">#if 0//EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="preprocessor"></span>    ::Platform::String^ winrt_str() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    operator ::Platform::String^() <span class="keyword">const</span> { <span class="keywordflow">return</span> winrt_str(); }</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00572"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">  572</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *<span class="keyword">&gt;</span>(<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>()); }</div>
<div class="line"><a name="l00573"></a><span class="lineno"><a class="code" href="classstring.xhtml#a90ed1b87040abeb2a6bd65e826ff6114">  573</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <a class="code" href="classstring.xhtml#a90ed1b87040abeb2a6bd65e826ff6114">xml_str</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*<span class="keyword">&gt;</span>(<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>()); }</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    </div>
<div class="line"><a name="l00575"></a><span class="lineno"><a class="code" href="classstring.xhtml#a73e8192386db2f8b9d773f8ad29b242e">  575</a></span>&#160;    __base::allocator_type <a class="code" href="classstring.xhtml#a73e8192386db2f8b9d773f8ad29b242e">get_allocator</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.get_allocator(); }</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span>&amp; <a class="code" href="classstring.xhtml#afb979c58f37bc9b69f2ce5d43fe00820">tolower</a>(<span class="keyword">const</span> std::locale&amp; loc = std::locale(<span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#afb979c58f37bc9b69f2ce5d43fe00820">tolower</a>(<span class="keyword">const</span> std::locale&amp; loc = std::locale(<span class="stringliteral">&quot;&quot;</span>)) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keywordtype">string</span>&amp; <a class="code" href="classstring.xhtml#a765b90173d8c7257c9ed672f0ed921ed">toupper</a>(<span class="keyword">const</span> std::locale&amp; loc = std::locale(<span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="__config_8h.xhtml#a0590ab5cb2aa738973dc05a6bf17a425">EPUB3_EXPORT</a> <span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#a765b90173d8c7257c9ed672f0ed921ed">toupper</a>(<span class="keyword">const</span> std::locale&amp; loc = std::locale(<span class="stringliteral">&quot;&quot;</span>)) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    </div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Searching</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00587"></a><span class="lineno"><a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">  587</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.find(str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    }</div>
<div class="line"><a name="l00590"></a><span class="lineno"><a class="code" href="classstring.xhtml#af244a36e2cbbbb65ac28d33182b83d86">  590</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#af244a36e2cbbbb65ac28d33182b83d86">find</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.find(str, <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    }</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00594"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab78c12d670a704e076ab38e528663840">  594</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#ab78c12d670a704e076ab38e528663840">find</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.find(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s, 0, n), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    }</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00598"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8fb50433bdcc3da86a1ddb27464b9b4d">  598</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a8fb50433bdcc3da86a1ddb27464b9b4d">find</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = 0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.find(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00602"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad3ba64f1db54aa28520fc04f8cc8619f">  602</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#ad3ba64f1db54aa28520fc04f8cc8619f">find</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = 0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.find(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(c), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    </div>
<div class="line"><a name="l00606"></a><span class="lineno"><a class="code" href="classstring.xhtml#a646c4270831260d2e77cea0e3b704538">  606</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a646c4270831260d2e77cea0e3b704538">rfind</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.rfind(str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    }</div>
<div class="line"><a name="l00609"></a><span class="lineno"><a class="code" href="classstring.xhtml#a802e74bee01815fa87145f4eed8e76ba">  609</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a802e74bee01815fa87145f4eed8e76ba">rfind</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.rfind(str, <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00613"></a><span class="lineno"><a class="code" href="classstring.xhtml#a881d1242246492d4ce58e9211f801d48">  613</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a881d1242246492d4ce58e9211f801d48">rfind</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.rfind(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s, 0, n), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    }</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00617"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa95264d91d7aaf45bdbdc37498b0f1d6">  617</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#aa95264d91d7aaf45bdbdc37498b0f1d6">rfind</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.rfind(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    }</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00621"></a><span class="lineno"><a class="code" href="classstring.xhtml#a98dbd5fb127e384e7172ee765c041911">  621</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a98dbd5fb127e384e7172ee765c041911">rfind</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.rfind(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(c), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    }</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    </div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _ForwardIterator1, <span class="keyword">class</span> _ForwardIterator2, <span class="keyword">class</span> _BinaryPredicate&gt;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    _ForwardIterator1</div>
<div class="line"><a name="l00627"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac98aeabd09f4ff5abccbb96abaf822d1">  627</a></span>&#160;    <a class="code" href="classstring.xhtml#ac98aeabd09f4ff5abccbb96abaf822d1">find_first_of</a>(_ForwardIterator1 __first1, _ForwardIterator1 __last1,</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                  _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    {</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordflow">for</span> (; __first1 != __last1; ++__first1)</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            <span class="keywordflow">for</span> (_ForwardIterator2 __j = __first2; __j != __last2; ++__j)</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                <span class="keywordflow">if</span> (__pred(*__first1, *__j))</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                    <span class="keywordflow">return</span> __first1;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        <span class="keywordflow">return</span> __last1;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    }</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    </div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _Traits&gt;</div>
<div class="line"><a name="l00638"></a><span class="lineno"><a class="code" href="structstring_1_1____traits__eq.xhtml">  638</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="__config_8h.xhtml#a57279d342ddfd0707ee8ece65b1bf8ad">_LIBCPP_HIDDEN</a> <a class="code" href="structstring_1_1____traits__eq.xhtml">__traits_eq</a></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    {</div>
<div class="line"><a name="l00640"></a><span class="lineno"><a class="code" href="structstring_1_1____traits__eq.xhtml#a4f12f4fa5fd637a222deb3b6d47b0de0">  640</a></span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> _Traits::char_type <a class="code" href="structstring_1_1____traits__eq.xhtml#a4f12f4fa5fd637a222deb3b6d47b0de0">char_type</a>;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <a class="code" href="__config_8h.xhtml#a19bb97c40e65a3aee84388594537970b">_LIBCPP_INLINE_VISIBILITY</a></div>
<div class="line"><a name="l00642"></a><span class="lineno"><a class="code" href="structstring_1_1____traits__eq.xhtml#a10fcdbc85b659a2152baffc4d8f493e0">  642</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="structstring_1_1____traits__eq.xhtml#a10fcdbc85b659a2152baffc4d8f493e0">operator()</a>(<span class="keyword">const</span> <a class="code" href="structstring_1_1____traits__eq.xhtml#a4f12f4fa5fd637a222deb3b6d47b0de0">char_type</a>&amp; __x, <span class="keyword">const</span> <a class="code" href="structstring_1_1____traits__eq.xhtml#a4f12f4fa5fd637a222deb3b6d47b0de0">char_type</a>&amp; __y) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            <span class="keywordflow">return</span> _Traits::eq(__x, __y);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        }</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    };</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    </div>
<div class="line"><a name="l00647"></a><span class="lineno"><a class="code" href="classstring.xhtml#a70700f69f6338759b4c7cc2163c89f99">  647</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a70700f69f6338759b4c7cc2163c89f99">find_first_of</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keyword">auto</span> __r = <a class="code" href="classstring.xhtml#ac98aeabd09f4ff5abccbb96abaf822d1">find_first_of</a>(<a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, pos), <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>(), str.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>(), str.<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>(), <a class="code" href="structstring_1_1____traits__eq.xhtml">__traits_eq&lt;traits_type&gt;</a>());</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keywordflow">if</span> ( __r == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">return</span> utf8::distance(<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>().base(), __r.base());</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    }</div>
<div class="line"><a name="l00653"></a><span class="lineno"><a class="code" href="classstring.xhtml#a58290b2629205297c2f1bcc4050de8f2">  653</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a58290b2629205297c2f1bcc4050de8f2">find_first_of</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(str.substr(pos));</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keyword">auto</span> __r = <a class="code" href="classstring.xhtml#ac98aeabd09f4ff5abccbb96abaf822d1">find_first_of</a>(<a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, pos), <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>(), <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(str.begin(), str.begin(), str.end()), <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a>(str.end(), str.begin(), str.end()), <a class="code" href="structstring_1_1____traits__eq.xhtml">__traits_eq&lt;traits_type&gt;</a>());</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <span class="keywordflow">if</span> ( __r == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keywordflow">return</span> utf8::distance(<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>().base(), __r.base());</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    }</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00661"></a><span class="lineno"><a class="code" href="classstring.xhtml#acd09cf2f22876df8579f72360de8d8db">  661</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#acd09cf2f22876df8579f72360de8d8db">find_first_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ac98aeabd09f4ff5abccbb96abaf822d1">find_first_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s, 0, n), pos);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    }</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00665"></a><span class="lineno"><a class="code" href="classstring.xhtml#ae9bd0508479d6df016934e3b60433c81">  665</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#ae9bd0508479d6df016934e3b60433c81">find_first_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = 0)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(s+pos, <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ac98aeabd09f4ff5abccbb96abaf822d1">find_first_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00670"></a><span class="lineno"><a class="code" href="classstring.xhtml#a72178f3f5a41b02fd966d097a6d0b8d8">  670</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a72178f3f5a41b02fd966d097a6d0b8d8">find_first_of</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = 0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keyword">auto</span> __r = std::find_first_of(<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>()+pos, <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>(), &amp;c, ((&amp;c) + <span class="keyword">sizeof</span>(_CharT)));</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keywordflow">if</span> ( __r == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordflow">return</span> utf8::distance(<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>().base(), __r.base());</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    </div>
<div class="line"><a name="l00677"></a><span class="lineno"><a class="code" href="classstring.xhtml#af5c0d3abfe2702a234c68fd10c18266a">  677</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#af5c0d3abfe2702a234c68fd10c18266a">find_last_of</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __sz = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keywordflow">if</span> ( pos &lt; __sz )</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            ++pos;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            pos = __sz;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __p = <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __ps = __p + pos; __ps != __p; )</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        {</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __r = str.<a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(*--__ps);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <span class="keywordflow">if</span> ( __r != <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="keywordflow">return</span> utf8::distance(<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>().base(), __ps.base());</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        }</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    }</div>
<div class="line"><a name="l00692"></a><span class="lineno"><a class="code" href="classstring.xhtml#a66e03c8fced948241b85add467e94939">  692</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a66e03c8fced948241b85add467e94939">find_last_of</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(str.substr(pos));</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __sz = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <span class="keywordflow">if</span> ( pos &lt; __sz )</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            ++pos;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            pos = __sz;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __p = <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __ps = __p + pos; __ps != __p; )</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        {</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __r = str.find((--__ps).utf8char());</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="keywordflow">if</span> ( __r != <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="keywordflow">return</span> utf8::distance(<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>().base(), __ps.base());</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        }</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    }</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00709"></a><span class="lineno"><a class="code" href="classstring.xhtml#a97f7af50e369087bcb825ebb92565661">  709</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a97f7af50e369087bcb825ebb92565661">find_last_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af5c0d3abfe2702a234c68fd10c18266a">find_last_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s, 0, n), pos);</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    }</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00713"></a><span class="lineno"><a class="code" href="classstring.xhtml#a67bbcae1088dcfd698c52892100d028c">  713</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a67bbcae1088dcfd698c52892100d028c">find_last_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af5c0d3abfe2702a234c68fd10c18266a">find_last_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    }</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00717"></a><span class="lineno"><a class="code" href="classstring.xhtml#a975a736f578527d88ea3d6ce89275ab9">  717</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a975a736f578527d88ea3d6ce89275ab9">find_last_of</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a646c4270831260d2e77cea0e3b704538">rfind</a>(c, pos);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    }</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    </div>
<div class="line"><a name="l00721"></a><span class="lineno"><a class="code" href="classstring.xhtml#a69ca3168005b323efae49dc3f6f29da4">  721</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a69ca3168005b323efae49dc3f6f29da4">find_first_not_of</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __sz = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="keywordflow">if</span> ( pos &lt; __sz )</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        {</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __p = <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __pe = <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>();</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __ps = __p + pos; __ps != __pe; ++__ps )</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                <span class="keywordflow">if</span> ( str.<a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(*__ps) == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    <span class="keywordflow">return</span> utf8::distance(__p.base(), __ps.base());</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        }</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    }</div>
<div class="line"><a name="l00733"></a><span class="lineno"><a class="code" href="classstring.xhtml#aba2965a2078556fc931e67dbac03bd1b">  733</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#aba2965a2078556fc931e67dbac03bd1b">find_first_not_of</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(str.substr(pos));</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __sz = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordflow">if</span> ( pos &lt; __sz )</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        {</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __p = <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __pe = <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>();</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __ps = __p + pos; __ps != __pe; ++__ps )</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                <span class="keywordflow">if</span> ( str.find(__ps.utf8char()) == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                    <span class="keywordflow">return</span> utf8::distance(__p.base(), __ps.base());</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        }</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    }</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00747"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7af1febbf22e1cc6f7f75484ed2ce1b7">  747</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a7af1febbf22e1cc6f7f75484ed2ce1b7">find_first_not_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a69ca3168005b323efae49dc3f6f29da4">find_first_not_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s, 0, n), pos);</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    }</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00751"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab937d5faa0984500cc0a55bbe2f1dc40">  751</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#ab937d5faa0984500cc0a55bbe2f1dc40">find_first_not_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = 0)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a69ca3168005b323efae49dc3f6f29da4">find_first_not_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    }</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00755"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad1213f51912cb6ac8abd3760d6223ba9">  755</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#ad1213f51912cb6ac8abd3760d6223ba9">find_first_not_of</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = 0) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a69ca3168005b323efae49dc3f6f29da4">find_first_not_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(c), pos);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    }</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    </div>
<div class="line"><a name="l00759"></a><span class="lineno"><a class="code" href="classstring.xhtml#a452ac115302bd6054c6ce8dd75ea045b">  759</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a452ac115302bd6054c6ce8dd75ea045b">find_last_not_of</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __sz = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="keywordflow">if</span> ( pos &lt; __sz )</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            ++pos;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            pos = __sz;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __p = <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __ps = __p + pos; __ps != __p; )</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="keywordflow">if</span> ( str.<a class="code" href="classstring.xhtml#a37f7e313ee9a39ef3e06b535efa7870c">find</a>(*--__ps) == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                <span class="keywordflow">return</span> utf8::distance(__p.base(), __ps.base());</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    }</div>
<div class="line"><a name="l00771"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8d43cbabbd68d871c264d6bc736d3aeb">  771</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a8d43cbabbd68d871c264d6bc736d3aeb">find_last_not_of</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>&amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __sz = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        <span class="keywordflow">if</span> ( pos &lt; __sz )</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;            ++pos;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            pos = __sz;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __p = <a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>();</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> __ps = __p + pos; __ps != __p; )</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            <span class="keywordflow">if</span> ( str.find((--__ps).utf8char()) == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                <span class="keywordflow">return</span> utf8::distance(__p.base(), __ps.base());</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    }</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00784"></a><span class="lineno"><a class="code" href="classstring.xhtml#a62253eda68706a8a3560cbbaac008d59">  784</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a62253eda68706a8a3560cbbaac008d59">find_last_not_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a452ac115302bd6054c6ce8dd75ea045b">find_last_not_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s, 0, n), pos);</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    }</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00788"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac81af2dc893fdaaf8200a0a1d18c36d9">  788</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#ac81af2dc893fdaaf8200a0a1d18c36d9">find_last_not_of</a>(<span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a452ac115302bd6054c6ce8dd75ea045b">find_last_not_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    }</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00792"></a><span class="lineno"><a class="code" href="classstring.xhtml#adc1e2000c4bf1eef235124a85fd079c0">  792</a></span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#adc1e2000c4bf1eef235124a85fd079c0">find_last_not_of</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos = <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a452ac115302bd6054c6ce8dd75ea045b">find_last_not_of</a>(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(c), pos);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    }</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    </div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Comparisons</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00800"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">  800</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    }</div>
<div class="line"><a name="l00803"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7b9cace1ac4868c838e8b5542973d949">  803</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a7b9cace1ac4868c838e8b5542973d949">compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    }</div>
<div class="line"><a name="l00806"></a><span class="lineno"><a class="code" href="classstring.xhtml#aab4f692a9d6b974ad1fae0ddf28ba888">  806</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str,</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1),</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                             str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, str.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos2), str.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos2, pos2+n2));</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    }</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    </div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <span class="comment">// there exist specializations for char32_t</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00814"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4bf5bd229d123312d2d9cf242f79e091">  814</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a4bf5bd229d123312d2d9cf242f79e091">compare</a>(<span class="keyword">const</span> _CharT * s) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        <span class="keyword">auto</span> str(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(str);</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    }</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00819"></a><span class="lineno"><a class="code" href="classstring.xhtml#a0b89e1fa6820af4b3f0b01685a58908d">  819</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a0b89e1fa6820af4b3f0b01685a58908d">compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> _CharT * s)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    }</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00823"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2d8d8faa664ead00abfc8304690a2ff1">  823</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a2d8d8faa664ead00abfc8304690a2ff1">compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> _CharT * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s, 0, n2));</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    }</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00827"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac7cc5069c0e5e5a8ae7171bd258069da">  827</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#ac7cc5069c0e5e5a8ae7171bd258069da">compare</a>(<span class="keyword">const</span> std::basic_string&lt;_CharT&gt; &amp; s) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    }</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00831"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2261d8c911a826ca345ddf5109d57a9c">  831</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a2261d8c911a826ca345ddf5109d57a9c">compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> std::basic_string&lt;_CharT&gt;&amp; str)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(str));</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    }</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00835"></a><span class="lineno"><a class="code" href="classstring.xhtml#a24f9dc3138f254c29e153b07a804df13">  835</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> std::basic_string&lt;_CharT&gt;&amp; str,</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.compare(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;_CharT&gt;::toUTF8</a>(str, pos2, n2));</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    }</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    </div>
<div class="line"><a name="l00840"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9e5147dd29baf4205a4271dfffd84b4b">  840</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a9e5147dd29baf4205a4271dfffd84b4b">operator == </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(str) == 0; }</div>
<div class="line"><a name="l00841"></a><span class="lineno"><a class="code" href="classstring.xhtml#a06cd43201daadc884d8082d806d092c3">  841</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a06cd43201daadc884d8082d806d092c3">operator != </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(str) != 0; }</div>
<div class="line"><a name="l00842"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7eca482cdd34801ef2f320390f3af05d">  842</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a7eca482cdd34801ef2f320390f3af05d">operator &gt; </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(str) &gt; 0; }</div>
<div class="line"><a name="l00843"></a><span class="lineno"><a class="code" href="classstring.xhtml#ae0db2b766c3db1379f2b21aac1496d9c">  843</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#ae0db2b766c3db1379f2b21aac1496d9c">operator &gt;= </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(str) &gt;= 0; }</div>
<div class="line"><a name="l00844"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3eda63be710dd93df11af41fed42dc1f">  844</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a3eda63be710dd93df11af41fed42dc1f">operator &lt; </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(str) &lt; 0; }</div>
<div class="line"><a name="l00845"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac2bca6d0a1df651ce541ce6676462cee">  845</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#ac2bca6d0a1df651ce541ce6676462cee">operator &lt;= </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">compare</a>(str) &lt;= 0; }</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    </div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00848"></a><span class="lineno"><a class="code" href="classstring.xhtml#a28a96cf80c7f843d1b0fadc9492d56c6">  848</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a9e5147dd29baf4205a4271dfffd84b4b">operator == </a>(<span class="keyword">const</span> _CharT * str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> compare&lt;_CharT&gt;(str) == 0; }</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00850"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad2951936aae5cd26f0ccf59801e17ac6">  850</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a06cd43201daadc884d8082d806d092c3">operator != </a>(<span class="keyword">const</span> _CharT * str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> compare&lt;_CharT&gt;(str) != 0; }</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00852"></a><span class="lineno"><a class="code" href="classstring.xhtml#a74e9a3fc365d846f6e8b94acee9eae65">  852</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a7eca482cdd34801ef2f320390f3af05d">operator &gt; </a>(<span class="keyword">const</span> _CharT * str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> compare&lt;_CharT&gt;(str) &gt; 0; }</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00854"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5614ed3fd8f4dba1828f162b110c5210">  854</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#ae0db2b766c3db1379f2b21aac1496d9c">operator &gt;= </a>(<span class="keyword">const</span> _CharT * str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> compare&lt;_CharT&gt;(str) &gt;= 0; }</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00856"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad01d9cb89a7032b62a357fc8ddca3d2c">  856</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#a3eda63be710dd93df11af41fed42dc1f">operator &lt; </a>(<span class="keyword">const</span> _CharT * str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> compare&lt;_CharT&gt;(str) &lt; 0; }</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT&gt;</div>
<div class="line"><a name="l00858"></a><span class="lineno"><a class="code" href="classstring.xhtml#af03b0b43e88ef8c900ac6a6e93b7aa9c">  858</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classstring.xhtml#ac2bca6d0a1df651ce541ce6676462cee">operator &lt;= </a>(<span class="keyword">const</span> _CharT * str) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> compare&lt;_CharT&gt;(str) &lt;= 0; }</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    </div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="preprocessor">#ifdef _LIBCPP_VERSION</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">bool</span> __invariants()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.__invariants(); }</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00865"></a><span class="lineno"><a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">  865</a></span>&#160;    <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a>      <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    </div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    </div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    </div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    __base::size_type <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __n) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    __base::size_type <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __e) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(__base::size_type __n) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(__base::size_type __b, __base::size_type __e) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keyword">static</span> <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> <a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a">utf32_distance</a>(__base::const_iterator first, __base::const_iterator last) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a>;</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    </div>
<div class="line"><a name="l00881"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac6eba7cac4bb56076c1f162b1608f47e">  881</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="__compiler_8h.xhtml#acaa06fbc27c59926a41e7575667e5280">CONSTEXPR</a> __base::const_pointer <a class="code" href="classstring.xhtml#ac6eba7cac4bb56076c1f162b1608f47e">_bchar</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * c) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> (__base::const_pointer)(c); }</div>
<div class="line"><a name="l00882"></a><span class="lineno"><a class="code" href="classstring.xhtml#a85244314c93ed0ad44a8a64d67f536f2">  882</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="__compiler_8h.xhtml#acaa06fbc27c59926a41e7575667e5280">CONSTEXPR</a> __base::pointer <a class="code" href="classstring.xhtml#a85244314c93ed0ad44a8a64d67f536f2">_bchar</a>(<a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * c) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> { <span class="keywordflow">return</span> (__base::pointer)(c); }</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    </div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="preprocessor">#if UTF_USE_ICU</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="preprocessor"></span>    <span class="comment">// ICU version, since GNU libstdc++ hasn&#39;t implemented wstring_convert or codecvt_utf8 yet</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _CharT&gt;</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keyword">class </span>_Convert {</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        <span class="keyword">typedef</span> std::basic_string&lt;char&gt;     <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a>;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        <span class="keyword">typedef</span> std::basic_string&lt;_CharT&gt;   <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a>;</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        </div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(<span class="keyword">const</span> _CharT* p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;            UErrorCode uerr = U_ZERO_ERROR;</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;            UChar* __up = __to_UChar(p, &amp;pos, &amp;n);</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            UConverter* cvt = ucnv_open(<span class="stringliteral">&quot;utf-8&quot;</span>, &amp;uerr);</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> __out;</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            __out.resize(2*n);</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;            __up = __up + pos;</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;            </div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            __out.resize(ucnv_fromUChars(cvt, const_cast&lt;char*&gt;(__out.data()), static_cast&lt;int32_t&gt;(__out.size()), __up, static_cast&lt;int32_t&gt;(n), &amp;uerr));</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;            <span class="keywordflow">if</span> ( uerr == U_BUFFER_OVERFLOW_ERROR )</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                ucnv_fromUChars(cvt, const_cast&lt;char*&gt;(__out.data()), static_cast&lt;int32_t&gt;(__out.size()), __up, static_cast&lt;int32_t&gt;(n), &amp;uerr);</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;            </div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;            ucnv_close(cvt);</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;            <span class="keywordflow">if</span> ( (<span class="keywordtype">void</span>*)__up != (<span class="keywordtype">void</span>*)p )</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                <span class="keyword">delete</span> [] __up;</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            </div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <span class="keywordflow">return</span> __out;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a>&amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;            <span class="keywordflow">return</span> ( <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(s.c_str(), pos, n) );</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        }</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1)</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        {</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;            <span class="keywordflow">if</span> ( n == 1 )</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(&amp;c, 0, 1);</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;            _CharT* __buf = <span class="keyword">new</span> _CharT[n];</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;            <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n; i++ )</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                __buf[i] = c;</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;            </div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            UErrorCode uerr = U_ZERO_ERROR;</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;            UChar* __up = __to_UChar(__buf, NULL, &amp;n);</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;            </div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            UConverter* cvt = ucnv_open(<span class="stringliteral">&quot;utf-8&quot;</span>, &amp;uerr);</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;            <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> __out;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;            __out.resize(2*n);</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;            </div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;            __out.resize(ucnv_fromUChars(cvt, const_cast&lt;char*&gt;(__out.data()), static_cast&lt;int32_t&gt;(__out.size()), __up, static_cast&lt;int32_t&gt;(n), &amp;uerr));</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;            <span class="keywordflow">if</span> ( uerr == U_BUFFER_OVERFLOW_ERROR )</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                ucnv_fromUChars(cvt, const_cast&lt;char*&gt;(__out.data()), static_cast&lt;int32_t&gt;(__out.size()), __up, static_cast&lt;int32_t&gt;(n), &amp;uerr);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;            </div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;            ucnv_close(cvt);</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;            <span class="keywordflow">if</span> ( (<span class="keywordtype">void</span>*)__up != (<span class="keywordtype">void</span>*)__buf )</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                <span class="keyword">delete</span> [] __up;</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;            <span class="keyword">delete</span> [] __buf;</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;            </div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            <span class="keywordflow">return</span> __out;</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        }</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;        </div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">fromUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;            <span class="keywordflow">if</span> ( n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                n = std::char_traits&lt;char&gt;::length(utf8) - pos;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;            UErrorCode uerr = U_ZERO_ERROR;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;            UChar* __up = __to_UChar(utf8, &amp;pos, &amp;n);</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            </div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;            <span class="keywordflow">if</span> ( <span class="keyword">sizeof</span>(_CharT) == <span class="keyword">sizeof</span>(UChar) )</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> __r(__up + pos, n);</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                <span class="keyword">delete</span> [] __up;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;            }</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;            </div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="stringliteral">&quot;utf-16&quot;</span>;</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;            <span class="keywordflow">switch</span> ( <span class="keyword">sizeof</span>(_CharT) )</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;            {</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                <span class="keywordflow">case</span> 4:</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                    name = <span class="stringliteral">&quot;utf-32&quot;</span>;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;            }</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;            </div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;            UConverter* cvt = ucnv_open(name, &amp;uerr);</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> __out;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            __out.resize(n);</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;            </div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            __out.resize(ucnv_fromUChars(cvt, const_cast&lt;char*&gt;(__out.data()), n, __up, n, &amp;uerr));</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            <span class="keywordflow">if</span> ( uerr == U_BUFFER_OVERFLOW_ERROR )</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                ucnv_fromUChars(cvt, const_cast&lt;char*&gt;(__out.data()), n, __up, n, &amp;uerr);</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            </div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            ucnv_close(cvt);</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            <span class="keyword">delete</span> [] __up;</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;            </div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            <span class="keywordflow">return</span> __out;</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        }</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> &amp; utf8, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">fromUTF8</a>(utf8.data(), pos, n);</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        }</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        </div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        <span class="keyword">static</span> UChar* __to_UChar(<span class="keyword">const</span> _CharT* p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a>* pPos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a>* pN) {</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span>* name = <span class="stringliteral">&quot;utf-8&quot;</span>;</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;            <span class="keywordflow">switch</span> ( <span class="keyword">sizeof</span>(_CharT) )</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;            {</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                <span class="keywordflow">case</span> 2:</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                    name = <span class="stringliteral">&quot;utf-16&quot;</span>;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                <span class="keywordflow">case</span> 4:</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span>UChar*<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>UChar*<span class="keyword">&gt;</span>(p));</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;            }</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;            </div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;            UErrorCode uerr = U_ZERO_ERROR;</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;            UConverter* cvt = ucnv_open(name, &amp;uerr);</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;            </div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;            int32_t len = ucnv_toUChars(cvt, NULL, 0, (<span class="keyword">const</span> <span class="keywordtype">char</span>*)p, *pN, &amp;uerr);</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            UChar* __out = <span class="keyword">new</span> UChar[len+1];</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;            UChar* __p = __out;</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;            UChar* __e = __out + len;</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span>* __f = (<span class="keyword">const</span> <span class="keywordtype">char</span>*)p + *pPos;</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span>* __fe = (<span class="keyword">const</span> <span class="keywordtype">char</span>*)(p + *pPos + *pN);</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;            int32_t* offsets = <span class="keyword">new</span> int32_t[*pN];</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;            </div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;            ucnv_toUnicode(cvt, &amp;__p, __e, &amp;__f, __fe, offsets, TRUE, &amp;uerr);</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;            *pN = offsets[*pN];</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;            *pPos = offsets[*pPos];</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;            </div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;            <span class="keywordflow">return</span> __out;</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        }</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    };</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="preprocessor">#elif !EPUB_PLATFORM(WIN)</span></div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="preprocessor"></span>    <span class="comment">// non-ICU implementation for smaller Android builds</span></div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _CharT&gt;</div>
<div class="line"><a name="l01016"></a><span class="lineno"><a class="code" href="classstring_1_1___convert.xhtml"> 1016</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classstring_1_1___convert.xhtml">_Convert</a> {</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01018"></a><span class="lineno"><a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd"> 1018</a></span>&#160;        <span class="keyword">typedef</span> std::string <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a>;</div>
<div class="line"><a name="l01019"></a><span class="lineno"><a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044"> 1019</a></span>&#160;        <span class="keyword">typedef</span> std::basic_string&lt;_CharT&gt; <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a>;</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        </div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(<span class="keyword">const</span> _CharT* p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a>&amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1);</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        </div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">fromUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* utf8, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a>&amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>);</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    };</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="preprocessor"></span>    <span class="comment">// Pure C++11 implementation, works on libc++ and VC++2010</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> _CharT&gt;</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keyword">class </span><a class="code" href="classstring_1_1___convert.xhtml">_Convert</a> {</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keyword">typedef</span> std::wstring_convert&lt;std::codecvt_utf8&lt;_CharT&gt;, _CharT &gt; _cvt;</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> _cvt::byte_string <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a>;</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;        <span class="keyword">typedef</span> <span class="keyword">typename</span> _cvt::wide_string <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a>;</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;        </div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(<span class="keyword">const</span> _CharT * p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;            <span class="keywordflow">if</span> ( n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                <span class="keywordflow">return</span> _cvt().to_bytes(p+pos);</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;            <span class="keywordflow">return</span> _cvt().to_bytes(p+pos, p+pos+n);</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        }</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;            <span class="keywordflow">return</span> _cvt().to_bytes(s.substr(pos,n));</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        }</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">toUTF8</a>(_CharT c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1) {</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;            <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> s = _cvt().to_bytes(c);</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            <span class="keywordflow">if</span> ( n == 1 )</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( s.length() == 1 )</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a>(n, s[0]);</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;            <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> r;</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;            r.reserve(n*s.size());</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;            <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n; i++ )</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                r.append(s);</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;            <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        }</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">fromUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * utf8, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;            <span class="keywordflow">if</span> ( n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                <span class="keywordflow">return</span> _cvt().from_bytes(utf8+pos);</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;            <span class="keywordflow">return</span> _cvt().from_bytes(utf8+pos, utf8+pos+n);</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;        }</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        <span class="keyword">static</span> <a class="code" href="classstring_1_1___convert.xhtml#a8098c5290829137cae2857d88b676044">wide_string</a> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert.xhtml#a18dd7e0edc180f445f89ace43f67c4fd">byte_string</a> &amp; utf8, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;            <span class="keywordflow">return</span> _cvt().from_bytes(utf8.substr(pos, n));</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        }</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    };</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="preprocessor"></span>};</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Template Specializations</span></div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="keyword">template</span>&lt;&gt;</div>
<div class="line"><a name="l01074"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml"> 1074</a></span>&#160;<span class="keyword">class </span><a class="code" href="classstring_1_1___convert.xhtml">string::_Convert</a>&lt;char&gt; {</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l01076"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adcdafb92f94a66b1c5fcbeb15945e089"> 1076</a></span>&#160;    <span class="keyword">typedef</span> std::string <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adcdafb92f94a66b1c5fcbeb15945e089">byte_string</a>;</div>
<div class="line"><a name="l01077"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adc6089c41c60afb886f99e29a90ba8dc"> 1077</a></span>&#160;    <span class="keyword">typedef</span> std::string <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adc6089c41c60afb886f99e29a90ba8dc">wide_string</a>;</div>
<div class="line"><a name="l01078"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a1eda696e69f6732786628526840a02b9"> 1078</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adcdafb92f94a66b1c5fcbeb15945e089">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a1eda696e69f6732786628526840a02b9">toUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        <span class="keywordflow">if</span> ( n == std::string::npos )</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;            <span class="keywordflow">return</span> std::string(p+pos);</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        <span class="keywordflow">return</span> std::string(p+pos, n);</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    }</div>
<div class="line"><a name="l01083"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#ac6dd0ea03fb1b95c3c4aec203dacdd03"> 1083</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adcdafb92f94a66b1c5fcbeb15945e089">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#ac6dd0ea03fb1b95c3c4aec203dacdd03">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adc6089c41c60afb886f99e29a90ba8dc">wide_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;        <span class="keywordflow">return</span> s.substr(pos, n);</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    }</div>
<div class="line"><a name="l01086"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a1f78086467ac97b60b0abbc7332cd900"> 1086</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adcdafb92f94a66b1c5fcbeb15945e089">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a1f78086467ac97b60b0abbc7332cd900">toUTF8</a>(<span class="keywordtype">char</span> c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1) {</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        <span class="keywordflow">return</span> std::string(n, c);</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    }</div>
<div class="line"><a name="l01089"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a2e13040768869a339c46471329d34090"> 1089</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adc6089c41c60afb886f99e29a90ba8dc">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a2e13040768869a339c46471329d34090">fromUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * utf8, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;        <span class="keywordflow">if</span> ( n == std::string::npos )</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;            <span class="keywordflow">return</span> std::string(utf8+pos);</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;        <span class="keywordflow">return</span> std::string(utf8+pos, n);</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    }</div>
<div class="line"><a name="l01094"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a36d86a489fd16edf894dd546bbd28812"> 1094</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adc6089c41c60afb886f99e29a90ba8dc">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#a36d86a489fd16edf894dd546bbd28812">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01char_01_4.xhtml#adcdafb92f94a66b1c5fcbeb15945e089">byte_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        <span class="keywordflow">return</span> s.substr(pos, n);</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    }</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;};</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01100"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml"> 1100</a></span>&#160;<span class="keyword">class </span><a class="code" href="classstring_1_1___convert.xhtml">string::_Convert</a>&lt;<a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>&gt; {</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l01102"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a21cb164f05209bb87bd4c29ccccce8b8"> 1102</a></span>&#160;    <span class="keyword">typedef</span> std::string <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a21cb164f05209bb87bd4c29ccccce8b8">byte_string</a>;</div>
<div class="line"><a name="l01103"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#af3500888d6daa7be82fc81d0edb96fd0"> 1103</a></span>&#160;    <span class="keyword">typedef</span> std::string <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#af3500888d6daa7be82fc81d0edb96fd0">wide_string</a>;</div>
<div class="line"><a name="l01104"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a7b54f2c773d91ce3c588f2b9fac65c63"> 1104</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a21cb164f05209bb87bd4c29ccccce8b8">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a7b54f2c773d91ce3c588f2b9fac65c63">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;        <span class="keywordflow">if</span> ( n == std::string::npos )</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;            <span class="keywordflow">return</span> std::string(reinterpret_cast&lt;const char*&gt;(p)+pos);</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        <span class="keywordflow">return</span> std::string(reinterpret_cast&lt;const char*&gt;(p)+pos, n);</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    }</div>
<div class="line"><a name="l01109"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#afa6a688cc9b26f470c11492c3ef8cb50"> 1109</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a21cb164f05209bb87bd4c29ccccce8b8">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#afa6a688cc9b26f470c11492c3ef8cb50">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#af3500888d6daa7be82fc81d0edb96fd0">wide_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;        <span class="keywordflow">return</span> s.substr(pos, n);</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    }</div>
<div class="line"><a name="l01112"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a55e1a40cadd5dfc69572438834b4f127"> 1112</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a21cb164f05209bb87bd4c29ccccce8b8">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a55e1a40cadd5dfc69572438834b4f127">toUTF8</a>(<a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1) {</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        <span class="keywordflow">return</span> std::string(n, static_cast&lt;char&gt;(c));</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    }</div>
<div class="line"><a name="l01115"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a1fd9f3802daf12b00be5b5e52a2720ba"> 1115</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#af3500888d6daa7be82fc81d0edb96fd0">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a1fd9f3802daf12b00be5b5e52a2720ba">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * utf8, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        <span class="keywordflow">if</span> ( n == std::string::npos )</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;            <span class="keywordflow">return</span> std::string(reinterpret_cast&lt;const char*&gt;(utf8)+pos);</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        <span class="keywordflow">return</span> std::string(reinterpret_cast&lt;const char*&gt;(utf8)+pos, n);</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    }</div>
<div class="line"><a name="l01120"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a7a99ca692538fa6c7664190cd6c6d058"> 1120</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#af3500888d6daa7be82fc81d0edb96fd0">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a7a99ca692538fa6c7664190cd6c6d058">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01xml_char_01_4.xhtml#a21cb164f05209bb87bd4c29ccccce8b8">byte_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        <span class="keywordflow">return</span> s.substr(pos, n);</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    }</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;};</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="preprocessor">#if (!defined(UTF_USE_ICU) || UTF_USE_ICU == 0) &amp;&amp; !EPUB_PLATFORM(WIN)</span></div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="preprocessor"></span><span class="comment">// ePub::string::_Convert is implemented for Unicode via template specializations here</span></div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01128"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml"> 1128</a></span>&#160;<span class="keyword">class </span><a class="code" href="classstring_1_1___convert.xhtml">string::_Convert</a>&lt;char16_t&gt; {</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l01130"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a"> 1130</a></span>&#160;    <span class="keyword">typedef</span> std::string                 <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a>;</div>
<div class="line"><a name="l01131"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adbc1400cf59b503e2943e22b4b8eba3a"> 1131</a></span>&#160;    <span class="keyword">typedef</span> std::basic_string&lt;char16_t&gt; <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adbc1400cf59b503e2943e22b4b8eba3a">wide_string</a>;</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    </div>
<div class="line"><a name="l01133"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#a594a341e532c4b9319667ff4bda864bc"> 1133</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#a594a341e532c4b9319667ff4bda864bc">toUTF8</a>(<span class="keyword">const</span> char16_t *p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> __r;</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? std::char_traits&lt;char16_t&gt;::length(p) : n);</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;        utf8::utf16to8(p+pos, p+len, std::back_inserter(__r));</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    }</div>
<div class="line"><a name="l01139"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#a974fdcd328a6fe21d822903e435ae75d"> 1139</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#a974fdcd328a6fe21d822903e435ae75d">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adbc1400cf59b503e2943e22b4b8eba3a">wide_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> __r;</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        utf8::utf16to8(s.begin() + pos, (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin() + n), std::back_inserter(__r));</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    }</div>
<div class="line"><a name="l01144"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ad1ae00c6da4e053ea5a35c8e632e9b8b"> 1144</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ad1ae00c6da4e053ea5a35c8e632e9b8b">toUTF8</a>(char16_t c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1) {</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> __t;</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;        utf8::utf16to8(&amp;c, (&amp;c)+1, std::back_inserter(__t));</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> __r;</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __i = 0; __i &lt; n; __i++) {</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;            __r.append(__t);</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;        }</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    }</div>
<div class="line"><a name="l01153"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#a76956f7661736e13345fbfb30f99f36b"> 1153</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adbc1400cf59b503e2943e22b4b8eba3a">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#a76956f7661736e13345fbfb30f99f36b">fromUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adbc1400cf59b503e2943e22b4b8eba3a">wide_string</a> __r;</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? std::char_traits&lt;char&gt;::length(p) : n);</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;        utf8::utf8to16(p+pos, p+len, std::back_inserter(__r));</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    }</div>
<div class="line"><a name="l01159"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adf4799e9ebb8da87b5aa29e661db2879"> 1159</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adbc1400cf59b503e2943e22b4b8eba3a">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adf4799e9ebb8da87b5aa29e661db2879">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#ab0d7798b8fc31366e29589a8dc95513a">byte_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char16__t_01_4.xhtml#adbc1400cf59b503e2943e22b4b8eba3a">wide_string</a> __r;</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        utf8::utf8to16(s.begin() + pos, (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin() + n), std::back_inserter(__r));</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    }</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;};</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01167"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml"> 1167</a></span>&#160;<span class="keyword">class </span><a class="code" href="classstring_1_1___convert.xhtml">string::_Convert</a>&lt;char32_t&gt; {</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l01169"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939"> 1169</a></span>&#160;    <span class="keyword">typedef</span> std::string                 <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a>;</div>
<div class="line"><a name="l01170"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ae632c9c383e2628d4335898f31fcec0b"> 1170</a></span>&#160;    <span class="keyword">typedef</span> std::basic_string&lt;char32_t&gt; <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ae632c9c383e2628d4335898f31fcec0b">wide_string</a>;</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    </div>
<div class="line"><a name="l01172"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a4bf50b334e137b7bd12add5cfa45d97c"> 1172</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a4bf50b334e137b7bd12add5cfa45d97c">toUTF8</a>(<span class="keyword">const</span> char32_t *p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> __r;</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? std::char_traits&lt;char32_t&gt;::length(p) : n);</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;        utf8::utf32to8(p+pos, p+len, std::back_inserter(__r));</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    }</div>
<div class="line"><a name="l01178"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ac5c6fcfba33355f220028a7dab74174e"> 1178</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ac5c6fcfba33355f220028a7dab74174e">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ae632c9c383e2628d4335898f31fcec0b">wide_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> __r;</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        utf8::utf32to8(s.begin() + pos, (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin() + n), std::back_inserter(__r));</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    }</div>
<div class="line"><a name="l01183"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a7a162ef9a680a2247e50ef47ea8fc0ab"> 1183</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a7a162ef9a680a2247e50ef47ea8fc0ab">toUTF8</a>(char32_t c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1) {</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> __t;</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        utf8::utf32to8(&amp;c, (&amp;c)+1, std::back_inserter(__t));</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> __r;</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __i = 0; __i &lt; n; __i++) {</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;            __r.append(__t);</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;        }</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    }</div>
<div class="line"><a name="l01192"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a28a9e3b1aab74cd54c696f8d1fcd6dde"> 1192</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ae632c9c383e2628d4335898f31fcec0b">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a28a9e3b1aab74cd54c696f8d1fcd6dde">fromUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ae632c9c383e2628d4335898f31fcec0b">wide_string</a> __r;</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? std::char_traits&lt;char&gt;::length(p) : n);</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;        utf8::utf8to32(p+pos, p+len, std::back_inserter(__r));</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    }</div>
<div class="line"><a name="l01198"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a26d35771206cfbf33688fad9d49c60e2"> 1198</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ae632c9c383e2628d4335898f31fcec0b">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a26d35771206cfbf33688fad9d49c60e2">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#a325046aca7ca0a06e6422c3dbbe0c939">byte_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01char32__t_01_4.xhtml#ae632c9c383e2628d4335898f31fcec0b">wide_string</a> __r;</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        utf8::utf8to32(s.begin() + pos, (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin() + n), std::back_inserter(__r));</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    }</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;};</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> w<span class="keywordtype">char</span>_size&gt;</div>
<div class="line"><a name="l01207"></a><span class="lineno"><a class="code" href="struct___w_char_convert.xhtml"> 1207</a></span>&#160;<span class="keyword">struct </span><a class="code" href="__config_8h.xhtml#a57279d342ddfd0707ee8ece65b1bf8ad">_LIBCPP_HIDDEN</a> <a class="code" href="struct___w_char_convert.xhtml">_WCharConvert</a></div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;{</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;};</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01212"></a><span class="lineno"><a class="code" href="struct___w_char_convert_3_012_01_4.xhtml"> 1212</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct___w_char_convert.xhtml">_WCharConvert</a>&lt;2&gt;</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;{</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> w<span class="keywordtype">char</span>_iterator, <span class="keyword">typename</span> octet_iterator&gt;</div>
<div class="line"><a name="l01215"></a><span class="lineno"><a class="code" href="struct___w_char_convert_3_012_01_4.xhtml#aaf166f41b4a400a663b6a7cc64d9762f"> 1215</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> octet_iterator <a class="code" href="struct___w_char_convert_3_012_01_4.xhtml#aaf166f41b4a400a663b6a7cc64d9762f">to8</a>(wchar_iterator start, wchar_iterator end, octet_iterator result) {</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        <span class="keywordflow">return</span> utf8::utf16to8(start, end, result);</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    }</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> w<span class="keywordtype">char</span>_iterator, <span class="keyword">typename</span> octet_iterator&gt;</div>
<div class="line"><a name="l01219"></a><span class="lineno"><a class="code" href="struct___w_char_convert_3_012_01_4.xhtml#add159b32a8b8f4e897a903d73b2b6946"> 1219</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> wchar_iterator <a class="code" href="struct___w_char_convert_3_012_01_4.xhtml#add159b32a8b8f4e897a903d73b2b6946">from8</a>(octet_iterator start, octet_iterator end, wchar_iterator result) {</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;        <span class="keywordflow">return</span> utf8::utf8to16(start, end, result);</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    }</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;};</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01224"></a><span class="lineno"><a class="code" href="struct___w_char_convert_3_014_01_4.xhtml"> 1224</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct___w_char_convert.xhtml">_WCharConvert</a>&lt;4&gt;</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;{</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> w<span class="keywordtype">char</span>_iterator, <span class="keyword">typename</span> octet_iterator&gt;</div>
<div class="line"><a name="l01227"></a><span class="lineno"><a class="code" href="struct___w_char_convert_3_014_01_4.xhtml#a907928fcf8391c7c5882e403a77df253"> 1227</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> octet_iterator <a class="code" href="struct___w_char_convert_3_014_01_4.xhtml#a907928fcf8391c7c5882e403a77df253">to8</a>(wchar_iterator start, wchar_iterator end, octet_iterator result) {</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        <span class="keywordflow">return</span> utf8::utf32to8(start, end, result);</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    }</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> w<span class="keywordtype">char</span>_iterator, <span class="keyword">typename</span> octet_iterator&gt;</div>
<div class="line"><a name="l01231"></a><span class="lineno"><a class="code" href="struct___w_char_convert_3_014_01_4.xhtml#a2eb2bace4127227c505f538aca50ed1b"> 1231</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="__config_8h.xhtml#ac032d233a8ebfcd82fd49d0824eefb18">FORCE_INLINE</a> wchar_iterator <a class="code" href="struct___w_char_convert_3_014_01_4.xhtml#a2eb2bace4127227c505f538aca50ed1b">from8</a>(octet_iterator start, octet_iterator end, wchar_iterator result) {</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;        <span class="keywordflow">return</span> utf8::utf8to32(start, end, result);</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    }</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;};</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01237"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml"> 1237</a></span>&#160;<span class="keyword">class </span><a class="code" href="classstring_1_1___convert.xhtml">string::_Convert</a>&lt;wchar_t&gt; {</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l01239"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6"> 1239</a></span>&#160;    <span class="keyword">typedef</span> std::string     <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a>;</div>
<div class="line"><a name="l01240"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a6659cfe0a02a3cfb49a67912466299c2"> 1240</a></span>&#160;    <span class="keyword">typedef</span> std::wstring    <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a6659cfe0a02a3cfb49a67912466299c2">wide_string</a>;</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    </div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    </div>
<div class="line"><a name="l01244"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a8f4d00a1bb77e6083cb30befa97144fc"> 1244</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a8f4d00a1bb77e6083cb30befa97144fc">toUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span> *p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> __r;</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? std::char_traits&lt;wchar_t&gt;::length(p) : n);</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        <a class="code" href="struct___w_char_convert.xhtml">_WCharConvert&lt;sizeof(wchar_t)&gt;::to8</a>(p+pos, p+len, std::back_inserter(__r));</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    }</div>
<div class="line"><a name="l01250"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#ac16deb135da242570be05b9ef553464f"> 1250</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#ac16deb135da242570be05b9ef553464f">toUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a6659cfe0a02a3cfb49a67912466299c2">wide_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> __r;</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;        <a class="code" href="struct___w_char_convert.xhtml">_WCharConvert&lt;sizeof(wchar_t)&gt;::to8</a>(s.begin() + pos, (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin() + n), std::back_inserter(__r));</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    }</div>
<div class="line"><a name="l01255"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#ad8085a924500aef30801850b9ac26244"> 1255</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#ad8085a924500aef30801850b9ac26244">toUTF8</a>(char32_t c, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=1) {</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> __t;</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        <a class="code" href="struct___w_char_convert.xhtml">_WCharConvert&lt;sizeof(wchar_t)&gt;::to8</a>(&amp;c, (&amp;c)+1, std::back_inserter(__t));</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> __r;</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __i = 0; __i &lt; n; __i++) {</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;            __r.append(__t);</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;        }</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    }</div>
<div class="line"><a name="l01264"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a58a8e1e978b1a68af6dcd98f44f789da"> 1264</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a6659cfe0a02a3cfb49a67912466299c2">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a58a8e1e978b1a68af6dcd98f44f789da">fromUTF8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* p, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a6659cfe0a02a3cfb49a67912466299c2">wide_string</a> __r;</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? std::char_traits&lt;char&gt;::length(p) : n);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        <a class="code" href="struct___w_char_convert.xhtml">_WCharConvert&lt;sizeof(wchar_t)&gt;::from8</a>(p+pos, p+len, std::back_inserter(__r));</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    }</div>
<div class="line"><a name="l01270"></a><span class="lineno"><a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#aea30c94adc799841b7734fa473ce0c37"> 1270</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a6659cfe0a02a3cfb49a67912466299c2">wide_string</a> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#aea30c94adc799841b7734fa473ce0c37">fromUTF8</a>(<span class="keyword">const</span> <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a2d8c39e8c762884b385dd84a7720d6d6">byte_string</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos=0, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n=<a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a>) {</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;        <a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a6659cfe0a02a3cfb49a67912466299c2">wide_string</a> __r;</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;        <a class="code" href="struct___w_char_convert.xhtml">_WCharConvert&lt;sizeof(wchar_t)&gt;::from8</a>(s.begin() + pos, (n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin() + n), std::back_inserter(__r));</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;        <span class="keywordflow">return</span> __r;</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    }</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;};</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;<span class="preprocessor">#if 0</span></div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma mark - Helpers</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_USER_LITERALS)</span></div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<span class="preprocessor"></span><span class="comment">// C++11 lets us define new literal types, so lets have &quot;something&quot;_xc be an xmlChar *, eh?</span></div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;<span class="comment">// Sadly, we can&#39;t define prefix forms. Boo...</span></div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;<a class="code" href="__compiler_8h.xhtml#acaa06fbc27c59926a41e7575667e5280">CONSTEXPR</a> <span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <span class="keyword">operator</span> <span class="stringliteral">&quot;&quot;</span> _xc(<span class="keyword">const</span> <span class="keywordtype">char</span> * __s, <span class="keywordtype">size_t</span> __n) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *)__s;</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;}</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="__compiler_8h.xhtml#acaa06fbc27c59926a41e7575667e5280">CONSTEXPR</a> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * _xml(<span class="keyword">const</span> <span class="keywordtype">char</span> * __s) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a> {</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*)(__s);</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;}</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * xmlChars(<span class="keyword">const</span> std::string &amp; str) {</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*<span class="keyword">&gt;</span>(str.c_str());</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;}</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">string</span> xmlString(<span class="keyword">const</span> <span class="keywordtype">char</span> * str) {</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(reinterpret_cast&lt;const xmlChar*&gt;(str));</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;}</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">string</span> xmlString(<span class="keyword">const</span> std::string &amp; str) {</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml">string</a>(reinterpret_cast&lt;const xmlChar*&gt;(str.c_str()));</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;}</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> std::string asciiString(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s) {</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    <span class="keywordflow">return</span> std::string(reinterpret_cast&lt;const char *&gt;(s));</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;}</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="__compiler_8h.xhtml#acaa06fbc27c59926a41e7575667e5280">CONSTEXPR</a> <span class="keyword">const</span> <span class="keywordtype">char</span> * ascii(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * __x) {</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">const</span> <span class="keywordtype">char</span> *)__x;</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;}</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;<span class="comment">// some helpers</span></div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;</div>
<div class="line"><a name="l01312"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f"> 1312</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; rhs) {</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(rhs);</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;}</div>
<div class="line"><a name="l01317"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a6c9a757827410148ee42344b07efed9c"> 1317</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <span class="keyword">const</span> std::string &amp; rhs) {</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(rhs);</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;}</div>
<div class="line"><a name="l01322"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#ae69b3fec9256c011659c79c209f96aca"> 1322</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#ae69b3fec9256c011659c79c209f96aca">operator * </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">string::value_type</a> * rhs) {</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(rhs);</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;}</div>
<div class="line"><a name="l01327"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a01c51df425e4f3a266539f4b7f7baea2"> 1327</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#ae69b3fec9256c011659c79c209f96aca">operator * </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">string::value_type</a> rhs) {</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(1, rhs);</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;}</div>
<div class="line"><a name="l01332"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a72621ca5ca39ab7618e618780085e73a"> 1332</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span> * rhs) {</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(rhs);</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;}</div>
<div class="line"><a name="l01337"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a8ee3f1e487a06437342ab2a3c8ea010b"> 1337</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <span class="keywordtype">char</span> rhs) {</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(1, rhs);</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;}</div>
<div class="line"><a name="l01342"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#ae12af72ed9255cf4b2b9c9bfd09bce96"> 1342</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * rhs) {</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(rhs);</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;}</div>
<div class="line"><a name="l01347"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#aedea27b74d8a2c0d072563f5c5ece066"> 1347</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">string</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp; lhs, <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> rhs) {</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    <span class="keywordtype">string</span> s(lhs);</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    s.<a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(1, rhs);</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <span class="keywordflow">return</span> s;</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;}</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="comment">// to std::string (UTF-8, signed char)</span></div>
<div class="line"><a name="l01354"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#aae2c7025e04eadea3faa6af48f31284f"> 1354</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(std::string&amp; lhs, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> rhs) {</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">std::operator+</a>(lhs, static_cast&lt;const char&gt;(rhs));</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;}</div>
<div class="line"><a name="l01357"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#aba5444d5fa034a89673ffa10c8044d5d"> 1357</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(std::string&amp; lhs, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *rhs) {</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">std::operator+</a>(lhs, reinterpret_cast&lt;const char*&gt;(rhs));</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;}</div>
<div class="line"><a name="l01360"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a58d9c9af1a64f2031c16ec8f97ff38d6"> 1360</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">operator + </a>(std::string &amp;lhs, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;rhs) {</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="utfstring_8h.xhtml#afea8d616a05e9815f57ad6b9740f846f">std::operator+</a>(lhs, reinterpret_cast&lt;const char*&gt;(rhs.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>()));</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;}</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> _CharT, <span class="keyword">class</span> _Traits&gt;</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;<span class="keyword">inline</span> std::basic_ostream&lt;_CharT, _Traits&gt;&amp;</div>
<div class="line"><a name="l01366"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a6570a4d7996c27c119b5e2476e2aff0b"> 1366</a></span>&#160;operator&lt;&lt;(std::basic_ostream&lt;_CharT, _Traits&gt;&amp; __os, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; __str) {</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <span class="keywordflow">return</span> __os &lt;&lt; __str.stl_str();</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;}</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="comment">// template specializations -- MSVC wants these in the header</span></div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="preprocessor">#if EPUB_COMPILER(MSVC)</span></div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># include &quot;<a class="code" href="utfstringspec_8inl.xhtml">utfstringspec.inl</a>&quot;</span></div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3_xml_string__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="utfstring_8h.xhtml">utfstring.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
