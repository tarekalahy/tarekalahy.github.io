<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/utilities/utfstring.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('utfstring_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">utfstring.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utfstring_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  utfstring.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-11-22.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utfstring_8h.xhtml">utfstring.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="integer__sequence_8h.xhtml">integer_sequence.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;locale&gt;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#if EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="comment">// need a converter from UTF-8 to Windows&#39; wchar_t</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;codecvt&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">using</span> WinRTCharConverter = std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt;;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="code" href="utfstring_8h.xhtml#a5f8ff60c83e4c55a6ee065d973a6e24e">   33</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">size_t</span> <a class="code" href="utfstring_8cpp.xhtml#ae9dd2e58eba6b74418fb7fa156fa116e">utf8_sizes</a>[256] = {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, <span class="comment">// 0x00-0x1F</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, <span class="comment">// 0x20-0x3F</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, <span class="comment">// 0x40-0x5F</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, <span class="comment">// 0x60-0x7F</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, <span class="comment">// 0x80-0x9F</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, <span class="comment">// 0xA0-0xBF</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, <span class="comment">// 0xC0-0xDF</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,6,6,1,1  <span class="comment">// 0xE0-0xFF</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;};</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">const</span> <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">string::npos</a> = string::__base::npos;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#abe5d1e831b477878a03caf8104c0639d">string::EmptyString</a> = <a class="code" href="classstring.xhtml">string</a>();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa2ed08f3d6ca0ad66b9fa8fbf80dfaf8">   47</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab3d2de0f3ddec39d50a3eb5405a7c6d1">   51</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="code" href="classstring.xhtml#a57e846fbaf35565ac1dd16b319733bab">   55</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> ( n != 0 )</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(c, n));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8d7d818c4e453599ef2d21f762b7ded7">   60</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> char16_t* s)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char16_t&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="code" href="classstring.xhtml#aed0d98c6c09f7fc44f5c5f211a27cd4f">   64</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char16_t&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5630a57527a0789c7d75b45fa989f1f9">   68</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span> ( n != 0 )</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char16_t&gt;::toUTF8</a>(c, n));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2e18b1b3e4d97fd05cc2f57fb152bf9d">   73</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* s)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;wchar_t&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="code" href="classstring.xhtml#acf87631bbd090c583ba8d722bc87d15d">   77</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;wchar_t&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="code" href="classstring.xhtml#a59825c17c8244cc1368f4b1f15da4f94">   81</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">wchar_t</span> c)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span> ( n != 0 )</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;wchar_t&gt;::toUTF8</a>(c, n));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9f4bdb68ad4996c06106a043734fce0a">   86</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> std::wstring&amp; s)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;wchar_t&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#if EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor"></span><a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> xml::string&amp; s)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert_3_01wchar__t_01_4.xhtml#a8f4d00a1bb77e6083cb30befa97144fc">_Convert&lt;wchar_t&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2d89a46ee52683db94908b9eff969c90">   96</a></span>&#160;<span class="preprocessor"></span><a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// ensure we&#39;re looking at a valid location in the base string (not in the middle of a multi-byte character)j</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(s, i, n);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(s, i, n);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9c61ebb7671a2a34b4b279a8fe54eef7">  102</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <a class="code" href="classbasic__string__view.xhtml">u16string_view</a>&amp; view) : _base(<a class="code" href="classstring_1_1___convert.xhtml">_Convert</a>&lt;char16_t&gt;::toUTF8(view.data(), 0, view.size()))</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="code" href="classstring.xhtml#abc60f853196163bad865f15c727bebe4">  105</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <a class="code" href="classbasic__string__view.xhtml">u32string_view</a>&amp; view) : _base(<a class="code" href="classstring_1_1___convert.xhtml">_Convert</a>&lt;char32_t&gt;::toUTF8(view.data(), 0, view.size()))</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="code" href="classstring.xhtml#a39b2d5d9e61071b70e2f36164821fa3e">  108</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <a class="code" href="classbasic__string__view.xhtml">wstring_view</a>&amp; view) : _base(<a class="code" href="classstring_1_1___convert.xhtml">_Convert</a>&lt;wchar_t&gt;::toUTF8(view.data(), 0, view.size()))</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2c88fbe866ce536eda2895ca4a6dafcd">  112</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> first, <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> last) : _base(first.base(), last.base())</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="code" href="classstring.xhtml#afba6698320052960dab83146f8604371">  116</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(__base::const_iterator pos, __base::const_iterator end) : _base(pos, end)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="code" href="classstring.xhtml#a145da7e9cf0e38d161c95ce92cd31dc6">  120</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * pos, <span class="keyword">const</span> <span class="keywordtype">char</span> * end) : _base(pos, end-pos)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="code" href="classstring.xhtml#a75b2c2be6ab51e5010e9f91eb4d6f6e4">  124</a></span>&#160;<a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string::string</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * pos, <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * end) : _base(reinterpret_cast&lt;const char*&gt;(pos), end-pos)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">  127</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">string::size</a>() const <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// note that ePub3::string .utf8_size() actually returns _base.size() (from std::string)</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// but that ePub3::string .size() does not necessarily return the same as std::string .size() !</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">to_utf32_size</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.size());</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">  133</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">string::resize</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __s = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span> ( n &gt; __s )</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">// get UTF-8 prepresentation of the character</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(c, n-__s));</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( n &lt; __s )</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="comment">// contraction-- the pad character is unneeded in this case</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">resize</a>(n);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3ba7e1bdd6a856618585531fd793d6e6">  147</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">string::resize</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __s = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> ( n &gt; __s )</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// extend with NUL chars-- one byte each in UTF-8</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> toAdd = n - __s;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.resize(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.size() + toAdd);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( n &lt; __s )</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">if</span> ( n == 0 )</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <a class="code" href="classstring.xhtml#a61728c6a130781ce3d6d0f5cf42537d5">clear</a>();</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">if</span> ( n == 0 )</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.resize(0);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// remove a certain number of UTF-8 characters</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> newByteSize = 0;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * b = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*<span class="keyword">&gt;</span>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.data());</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * e = b + <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.length();</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n &amp;&amp; b &lt; e; i++ )</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="comment">// gets the byte-length of a single UTF-8 encoded character</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordtype">size_t</span> len = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*b);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            newByteSize += len;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            b += len;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// resize the underlying byte string</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.resize(newByteSize);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#if 0//EPUB_PLATFORM(WINRT)</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor"></span>::Platform::String^ string::winrt_str()<span class="keyword"> const</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">auto</span> wstr = WinRTCharConverter().from_bytes(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> ref new ::Platform::String(wstr.data(), wstr.length());</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">  193</a></span>&#160;<span class="preprocessor"></span><span class="keyword">const</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">string::value_type</a> <a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">string::at</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)<span class="keyword"> const</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><span class="keywordtype">string</span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">at</a>(pos);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="code" href="classstring.xhtml#af4f4be866fc0b7386413213bb537d964">  197</a></span>&#160;<a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">string::value_type</a> <a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">string::at</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">typedef</span> <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;</a> Converter;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> * _pos = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<a class="code" href="classstring.xhtml#a87093cbddedcdd7e65d1a7c68db80f1a">xmlAt</a>(pos));</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    Converter::wide_string wstr = Converter::fromUTF8(_pos, 0, <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*_pos));</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> wstr[0];</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="classstring.xhtml#a87093cbddedcdd7e65d1a7c68db80f1a">  204</a></span>&#160;<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <a class="code" href="classstring.xhtml#a87093cbddedcdd7e65d1a7c68db80f1a">string::xmlAt</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)<span class="keyword"> const</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><span class="keywordtype">string</span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;<a class="code" href="classstring.xhtml#a87093cbddedcdd7e65d1a7c68db80f1a">xmlAt</a>(pos);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa67aa0b3b33e3ef0cd17567714749ff8">  208</a></span>&#160;<a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * <a class="code" href="classstring.xhtml#a87093cbddedcdd7e65d1a7c68db80f1a">string::xmlAt</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">if</span> ( pos &gt;= <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() )</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Position beyond size of string.&quot;</span>);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    __base::size_type bpos = <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> * p = &amp;<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.at(bpos);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">const_cast&lt;</span><a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a>*<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *<span class="keyword">&gt;</span>(p));</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2ea41866e34b3f28349389f26df6cb3a">  217</a></span>&#160;<a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">string::__base</a> <a class="code" href="classstring.xhtml#a2ea41866e34b3f28349389f26df6cb3a">string::utf8At</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)<span class="keyword"> const</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    __base::size_type bpos = <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordtype">size_t</span> charLen = <a class="code" href="utfstring_8cpp.xhtml#ae9dd2e58eba6b74418fb7fa156fa116e">utf8_sizes</a>[<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>[bpos]];</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">return</span> _base.substr(bpos, charLen);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">#ifndef UTFSTRING_SPECIALIZATIONS_INLINED</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="code" href="classstring.xhtml#a04039569b2bf2293692772721f97ab15">  225</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">string::assign</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> first, <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> last)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(first.base(), last.base());</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7bcbd3f12b742e95807a8969a55622cc">  231</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">string::assign</a>(__base::const_iterator first, __base::const_iterator last)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(first, last);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="code" href="classstring.xhtml#a46e54e247f883787f31f9e414de36c63">  237</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">string::assign</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *first, <span class="keyword">const</span> <span class="keywordtype">char</span> *last)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(first, last-first);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa5555317fae55352345b072a24b152fc">  243</a></span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">string::assign</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;o, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// byte offset of character i</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">auto</span> pos = o.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.cbegin();</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a> = pos + n;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> s = 0; s &lt; i &amp;&amp; pos &lt; <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>; s++ )</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordtype">size_t</span> c = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*pos);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        pos += c;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(pos, end);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div>
<div class="line"><a name="l00257"></a><span class="lineno"><a class="code" href="classstring.xhtml#acd93ec0912a86babec1450ccaa56328a">  257</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">string::assign</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="line"><a name="l00262"></a><span class="lineno"><a class="code" href="classstring.xhtml#aab8056bab583bce1285e6b607c076837">  262</a></span>&#160;<span class="keywordtype">string</span>&amp; <a class="code" href="classstring.xhtml#afd200ff37ca24bf7c9e190f19647784e">string::assign</a>(<span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;{</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.assign(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char16_t&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">#ifndef UTFSTRING_SPECIALIZATIONS_INLINED</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4382419320668de1d9320a1668a711c3">  269</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(<a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> first, <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> last)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(first.base(), last.base());</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00275"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3f0417b3cdcea6e153692738a5d71895">  275</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(__base::const_iterator first, __base::const_iterator last)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(first, last);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="code" href="classstring.xhtml#a0c4116bde4bfda9507d4a47c5d213b86">  281</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * first, <span class="keyword">const</span> <span class="keywordtype">char</span> * last)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(first, last-first);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00287"></a><span class="lineno"><a class="code" href="classstring.xhtml#a27230994e468bb9d757115d13aaa5aa7">  287</a></span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;o, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">if</span> ( n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(o.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>()+i, o.<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>());</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(o.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>()+i, o.<a class="code" href="classstring.xhtml#a4aacd7724d44ca9e5b29ee513d9b16f9">begin</a>()+i+n);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad279c4072acd7dcf81db365d9d11b357">  293</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(<a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="code" href="classstring.xhtml#a52debc7fc689a60ed83bcd4d933b44f6">  298</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> total = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() + n;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <a class="code" href="classstring.xhtml#a56063296da164488018a1ed6f824d0af">resize</a>(total, c);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="code" href="classstring.xhtml#a062b89f6fb062f2e56c6c629fcf0cd0b">  304</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(<span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.append(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char16_t&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa1083feafe97a911952565d64f158129">  309</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">string::append</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(n, static_cast&lt;char32_t&gt;(c));</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;}</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">#ifndef UTFSTRING_SPECIALIZATIONS_INLINED</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00316"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad7dbc006c55a114284a9d11d14dbd0fe">  316</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> first, <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> last)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">if</span> ( first == last )</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), first.base(), last.base());</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + std::distance(first, last));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="preprocessor"></span>    __base::iterator inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), first.base(), last.base()));</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8bc2c3abcfd13f589fe8882fc230f0e7">  330</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, __base::iterator first, __base::iterator last)</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span> ( first == last )</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), first, last);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + <a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a">utf32_distance</a>(first, last));</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="preprocessor"></span>    __base::iterator inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), first, last));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00343"></a><span class="lineno"><a class="code" href="classstring.xhtml#a79d7e3c219aac19b53bdd735e0ecd4b7">  343</a></span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">if</span> ( b == e )</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    __base::size_type bpos = <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">if</span> ( bpos == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(s, b, e);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    __base::size_type bb = s.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(b);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    __base::size_type be = s.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(b, e);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span> ( bb == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Position to copy from inserted string out of range&quot;</span>);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(bpos, s.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, bb, be);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;}</div>
<div class="line"><a name="l00361"></a><span class="lineno"><a class="code" href="classstring.xhtml#abb5524270759154491b86636013bfcd3">  361</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;{</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">if</span> ( e == b )</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(s, b, e).<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>();</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    __base::size_type bb = s.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(b);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    __base::size_type be = s.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(b, e);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">if</span> ( bb == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Position to copy from inserted string out of range&quot;</span>);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">auto</span> first = s.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin()+bb;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">auto</span> last = (be == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end() : s.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin()+be);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), first, last);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + <a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a">utf32_distance</a>(first, last));</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="preprocessor"></span>    __base::iterator inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), first, last));</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2a42165042f4393eba8589f4234ab947">  386</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">if</span> ( e == 0 )</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">if</span> ( pos &gt; <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() &amp;&amp; pos != <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Position outside string bounds&quot;</span>);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        pos = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(s, 0, e);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;}</div>
<div class="line"><a name="l00400"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad41683f3395f405acb0c9170c4fd907e">  400</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">if</span> ( e == 0 )</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keywordflow">if</span> ( pos &gt; <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() &amp;&amp; pos != <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Position outside string bounds&quot;</span>);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        pos = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    </div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(s, 0, e);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;}</div>
<div class="line"><a name="l00414"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2071652fa83088b46fa60bf8dc613286">  414</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c)</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;{</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __s = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">if</span> ( n == 0 )</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        pos = __s;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( pos &gt; __s )</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Position outside string bounds&quot;</span>);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    </div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(c);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.size() == 1 )</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), n, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    }</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        decltype(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>) buf;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        buf.reserve(n*<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length());</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n; i++ )</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            buf.append(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), buf);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
<div class="line"><a name="l00442"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad3adf40e10de82f135745d0cb6ac0e8a">  442</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c)</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;{</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __s = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">if</span> ( n == 0 )</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        pos = __s;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( pos &gt; __s )</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Position outside string bounds&quot;</span>);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(c);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.size() == 1 )</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), n, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        decltype(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>) buf;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        buf.reserve(n*<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length());</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n; i++ )</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            buf.append(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), buf);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div>
<div class="line"><a name="l00470"></a><span class="lineno"><a class="code" href="classstring.xhtml#a96c0067c900650b6494e6cdbf1d14588">  470</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;{</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordflow">if</span> ( e == 0 )</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(s, 0, e);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.begin(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.end());</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + e);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor"></span>    __base::iterator inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.begin(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.end()));</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00483"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4492ee269fa849c98bc8db81f4b40273">  483</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">if</span> ( e == 0 )</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(s, 0, e);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.begin(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.end());</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + <a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a">utf32_distance</a>(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.begin(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.end()));</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="preprocessor"></span>    __base::iterator inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.begin(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.end()));</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00496"></a><span class="lineno"><a class="code" href="classstring.xhtml#a229ae88b2bca17af0bee2c88058993ee">  496</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c)</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">if</span> ( n == 0 )</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(n, c).<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>();</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    </div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(c);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.size() == 1 )</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor"></span>        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), n, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + n);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="preprocessor"></span>        __base::iterator inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), n, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]));</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    decltype(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>) buf;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    buf.reserve(n*<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.size());</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n; i++ )</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        buf.append(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), buf.begin(), buf.end());</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + n);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="preprocessor"></span>    <span class="keyword">auto</span> inserted = <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), buf.begin(), buf.end());</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00528"></a><span class="lineno"><a class="code" href="classstring.xhtml#a377d67e288a259b764e03f21a2bb58e0">  528</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c)</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;{</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordflow">if</span> ( n == 0 )</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(n, c).<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>();</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    </div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(c);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.size() == 1 )</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="preprocessor"></span>        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), n, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + n);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor"></span>        __base::iterator inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), n, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]));</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    </div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    decltype(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>) buf;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    buf.reserve(n*<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.size());</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n; i++ )</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        buf.append(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), buf.begin(), buf.end());</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + n);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="preprocessor"></span>    <span class="keyword">auto</span> inserted = <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), buf.begin(), buf.end());</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00560"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac61a1d4f55fef6d39703596152355b1b">  560</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;{</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(s, b, e);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), s, b, e);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div>
<div class="line"><a name="l00566"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1d612bf3d568fb183489a5b861b9fd31">  566</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, __base::iterator b, __base::iterator e)</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;{</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(&amp;(*b), 0, e-b);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin()+<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), b, e);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;}</div>
<div class="line"><a name="l00572"></a><span class="lineno"><a class="code" href="classstring.xhtml#af7d686ceba5be6350d838d1dbc1c3042">  572</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;{</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(s, b, e);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="preprocessor"></span>    <span class="keyword">auto</span> __b = s.begin()+b;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keyword">auto</span> __e = (e == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin()+e);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), __b, __e);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + <a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a">utf32_distance</a>(__b, __e));</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="preprocessor"></span>    <span class="keyword">auto</span> inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), s.begin()+b, (e == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? s.end() : s.begin()+e)));</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00585"></a><span class="lineno"><a class="code" href="classstring.xhtml#a367450f3894876f89236cc978f7436f5">  585</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <span class="keyword">const</span> <span class="keywordtype">char</span> *s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;{</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(s, b, e);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keywordflow">if</span> ( e == __base::npos )</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), s+b);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), s+b, e-b);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;}</div>
<div class="line"><a name="l00594"></a><span class="lineno"><a class="code" href="classstring.xhtml#a0a77eaf8c826c7a5b693dbe4f0af6dcc">  594</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;{</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), n, c);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div>
<div class="line"><a name="l00599"></a><span class="lineno"><a class="code" href="classstring.xhtml#af7fe49363b33b318b26dde16d8e53330">  599</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <span class="keyword">const</span> <span class="keywordtype">char</span> * str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;{</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(str+b, e-b).<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>();</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    </div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordflow">if</span> ( e == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        e = strlen(str) - b;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), str+b, str+e);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + <a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a">utf32_distance</a>(__base::const_iterator(str+b), __base::const_iterator(str+e)));</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="preprocessor"></span>    <span class="keyword">auto</span> inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), str+b, str+e));</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00614"></a><span class="lineno"><a class="code" href="classstring.xhtml#a69cd472310927b4b1ac695727cc4c889">  614</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#ae2d58f7b6185142dd302a8d00bb4ae6f">string::insert</a>(<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;{</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keywordflow">if</span> ( pos == <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>() )</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#ad877fe3f0bf888eadef70b0a428f76db">append</a>(n, c).<a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>();</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="preprocessor">#if CXX11_STRING_UNAVAILABLE</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), n, c);</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(pos + n);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="preprocessor"></span>    <span class="keyword">auto</span> inserted(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.insert(pos.base(), n, c));</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(inserted, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00626"></a><span class="lineno"><a class="code" href="classstring.xhtml#af0ce19fec16ed458359c7c3dd51e3f46">  626</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#af0ce19fec16ed458359c7c3dd51e3f46">string::erase</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;{</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __s = <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>();</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordflow">if</span> ( pos == 0 &amp;&amp; n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    {</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <a class="code" href="classstring.xhtml#a61728c6a130781ce3d6d0f5cf42537d5">clear</a>();</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    }</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( pos+n &gt; __s )</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    {</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordflow">throw</span> std::range_error(<span class="stringliteral">&quot;Erase range outside string bounds&quot;</span>);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    }</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( n &gt; 0 )</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    {</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <span class="keywordflow">if</span> ( n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> || pos+n == __s )</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.erase(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos));</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        }</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            __base::size_type bpos = <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            __base::size_type bend = <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.erase(bpos, bend-bpos);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    }</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;}</div>
<div class="line"><a name="l00653"></a><span class="lineno"><a class="code" href="classstring.xhtml#ae52fa57ec243647ccd7c0451487894d7">  653</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#af0ce19fec16ed458359c7c3dd51e3f46">string::erase</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> pos)</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;{</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keyword">auto</span> modified(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.erase(pos.base()));</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(modified, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;}</div>
<div class="line"><a name="l00658"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2d0b16a2c9083802d284948f01129d70">  658</a></span>&#160;<a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">string::iterator</a> <a class="code" href="classstring.xhtml#af0ce19fec16ed458359c7c3dd51e3f46">string::erase</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> first, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> last)</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;{</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keyword">auto</span> modified(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.erase(first.base(), last.base()));</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#af505a660c38168feaf6dfc3d7047d2f7">iterator</a>(modified, <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.begin(), <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.end());</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;}</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="preprocessor">#ifndef UTFSTRING_SPECIALIZATIONS_INLINED</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00665"></a><span class="lineno"><a class="code" href="classstring.xhtml#a096d628ab5bd99248a263e11bc4abbca">  665</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> j1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> j2)</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;{</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), j1.base(), j2.base());</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00671"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad210362dd6fff696575bedd6687972f7">  671</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, __base::const_iterator j1, __base::const_iterator j2)</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;{</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), j1, j2);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;}</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00677"></a><span class="lineno"><a class="code" href="classstring.xhtml#a64b324f48904f42499ff5fae7d181173">  677</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, std::u32string::const_iterator j1, std::u32string::const_iterator j2)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;{</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(&amp;(*j1), 0, std::distance(j1, j2));</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00684"></a><span class="lineno"><a class="code" href="classstring.xhtml#aa040f8e2e2df934f50092abb8c13f261">  684</a></span>&#160;<span class="preprocessor"></span><span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str)</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;{</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;}</div>
<div class="line"><a name="l00689"></a><span class="lineno"><a class="code" href="classstring.xhtml#a0bf856b6cce7b79495611b180e74319f">  689</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;{</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>, str.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos2), str.<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos2, pos2+n2));</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;}</div>
<div class="line"><a name="l00694"></a><span class="lineno"><a class="code" href="classstring.xhtml#a507320106bba65034ac2817429a55d3b">  694</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str)</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;{</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), str.<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;}</div>
<div class="line"><a name="l00699"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad9d4eb17596164bf2b5f512bcc68111d">  699</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;{</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(s, 0, n2));</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div>
<div class="line"><a name="l00704"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3a026049a4b221901d1d1f5e42ddc7b8">  704</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;{</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char16_t&gt;::toUTF8</a>(s, 0, n2));</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;}</div>
<div class="line"><a name="l00709"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4e36640b5d5b7358373aa331355d0315">  709</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s)</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;{</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;value_type&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;}</div>
<div class="line"><a name="l00714"></a><span class="lineno"><a class="code" href="classstring.xhtml#accfd766d02cd167386533c570fc28fb6">  714</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> char16_t* s)</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;{</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), <a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char16_t&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;}</div>
<div class="line"><a name="l00719"></a><span class="lineno"><a class="code" href="classstring.xhtml#aeb8cc40e53d99fc148cdfb666c6d58b3">  719</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2, <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> c)</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;{</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(c);</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <span class="keywordflow">if</span> ( n2 == 1 )</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    {</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    }</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length() == 1 )</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    {</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), n2, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]);</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    }</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    {</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        decltype(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>) buf;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        buf.reserve(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length()*n2);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n2; i++ )</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            buf.append(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), buf);</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    </div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;}</div>
<div class="line"><a name="l00741"></a><span class="lineno"><a class="code" href="classstring.xhtml#a7ac92c75cda98404c168109f70340799">  741</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2, char16_t c)</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;{</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(c);</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordflow">if</span> ( n2 == 1 )</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    }</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length() == 1 )</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    {</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), n2, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]);</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    }</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    {</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        decltype(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>) buf;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        buf.reserve(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length()*n2);</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n2; i++ )</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            buf.append(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), buf);</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    }</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    </div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;}</div>
<div class="line"><a name="l00763"></a><span class="lineno"><a class="code" href="classstring.xhtml#a48a7d9c6958fe14e628a7c28a21e62e7">  763</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;{</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;}</div>
<div class="line"><a name="l00768"></a><span class="lineno"><a class="code" href="classstring.xhtml#a39a90a567f448a2fce94d952c3c58cfe">  768</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;{</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(s, 0, n));</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;}</div>
<div class="line"><a name="l00773"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2dba83d94e8d5ce13bfa0f2b5fab794e">  773</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s)</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;{</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;value_type&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;}</div>
<div class="line"><a name="l00778"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4ca47cabcb082461d182189b86b0878c">  778</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> char16_t* s)</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;{</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(s));</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;}</div>
<div class="line"><a name="l00783"></a><span class="lineno"><a class="code" href="classstring.xhtml#aea018bd960dce632176485c9fad9cc86">  783</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, char16_t c)</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;{</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keyword">auto</span> <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a> = <a class="code" href="classstring_1_1___convert.xhtml#a1933a2360fabfac827da9e0df6501aaa">_Convert&lt;char16_t&gt;::toUTF8</a>(c);</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keywordflow">if</span> ( n == 1 )</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    {</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    }</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length() == 1 )</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    {</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), n, <a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>[0]);</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    }</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    {</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        decltype(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>) buf;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        buf.reserve(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>.length()*n);</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0; i &lt; n; i++ )</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            buf.append(<a class="code" href="classstring.xhtml#a1f0e4d4913bb2a5cf978b40763365bc6">utf8</a>);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), buf);</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    }</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    </div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;}</div>
<div class="line"><a name="l00805"></a><span class="lineno"><a class="code" href="classstring.xhtml#a02223d27b421f24f6a58634f114d67ec">  805</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; str)</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;{</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), str);</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;}</div>
<div class="line"><a name="l00810"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1a0d27bc99726709fa3cf5be428cf54a">  810</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; str, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;{</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos1, pos1+n1), str, pos2, n2);</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;}</div>
<div class="line"><a name="l00815"></a><span class="lineno"><a class="code" href="classstring.xhtml#af44ed117dbbc27b1370a56545598bf7f">  815</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp; str)</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;{</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), str);</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;}</div>
<div class="line"><a name="l00820"></a><span class="lineno"><a class="code" href="classstring.xhtml#abb1ca4fe64779c8e4b09e30e5427fe06">  820</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;{</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), s, n2);</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;}</div>
<div class="line"><a name="l00825"></a><span class="lineno"><a class="code" href="classstring.xhtml#a6ceff6eaa92d470503ba4e907b10f31e">  825</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> <span class="keywordtype">char</span> * s)</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;{</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), s);</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;}</div>
<div class="line"><a name="l00830"></a><span class="lineno"><a class="code" href="classstring.xhtml#a4ca849b60f26d771cbede9ed958ad2a7">  830</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2, <span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;{</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n1), n2, c);</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;}</div>
<div class="line"><a name="l00835"></a><span class="lineno"><a class="code" href="classstring.xhtml#a410be014e8b28f310cfff2479c77ff63">  835</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;{</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), s, n);</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;}</div>
<div class="line"><a name="l00840"></a><span class="lineno"><a class="code" href="classstring.xhtml#a46a823743ee370e10b441aeb941e23f0">  840</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <span class="keyword">const</span> <span class="keywordtype">char</span> * s)</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;{</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), s);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;}</div>
<div class="line"><a name="l00845"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac400a39081aabdc1b13716ac0bfb7a29">  845</a></span>&#160;<span class="keywordtype">string</span> &amp; <a class="code" href="classstring.xhtml#a40f92a94edfb869c45832b3abbb794dc">string::replace</a>(<a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i1, <a class="code" href="utfstring_8h.xhtml#a7acc62ec37b59df921a1c471b3750b71">cxx11_const_iterator</a> i2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <span class="keywordtype">char</span> c)</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;{</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.replace(i1.base(), i2.base(), n, c);</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;}</div>
<div class="line"><a name="l00850"></a><span class="lineno"><a class="code" href="classstring.xhtml#a383564cfaac408dba9d96e4e37843bf6">  850</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> <a class="code" href="classstring.xhtml#a383564cfaac408dba9d96e4e37843bf6">string::copy</a>(<a class="code" href="classstring.xhtml#a827ff0d3607b5fe058614fe5f86260ac">u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)<span class="keyword"> const</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <a class="code" href="classstring.xhtml#a9b4c71ee483c3353b07e57625d09a39d">const_iterator</a> cur = <a class="code" href="classstring.xhtml#a350b8142d031e1678ee70e89313507d9">cbegin</a>()+pos;</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = 0;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keywordflow">for</span> ( i = 0; i &lt; n &amp;&amp; cur &lt; <a class="code" href="classstring.xhtml#a153c08a0325e4ca9e21d913e4ba7c424">end</a>(); i++, cur++ )</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    {</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        s[i] = *cur;</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    }</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;}</div>
<div class="line"><a name="l00860"></a><span class="lineno"><a class="code" href="classstring.xhtml#a543448c81e206be9095629551734b106">  860</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> <a class="code" href="classstring.xhtml#a383564cfaac408dba9d96e4e37843bf6">string::copy</a>(char16_t* s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos)<span class="keyword"> const</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">_Convert&lt;char16_t&gt;::fromUTF8</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.substr(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos))).<a class="code" href="classstring.xhtml#a383564cfaac408dba9d96e4e37843bf6">copy</a>(s, n);</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;}</div>
<div class="line"><a name="l00864"></a><span class="lineno"><a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">  864</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">string::substr</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n)<span class="keyword"> const</span></div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keywordflow">if</span> ( pos == 0 &amp;&amp; n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keywordflow">if</span> ( n == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.substr(<a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos)));</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    </div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    __base::size_type bpos = <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos), bn = <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">to_byte_size</a>(pos, pos+n) - bpos;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.substr(bpos, bn));</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;}</div>
<div class="line"><a name="l00874"></a><span class="lineno"><a class="code" href="classstring.xhtml#a855707c67bb7d50f93f836394a2fdaf4">  874</a></span>&#160;std::u32string <a class="code" href="classstring.xhtml#a855707c67bb7d50f93f836394a2fdaf4">string::utf32string</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">_Convert&lt;value_type&gt;::fromUTF8</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;}</div>
<div class="line"><a name="l00878"></a><span class="lineno"><a class="code" href="classstring.xhtml#ac536ec55387a215f506cb76e56b91ce8">  878</a></span>&#160;std::u16string <a class="code" href="classstring.xhtml#ac536ec55387a215f506cb76e56b91ce8">string::utf16string</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">_Convert&lt;char16_t&gt;::fromUTF8</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;}</div>
<div class="line"><a name="l00882"></a><span class="lineno"><a class="code" href="classstring.xhtml#a27209c5cb7609e20062324ce55a8e7f2">  882</a></span>&#160;std::wstring <a class="code" href="classstring.xhtml#a27209c5cb7609e20062324ce55a8e7f2">string::wchar_string</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">_Convert&lt;wchar_t&gt;::fromUTF8</a>(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>);</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;}</div>
<div class="line"><a name="l00886"></a><span class="lineno"><a class="code" href="classstring.xhtml#afb979c58f37bc9b69f2ce5d43fe00820">  886</a></span>&#160;<span class="keywordtype">string</span>&amp; <a class="code" href="classstring.xhtml#afb979c58f37bc9b69f2ce5d43fe00820">string::tolower</a>(<span class="keyword">const</span> std::locale&amp; loc)</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;{</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <span class="keyword">auto</span>&amp; facet = std::use_facet&lt;std::ctype&lt;char&gt;&gt;(loc);</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    facet.<a class="code" href="classstring.xhtml#afb979c58f37bc9b69f2ce5d43fe00820">tolower</a>(const_cast&lt;char*&gt;(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.data()), const_cast&lt;char*&gt;(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.data()) + <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.size());</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;}</div>
<div class="line"><a name="l00892"></a><span class="lineno"><a class="code" href="classstring.xhtml#a30d384c20d22734a1ae1e2d6834ab770">  892</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#afb979c58f37bc9b69f2ce5d43fe00820">string::tolower</a>(<span class="keyword">const</span> std::locale&amp; loc)<span class="keyword"> const</span></div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(*this).tolower(loc);</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;}</div>
<div class="line"><a name="l00896"></a><span class="lineno"><a class="code" href="classstring.xhtml#a765b90173d8c7257c9ed672f0ed921ed">  896</a></span>&#160;<span class="keywordtype">string</span>&amp; <a class="code" href="classstring.xhtml#a765b90173d8c7257c9ed672f0ed921ed">string::toupper</a>(<span class="keyword">const</span> std::locale&amp; loc)</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;{</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keyword">auto</span>&amp; facet = std::use_facet&lt;std::ctype&lt;char&gt;&gt;(loc);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    facet.<a class="code" href="classstring.xhtml#a765b90173d8c7257c9ed672f0ed921ed">toupper</a>(const_cast&lt;char*&gt;(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.data()), const_cast&lt;char*&gt;(<a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.data()) + <a class="code" href="classstring.xhtml#a6752a00499d608d1871b1f2d64efe54f">_base</a>.size());</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;}</div>
<div class="line"><a name="l00902"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2720e7fd317499bda03ddc61876d9e12">  902</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">string</span> <a class="code" href="classstring.xhtml#a765b90173d8c7257c9ed672f0ed921ed">string::toupper</a>(<span class="keyword">const</span> std::locale&amp; loc)<span class="keyword"> const</span></div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring.xhtml#a362899b7e6f6d35abf0673c0a06f4401">string</a>(*this).toupper(loc);</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;}</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="preprocessor">#ifndef UTFSTRING_SPECIALIZATIONS_INLINED</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00908"></a><span class="lineno"><a class="code" href="classstring.xhtml#afbd4492bda96f81b0d3c41ce285c87c3">  908</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keywordflow">return</span> find_first_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;}</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00913"></a><span class="lineno"><a class="code" href="classstring.xhtml#a58bcf2146769be3722a72b6404f51506">  913</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span>  {</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">return</span> find_first_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;}</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00918"></a><span class="lineno"><a class="code" href="classstring.xhtml#a6637bc84cb4c8371893b4a3df78f998a">  918</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="keywordflow">return</span> find_first_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;}</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00923"></a><span class="lineno"><a class="code" href="classstring.xhtml#a8c951ff5573a113dde05c448b96c8a9d">  923</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keywordflow">return</span> find_first_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;}</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00928"></a><span class="lineno"><a class="code" href="classstring.xhtml#a2bcbcd385b28cba0b9fc5b86c01bdb11">  928</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keywordflow">return</span> find_last_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;}</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00933"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab1cbd5929b7cf524d0bb16343d3a97c2">  933</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <span class="keywordflow">return</span> find_last_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;}</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00938"></a><span class="lineno"><a class="code" href="classstring.xhtml#afb46cbcb723b8bcd0260fc0bc4aa4889">  938</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keywordflow">return</span> find_last_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;}</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00943"></a><span class="lineno"><a class="code" href="classstring.xhtml#aae67fbe6aa43e9a51b1f44459b8251a3">  943</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordflow">return</span> find_last_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;}</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00948"></a><span class="lineno"><a class="code" href="classstring.xhtml#a491219c30a842532db9dd949c4d07ed2">  948</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_not_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keywordflow">return</span> find_first_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00953"></a><span class="lineno"><a class="code" href="classstring.xhtml#a88110cb41fc395f64b3d94cc5679daa5">  953</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_not_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    <span class="keywordflow">return</span> find_first_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;}</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00958"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1d6148fc80e404d403d60388bd60eedb">  958</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_not_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="keywordflow">return</span> find_first_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;}</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00963"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9ded32c822090b9f42bc3cc0c60ee050">  963</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_first_not_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <span class="keywordflow">return</span> find_first_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;}</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00968"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab814092526b86d5d6a256367664f8c1a">  968</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_not_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="keywordflow">return</span> find_last_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;}</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00973"></a><span class="lineno"><a class="code" href="classstring.xhtml#a96f0685a5f27e34857494ce1986a9ac3">  973</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_not_of&lt;char&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <span class="keywordflow">return</span> find_last_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;char&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;}</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00978"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1f9c0448ee9399a5a64f0de1d2297b9c">  978</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_not_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <span class="keywordflow">return</span> find_last_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;}</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00983"></a><span class="lineno"><a class="code" href="classstring.xhtml#a6d1b6103d797829a0b0b80b36086a101">  983</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> string::find_last_not_of&lt;xmlChar&gt;(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> * s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos) <span class="keyword">const</span> {</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    validate_utf8(s+pos, npos);</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <span class="keywordflow">return</span> find_last_not_of(<a class="code" href="classstring_1_1___convert.xhtml">_Convert&lt;xmlChar&gt;::toUTF8</a>(s), pos);</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;}</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00988"></a><span class="lineno"><a class="code" href="classstring.xhtml#a672413882bfb4cf898622edd900dd787">  988</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">string::compare</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">value_type</a> * s) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#a189faadd7f99f6c354db09acbb2aafcd">noexcept</a></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;{</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <span class="keywordflow">if</span> ( s == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    </div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz = size();</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = traits_type::length(s);</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n = std::min(sz, len);</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    </div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    <span class="keyword">auto</span> pos = cbegin();</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="keywordflow">for</span> ( ; n; pos++, s++ )</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    {</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*pos, *s) )</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*s, *pos) )</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    }</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    </div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    <span class="keywordflow">if</span> ( sz &lt; len )</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keywordflow">if</span> ( sz &gt; len )</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;}</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01013"></a><span class="lineno"><a class="code" href="classstring.xhtml#a31d2331098477235a57370ddd7561b09"> 1013</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">string::compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s)<span class="keyword"> const</span></div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="keywordflow">if</span> ( s == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <span class="keywordflow">if</span> ( n1 == 0 &amp;&amp; *s != 0 )</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    </div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz = (n1 == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() - pos1 : n1);</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = traits_type::length(s);</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n = std::min(sz, len);</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    </div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keyword">auto</span> pos = <a class="code" href="classstring.xhtml#a350b8142d031e1678ee70e89313507d9">cbegin</a>()+pos1;</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="keywordflow">for</span> ( ; n; pos++, s++ )</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    {</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*pos, *s) )</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*s, *pos) )</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    }</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    </div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keywordflow">if</span> ( sz &lt; len )</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <span class="keywordflow">if</span> ( sz &gt; len )</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;}</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01040"></a><span class="lineno"><a class="code" href="classstring.xhtml#a94037d45cceb04d1e59b209111c23613"> 1040</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">string::compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <a class="code" href="classstring.xhtml#afab8195c2ad96661ad90db81fa34f5d7">const_u4pointer</a> s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)<span class="keyword"> const</span></div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    <span class="keywordflow">if</span> ( s == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keywordflow">if</span> ( n1 == 0 &amp;&amp; *s != 0 )</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    </div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz = (n1 == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() - pos1 : n1);</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = std::min(traits_type::length(s), n2);</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n = std::min(sz, len);</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    </div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keyword">auto</span> pos = <a class="code" href="classstring.xhtml#a350b8142d031e1678ee70e89313507d9">cbegin</a>()+pos1;</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <span class="keywordflow">for</span> ( ; n; pos++, s++ )</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    {</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*pos, *s) )</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*s, *pos) )</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    }</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    </div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <span class="keywordflow">if</span> ( sz &lt; len )</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <span class="keywordflow">if</span> ( sz &gt; len )</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;}</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01067"></a><span class="lineno"><a class="code" href="classstring.xhtml#ad1159b0a671d1ac7a9f87d6905fef155"> 1067</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">string::compare</a>(<span class="keyword">const</span> std::u32string &amp; s) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#a189faadd7f99f6c354db09acbb2aafcd">noexcept</a></div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;{</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz = size();</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = s.size();</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n = std::min(sz, len);</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    </div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="keyword">auto</span> pos = cbegin();</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="keyword">auto</span> spos = s.cbegin();</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keywordflow">for</span> ( ; n; pos++, spos++ )</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    {</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*pos, *spos) )</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*spos, *pos) )</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    }</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    </div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <span class="keywordflow">if</span> ( sz &lt; len )</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <span class="keywordflow">if</span> ( sz &gt; len )</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;}</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01090"></a><span class="lineno"><a class="code" href="classstring.xhtml#a705dabf6088f8f5938f9fc3afd7673b9"> 1090</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">string::compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> std::u32string&amp; str)<span class="keyword"> const</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <span class="keywordflow">if</span> ( n1 == 0 &amp;&amp; !str.empty() )</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    </div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz = (n1 == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() - pos1 : n1);</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = str.size();</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n = std::min(sz, len);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    </div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keyword">auto</span> pos = <a class="code" href="classstring.xhtml#a350b8142d031e1678ee70e89313507d9">cbegin</a>()+pos1;</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    <span class="keyword">auto</span> spos = str.cbegin();</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <span class="keywordflow">for</span> ( ; n; pos++, spos++ )</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    {</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*pos, *spos) )</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*spos, *pos) )</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    }</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    </div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <span class="keywordflow">if</span> ( sz &lt; len )</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <span class="keywordflow">if</span> ( sz &gt; len )</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;}</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l01116"></a><span class="lineno"><a class="code" href="classstring.xhtml#a40fb1fdf285600eccb8143fc380f5254"> 1116</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classstring.xhtml#a8fbf8abacdb08c0b5cdcebce05282619">string::compare</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos1, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n1, <span class="keyword">const</span> std::u32string&amp; str,</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> pos2, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n2)<span class="keyword"> const</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <span class="keywordflow">if</span> ( n1 == 0 &amp;&amp; n2 &gt; 0 )</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    </div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz = (n1 == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? <a class="code" href="classstring.xhtml#aecb9d18894116bec678f039638fd0958">size</a>() - pos1 : n1);</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = (n2 == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? str.size() - pos2 : n2);</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> n = std::min(sz, len);</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    </div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    <span class="keyword">auto</span> pos = <a class="code" href="classstring.xhtml#a350b8142d031e1678ee70e89313507d9">cbegin</a>()+pos1;</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    <span class="keyword">auto</span> spos = str.cbegin();</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <span class="keywordflow">for</span> ( ; n; pos++, spos++ )</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    {</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*pos, *spos) )</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;            <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;        <span class="keywordflow">if</span> ( traits_type::lt(*spos, *pos) )</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    }</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    </div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="keywordflow">if</span> ( sz &lt; len )</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    <span class="keywordflow">if</span> ( sz &gt; len )</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;}</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e"> 1143</a></span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">string::validate_utf8</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s)<span class="keyword"> const</span></div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <span class="keywordflow">if</span> ( utf8::is_valid(s.begin(), s.end()) == <span class="keyword">false</span> )</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml">InvalidUTF8Sequence</a>(std::string(<span class="stringliteral">&quot;Invalid UTF-8 byte sequence: &quot;</span>) + s);</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;}</div>
<div class="line"><a name="l01148"></a><span class="lineno"><a class="code" href="classstring.xhtml#a9f932541239318bba75820c18d2a8db7"> 1148</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">string::validate_utf8</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz)<span class="keyword"> const</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <span class="keywordflow">if</span> ( sz == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        sz = strlen(s);</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    </div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    <span class="keywordflow">if</span> ( utf8::is_valid(s, s + sz) == <span class="keyword">false</span> )</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml">InvalidUTF8Sequence</a>(std::string(<span class="stringliteral">&quot;Invalid UTF-8 byte sequence: &quot;</span>) + s);</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;}</div>
<div class="line"><a name="l01156"></a><span class="lineno"><a class="code" href="classstring.xhtml#a1fb68c61919e9d31b00a28c991ed3e36"> 1156</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">string::validate_utf8</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> sz)<span class="keyword"> const</span></div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    <a class="code" href="classstring.xhtml#a5bad4c0a61aa4172f8770ad369885b0e">validate_utf8</a>(reinterpret_cast&lt;const char*&gt;(s), sz == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> ? <a class="code" href="utfstring_8h.xhtml#a59e101a5876de8aebb7d64348d68f770">xmlStrlen</a>(s) : sz);</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;}</div>
<div class="line"><a name="l01160"></a><span class="lineno"><a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a"> 1160</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">string::throw_unless_insertable</a>(<span class="keyword">const</span> <a class="code" href="classstring.xhtml#ae026e4459a413e4f8c7f90c00234c897">__base</a> &amp;s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)<span class="keyword"> const</span></div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(s.c_str(), b, e);</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;}</div>
<div class="line"><a name="l01164"></a><span class="lineno"><a class="code" href="classstring.xhtml#a3969232d86fa03d23749b1f327ea4ce7"> 1164</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">string::throw_unless_insertable</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)<span class="keyword"> const</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    <span class="comment">// bounds-check the UTF8 string: is it valid?</span></div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="keywordflow">if</span> ( e == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">npos</a> )</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;        e = strlen(s);</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    </div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> t = 0;</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keywordflow">while</span> ( t &lt; b )</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        t += <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(s[t]);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    </div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    <span class="comment">// did it land directly at the starting bound?</span></div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    <span class="keywordflow">if</span> ( t &gt; b )</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml">InvalidUTF8Sequence</a>(std::string(<span class="stringliteral">&quot;Invalid UTF-8 byte sequence: &quot;</span>) + s);</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    </div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <span class="comment">// now check for the ending bound</span></div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    <span class="comment">// if end == npos, we&#39;re checking the validity of the string (no partial multibyte characters at the end)</span></div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    <span class="keywordflow">while</span> ( t &lt; e )</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        t += <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(s[t]);</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    </div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="comment">// did it land cleanly or go past the bound?</span></div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    <span class="keywordflow">if</span> ( t &gt; e )</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classstring_1_1_invalid_u_t_f8_sequence.xhtml">InvalidUTF8Sequence</a>(std::string(<span class="stringliteral">&quot;Invalid UTF-8 byte sequence: &quot;</span>) + s);</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;}</div>
<div class="line"><a name="l01187"></a><span class="lineno"><a class="code" href="classstring.xhtml#af09588f20af088a31fba6108c1224d76"> 1187</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">string::throw_unless_insertable</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *s, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> e)<span class="keyword"> const</span></div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <a class="code" href="classstring.xhtml#a41fb7372ee924e2705534c9bdfc47c9a">throw_unless_insertable</a>(reinterpret_cast&lt;const char*&gt;(s), b, e);</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;}</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;</div>
<div class="line"><a name="l01192"></a><span class="lineno"><a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0"> 1192</a></span>&#160;string::__base::size_type <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">string::to_byte_size</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __n) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;{</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    __base::size_type count = 0;</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="keywordflow">if</span> ( __n == npos || __n &gt; size() )</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    {</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        count = __base::npos;</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    }</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( __n == size() )</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    {</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;        count = _base.size();</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    }</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    {</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        <span class="keyword">auto</span> pos = _base.cbegin();</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        <span class="keyword">auto</span> end = _base.cend();</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> s = 0; s &lt; __n &amp;&amp; pos &lt; end; s++ )</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        {</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;            <span class="keywordtype">size_t</span> c = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*pos);</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;            pos += c;</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;            count += c;</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        }</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    }</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    </div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    <span class="keywordflow">return</span> count;</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;}</div>
<div class="line"><a name="l01217"></a><span class="lineno"><a class="code" href="classstring.xhtml#a372b77e16bc127bedcd34dbff7c26ba8"> 1217</a></span>&#160;string::__base::size_type <a class="code" href="classstring.xhtml#af76bbadcde627705d3f7b601b6ae72c0">string::to_byte_size</a>(<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __b, <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __e) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;{</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="keywordflow">if</span> ( __e == __base::npos )</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;        <span class="keywordflow">return</span> __base::npos;</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    </div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    __base::size_type r = to_byte_size(__b);</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <span class="keywordflow">if</span> ( __e == 0 )</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    </div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keyword">auto</span> pos = _base.cbegin()+r;</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = __b; i &lt; __e; i++ )</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    {</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        <span class="keywordtype">size_t</span> c = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*pos);</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        pos += c;</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;        r += c;</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    }</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    </div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;}</div>
<div class="line"><a name="l01236"></a><span class="lineno"><a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa"> 1236</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">string::to_utf32_size</a>(__base::size_type __n) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;{</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> count = 0;</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    <span class="keywordflow">if</span> ( __n == __base::npos || __n &gt; _base.size() )</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    {</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        count = npos;</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    }</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    {</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        <span class="keyword">auto</span> pos = _base.cbegin();</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        <span class="keyword">auto</span> end = _base.cend();</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> s = 0; s &lt; __n &amp;&amp; pos &lt; end; count++ )</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        {</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;            <span class="keywordtype">size_t</span> c = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*pos);</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;            pos += c;</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;            s += c;</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;        }</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    }</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    </div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    <span class="keywordflow">return</span> count;</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;}</div>
<div class="line"><a name="l01257"></a><span class="lineno"><a class="code" href="classstring.xhtml#a485130d4d7f18ea1c9a78d84f2411a54"> 1257</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> <a class="code" href="classstring.xhtml#a5b0cd3276016f8111e4d5c12a7fc73aa">string::to_utf32_size</a>(__base::size_type __b, __base::size_type __e) <span class="keyword">const</span> <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;{</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <span class="keywordflow">if</span> ( __e == npos )</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        <span class="keywordflow">return</span> npos;</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    </div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> count = 0;</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    <span class="keyword">auto</span> pos = _base.cbegin()+__b;</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <span class="keywordflow">for</span> ( <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> i = __b; i &lt; __e; )</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    {</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        <span class="keywordtype">size_t</span> c = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*pos);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        pos += c;</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        count++;</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    }</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="keywordflow">return</span> count;</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;}</div>
<div class="line"><a name="l01272"></a><span class="lineno"><a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a"> 1272</a></span>&#160;<a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">string::size_type</a> <a class="code" href="classstring.xhtml#a99e9baa55c4e4799a2381347097ebe9a">string::utf32_distance</a>(__base::const_iterator first, __base::const_iterator last) <a class="code" href="__compiler_8h.xhtml#ad7597118202b58872a4a874eab3dc1a2">_NOEXCEPT</a></div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;{</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __s = 0;</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> pos = first; pos &lt; last; )</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    {</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;        <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> __c = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*pos);</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;        __s += __c;</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;        pos += __c;</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    }</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <span class="keywordflow">return</span> __s;</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;}</div>
<div class="line"><a name="l01283"></a><span class="lineno"><a class="code" href="classstring.xhtml#afb4f6da67da53b03789b024c96a8e24c"> 1283</a></span>&#160;<a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">string::value_type</a> <a class="code" href="classstring.xhtml#afb4f6da67da53b03789b024c96a8e24c">string::utf8_to_utf32</a>(<span class="keyword">const</span> <a class="code" href="utfstring_8h.xhtml#afb1489b546f7800463867523ffaee1d3">xmlChar</a> *utf8)</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;{</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <span class="keywordflow">if</span> ( utf8 == <span class="keyword">nullptr</span> )</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    </div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*utf8);</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">_Convert&lt;value_type&gt;::fromUTF8</a>(reinterpret_cast&lt;const char*&gt;(utf8), len).at(0);</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;}</div>
<div class="line"><a name="l01291"></a><span class="lineno"><a class="code" href="classstring.xhtml#ab92f5e6a8e67f6b006a594447e691a19"> 1291</a></span>&#160;<a class="code" href="classstring.xhtml#a8f1a6eed7c9fc7739f256d2ed4edb525">string::value_type</a> <a class="code" href="classstring.xhtml#afb4f6da67da53b03789b024c96a8e24c">string::utf8_to_utf32</a>(<span class="keyword">const</span> __base::const_iterator p)</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;{</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    <a class="code" href="classstring.xhtml#a000faf060ecec169c870bd9d8501046c">size_type</a> len = <a class="code" href="utfstring_8h.xhtml#acf9ef5e35e5a4d47f98e526ee0ac6fde">UTF8CharLen</a>(*p);</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classstring_1_1___convert.xhtml#ae9de02d3cbb8eaba613c44e57326ecfc">_Convert&lt;value_type&gt;::fromUTF8</a>(&amp;(*p), len).at(0);</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;}</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;EPUB3_END_NAMESPACE</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_090fe5b49b20e659802fc7ff806b453c.xhtml">utilities</a></li><li class="navelem"><a class="el" href="utfstring_8cpp.xhtml">utfstring.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
