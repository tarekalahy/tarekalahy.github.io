<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/ePub/manifest.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('manifest_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">manifest.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="manifest_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  manifest.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-11-29.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="manifest_8h.xhtml">manifest.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="package_8h.xhtml">package.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="byte__stream_8h.xhtml">byte_stream.h</a>&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="container_8h.xhtml">container.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;ePub3/xml/document.h&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include REGEX_INCLUDE</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#if EPUB_COMPILER_SUPPORTS(CXX_INITIALIZER_LISTS)</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span><span class="keyword">const</span> ItemProperties::PropertyMap ItemProperties::PropertyLookupTable = {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    { <span class="stringliteral">&quot;cover-image&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa7ecbfc49a806c55e2c18c527371ce85" title="This item is the cover image for the publication.">ItemProperties::CoverImage</a> },</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    { <span class="stringliteral">&quot;mathml&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa66dadd5747616c32dc5707a4e45adb5" title="This item contains MathML markup.">ItemProperties::ContainsMathML</a> },</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    { <span class="stringliteral">&quot;nav&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a4c661962cb9533e8717d8bb51b5ebb16" title="This item is the EPUB 3 navigation document for the publication.">ItemProperties::Navigation</a> },</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    { <span class="stringliteral">&quot;remote-resources&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a7be49438bc4fa7386998f8ebeb63c4c5" title="This item accesses resources located outside the EPUB container.">ItemProperties::HasRemoteResources</a> },</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    { <span class="stringliteral">&quot;scripted&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441af005fb261de810579c3d5d92c5f4c21f" title="This item has content which uses JavaScript or HTML5 forms.">ItemProperties::HasScriptedContent</a> },</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    { <span class="stringliteral">&quot;svg&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a17b4ce33a844a1abd504acefed81c613" title="This item contains SVG markup.">ItemProperties::ContainsSVG</a> },</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    { <span class="stringliteral">&quot;switch&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a285c50884fdb6731e91d37f376695473" title="This item contains an epub:switch element.">ItemProperties::ContainsSwitch</a> }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;};</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="code" href="manifest_8cpp.xhtml#ad5c0199a1fc99fdc6ebd24ba799499e4">   42</a></span>&#160;<span class="preprocessor"></span><span class="keyword">const</span> std::pair&lt;string,ItemProperties::value_type&gt; <a class="code" href="manifest_8cpp.xhtml#ad5c0199a1fc99fdc6ebd24ba799499e4">__pm_pairs</a>[7] = {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    std::pair&lt;string,ItemProperties::value_type&gt;(<span class="stringliteral">&quot;cover-image&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa7ecbfc49a806c55e2c18c527371ce85" title="This item is the cover image for the publication.">ItemProperties::CoverImage</a>),</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    std::pair&lt;string,ItemProperties::value_type&gt;(<span class="stringliteral">&quot;mathml&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa66dadd5747616c32dc5707a4e45adb5" title="This item contains MathML markup.">ItemProperties::ContainsMathML</a>),</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    std::pair&lt;string,ItemProperties::value_type&gt;(<span class="stringliteral">&quot;nav&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a4c661962cb9533e8717d8bb51b5ebb16" title="This item is the EPUB 3 navigation document for the publication.">ItemProperties::Navigation</a>),</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::pair&lt;string,ItemProperties::value_type&gt;(<span class="stringliteral">&quot;remote-resources&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a7be49438bc4fa7386998f8ebeb63c4c5" title="This item accesses resources located outside the EPUB container.">ItemProperties::HasRemoteResources</a>),</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::pair&lt;string,ItemProperties::value_type&gt;(<span class="stringliteral">&quot;scripted&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441af005fb261de810579c3d5d92c5f4c21f" title="This item has content which uses JavaScript or HTML5 forms.">ItemProperties::HasScriptedContent</a>),</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::pair&lt;string,ItemProperties::value_type&gt;(<span class="stringliteral">&quot;svg&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a17b4ce33a844a1abd504acefed81c613" title="This item contains SVG markup.">ItemProperties::ContainsSVG</a>),</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    std::pair&lt;string,ItemProperties::value_type&gt;(<span class="stringliteral">&quot;switch&quot;</span>, <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a285c50884fdb6731e91d37f376695473" title="This item contains an epub:switch element.">ItemProperties::ContainsSwitch</a>)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">const</span> ItemProperties::PropertyMap ItemProperties::PropertyLookupTable(&amp;<a class="code" href="manifest_8cpp.xhtml#ad5c0199a1fc99fdc6ebd24ba799499e4">__pm_pairs</a>[0], &amp;<a class="code" href="manifest_8cpp.xhtml#ad5c0199a1fc99fdc6ebd24ba799499e4">__pm_pairs</a>[7]);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">   54</a></span>&#160;<a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties::ItemProperties</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; attrStr) : _p(None)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// I prefer the explicit syntax when I&#39;m actually calling an implementation in an operator</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">//  because it&#39;s clearer what&#39;s happening than &#39;*this = attrStr&#39;</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    this-&gt;<a class="code" href="class_item_properties.xhtml#a483df476485689b893ad28adad874e38" title="Assignment from another ItemProperties instance.">operator=</a>(attrStr);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a6cbe71f30b104ff3fe0ea649368a296b">   60</a></span>&#160;<a class="code" href="class_item_properties.xhtml#a50db86f66c539df9de5c8920adf122f9">ItemProperties::ItemProperties</a>(<span class="keyword">const</span> <a class="code" href="class_i_r_i.xhtml">IRI</a>&amp; iri) : _p(None)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">string</span> attr(iri.<a class="code" href="class_i_r_i.xhtml#a76913516cf7fa53447186fd8d1bba665" title="Retrieves any fragment part of a URL IRI.">Fragment</a>());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span> ( attr.empty() )</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        attr = iri.<a class="code" href="class_i_r_i.xhtml#ac911deda4731f9b62ac3c967da9aeb43" title="Obtains the last path component of a URL IRI.">LastPathComponent</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    this-&gt;<a class="code" href="class_item_properties.xhtml#a483df476485689b893ad28adad874e38" title="Assignment from another ItemProperties instance.">operator=</a>(attr);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a959d4a97dc8cb4693d7fb262ec677697">   68</a></span>&#160;<a class="code" href="class_item_properties.xhtml">ItemProperties</a>&amp; <a class="code" href="class_item_properties.xhtml#a483df476485689b893ad28adad874e38" title="Assignment from another ItemProperties instance.">ItemProperties::operator=</a>(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; attrStr)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span> ( attrStr.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        _p = <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441ac8cf8b80e7146b68dda9dc24c39b2741" title="No properties defined.">None</a>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// ensure the attributes string is lowercase</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">string</span> lowAttrs = attrStr.<a class="code" href="classstring.xhtml#afb979c58f37bc9b69f2ce5d43fe00820">tolower</a>();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// NB: this is a C++11 raw-string literal. R&quot;&quot; means &#39;raw string&#39;, and the X(...)X bit are delimiters.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    REGEX_NS::regex re(<span class="stringliteral">&quot;\\w+(-\\w+)?&quot;</span>, REGEX_NS::regex::icase);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">auto</span> pos = REGEX_NS::sregex_iterator(lowAttrs.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>().begin(), lowAttrs.<a class="code" href="classstring.xhtml#a35bdd7a62c541f7aa1277f22d7a3c916">stl_str</a>().end(), re);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">auto</span> end = REGEX_NS::sregex_iterator();</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">for</span> ( ; pos != end; pos++ )</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="comment">// using the entire matched range</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keyword">auto</span> found = PropertyLookupTable.find(pos-&gt;str());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">if</span> ( found != PropertyLookupTable.end() )</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            _p |= found-&gt;second;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            printf(<span class="stringliteral">&quot;Property not found: %s (from %s)\n&quot;</span>, pos-&gt;str().c_str(), attrStr.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>());</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="code" href="class_item_properties.xhtml#a80e26151ede0e3deb177cade4991452b">  100</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_item_properties.xhtml#a80e26151ede0e3deb177cade4991452b" title="Cast to a string value suitable for use as the properties attribute of an XML manifest item element...">ItemProperties::str</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span> ( _p == <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441ac8cf8b80e7146b68dda9dc24c39b2741" title="No properties defined.">None</a> )</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    std::vector&lt;string&gt; vec;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="class_item_properties.xhtml#a5958d42adb2b70805e98670603fbac19" title="To avoid the C++ compiler&#39;s reticence for arithmetic on enum types, the value is an unsigned int...">value_type</a> test = 1;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">while</span> ( test &lt; <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a9cc47c1f9a8ae1f2a6b85755d20cc931" title="A mask for all standard EPUB 3 properties.">AllPropertiesMask</a> )</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">if</span> ( (_p &amp; test) == test )</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">switch</span> ( test )</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa7ecbfc49a806c55e2c18c527371ce85" title="This item is the cover image for the publication.">CoverImage</a>:</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    vec.emplace_back(<span class="stringliteral">&quot;cover-image&quot;</span>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441aa66dadd5747616c32dc5707a4e45adb5" title="This item contains MathML markup.">ContainsMathML</a>:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    vec.emplace_back(<span class="stringliteral">&quot;mathml&quot;</span>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a4c661962cb9533e8717d8bb51b5ebb16" title="This item is the EPUB 3 navigation document for the publication.">Navigation</a>:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    vec.emplace_back(<span class="stringliteral">&quot;nav&quot;</span>);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a7be49438bc4fa7386998f8ebeb63c4c5" title="This item accesses resources located outside the EPUB container.">HasRemoteResources</a>:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    vec.emplace_back(<span class="stringliteral">&quot;remote-resources&quot;</span>);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441af005fb261de810579c3d5d92c5f4c21f" title="This item has content which uses JavaScript or HTML5 forms.">HasScriptedContent</a>:</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    vec.emplace_back(<span class="stringliteral">&quot;scripted&quot;</span>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a17b4ce33a844a1abd504acefed81c613" title="This item contains SVG markup.">ContainsSVG</a>:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    vec.emplace_back(<span class="stringliteral">&quot;svg&quot;</span>);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="class_item_properties.xhtml#a8e3061ba4b99a3e6756619d539983441a285c50884fdb6731e91d37f376695473" title="This item contains an epub:switch element.">ContainsSwitch</a>:</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    vec.emplace_back(<span class="stringliteral">&quot;switch&quot;</span>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        test &lt;&lt;= 1;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span> ( vec.size() == 0 )</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::stringstream builder;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    builder &lt;&lt; vec[0];</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">for</span> ( decltype(vec.size()) i = 0; i &lt; vec.size(); i++ )</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        builder &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; vec[i];</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> builder.str();</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a8ae2227b7a03c6b3d476d065db3d4b90">  156</a></span>&#160;ManifestItem::ManifestItem(<span class="keyword">const</span> shared_ptr&lt;Package&gt;&amp; owner) : <a class="code" href="class_owned_by.xhtml">OwnedBy</a>(owner), <a class="code" href="class_property_holder.xhtml">PropertyHolder</a>(owner), _href(), _mediaType(), _mediaOverlayID(), _fallbackID(), _parsedProperties(0)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#adbb2fab04bada334ce20e596903e53fa">  159</a></span>&#160;ManifestItem::ManifestItem(<a class="code" href="class_manifest_item.xhtml">ManifestItem</a>&amp;&amp; o) : <a class="code" href="class_owned_by.xhtml">OwnedBy</a>(std::move(o)), <a class="code" href="class_property_holder.xhtml">PropertyHolder</a>(std::move(o)), <a class="code" href="class_x_m_l_identifiable.xhtml">XMLIdentifiable</a>(std::move(o)), _href(std::move(o._href)), _mediaType(std::move(o._mediaType)), _mediaOverlayID(std::move(o._mediaOverlayID)), _fallbackID(std::move(o._fallbackID)), _parsedProperties(std::move(o._parsedProperties))</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#abf44e0e00c3ed7c811899c9f61243951">  162</a></span>&#160;<a class="code" href="class_manifest_item.xhtml#abf44e0e00c3ed7c811899c9f61243951">ManifestItem::~ManifestItem</a>()</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a6b8b62d04329dd06a59255a379e74870">  165</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_manifest_item.xhtml#a6b8b62d04329dd06a59255a379e74870">ManifestItem::ParseXML</a>(shared_ptr&lt;xml::Node&gt; node)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="class_x_m_l_identifiable.xhtml#af68c38400011ff0dfa1ee4ad7a187d72">SetXMLIdentifier</a>(_getProp(node, <span class="stringliteral">&quot;id&quot;</span>));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_x_m_l_identifiable.xhtml#a0b51b2d6ea9bc686bea75b1cae0523ae">XMLIdentifier</a>().empty() )</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="class_manifest_item.xhtml#a39abd8c828aa8e519bd437566b352d95">_href</a> = _getProp(node, <span class="stringliteral">&quot;href&quot;</span>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_manifest_item.xhtml#a39abd8c828aa8e519bd437566b352d95">_href</a>.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="class_manifest_item.xhtml#a959e7bec82223bae14f301bbe433cc98">_mediaType</a> = _getProp(node, <span class="stringliteral">&quot;media-type&quot;</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_manifest_item.xhtml#a959e7bec82223bae14f301bbe433cc98">_mediaType</a>.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="class_manifest_item.xhtml#a715c895291cb54bcc1fd569dc07d43ca">_mediaOverlayID</a> = _getProp(node, <span class="stringliteral">&quot;media-overlay&quot;</span>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="class_manifest_item.xhtml#aca2989ecd896c2e188bd141e58cfa4e2">_fallbackID</a> = _getProp(node, <span class="stringliteral">&quot;fallback&quot;</span>);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="class_manifest_item.xhtml#aac3ff29491189d727dc3b3be493e1ae1">_parsedProperties</a> = <a class="code" href="class_item_properties.xhtml">ItemProperties</a>(_getProp(node, <span class="stringliteral">&quot;properties&quot;</span>));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a14237dc57344efab6e083cdeaf762df6">  184</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_manifest_item.xhtml#a14237dc57344efab6e083cdeaf762df6">ManifestItem::AbsolutePath</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> _Str(<a class="code" href="class_manifest_item.xhtml#a3556d3f55bc0435199cbbe794cb0483a">GetPackage</a>()-&gt;BasePath(), <a class="code" href="class_manifest_item.xhtml#a73e8287b86676eadda88f5c635be7b83">BaseHref</a>());</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a6961a22ff91a328f1ce7ea9339fa144b">  188</a></span>&#160;shared_ptr&lt;ManifestItem&gt; <a class="code" href="class_manifest_item.xhtml#a6961a22ff91a328f1ce7ea9339fa144b">ManifestItem::MediaOverlay</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">auto</span> <span class="keyword">package </span>= this-&gt;Owner();</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">if</span> ( !package || <a class="code" href="class_manifest_item.xhtml#a715c895291cb54bcc1fd569dc07d43ca">_mediaOverlayID</a>.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">return</span> package-&gt;ManifestItemWithID(<a class="code" href="class_manifest_item.xhtml#a715c895291cb54bcc1fd569dc07d43ca">_mediaOverlayID</a>);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#acb31806855efcc916e0cf10c3147b1df">  196</a></span>&#160;shared_ptr&lt;ManifestItem&gt; <a class="code" href="class_manifest_item.xhtml#acb31806855efcc916e0cf10c3147b1df">ManifestItem::Fallback</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">auto</span> <span class="keyword">package </span>= this-&gt;Owner();</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span> ( !package || <a class="code" href="class_manifest_item.xhtml#aca2989ecd896c2e188bd141e58cfa4e2">_fallbackID</a>.<a class="code" href="classstring.xhtml#aa1e79021cefb7799622b58913efb52ec">empty</a>() )</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> package-&gt;ManifestItemWithID(<a class="code" href="class_manifest_item.xhtml#aca2989ecd896c2e188bd141e58cfa4e2">_fallbackID</a>);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#a73e8287b86676eadda88f5c635be7b83">  204</a></span>&#160;<span class="keywordtype">string</span> <a class="code" href="class_manifest_item.xhtml#a73e8287b86676eadda88f5c635be7b83">ManifestItem::BaseHref</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// get base part of href</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">string</span> path;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">size_t</span> s = <a class="code" href="class_manifest_item.xhtml#a39abd8c828aa8e519bd437566b352d95">_href</a>.<a class="code" href="classstring.xhtml#ac98aeabd09f4ff5abccbb96abaf822d1">find_first_of</a>(<span class="stringliteral">&quot;#?&quot;</span>);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> ( s == <a class="code" href="classstring.xhtml#a5481c7537c2e018b4cf3bd905d342d0c">string::npos</a> )</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        path = <a class="code" href="class_manifest_item.xhtml#a39abd8c828aa8e519bd437566b352d95">_href</a>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        path = path.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(0, s);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> path;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#aa2abae6f577c1b4052b86a120a9581f5">  215</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_manifest_item.xhtml#a9bd0a65d74a531ff00a02624de7d5fae">ManifestItem::HasProperty</a>(<span class="keyword">const</span> std::vector&lt;IRI&gt;&amp; properties)<span class="keyword"> const</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">const</span> <a class="code" href="class_i_r_i.xhtml">IRI</a>&amp; iri : properties )</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">if</span> ( this-&gt;<a class="code" href="class_property_holder.xhtml#a283b2fbf774af3295fa0942ea625bfff">ContainsProperty</a>(iri) )</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#ab3fa5bd7958a1b85fe373d04cfd78cac">  224</a></span>&#160;<a class="code" href="_forward_8h.xhtml#ad70d87990069a529e83f84dd93bba7e4">EncryptionInfoPtr</a> <a class="code" href="class_manifest_item.xhtml#ab3fa5bd7958a1b85fe373d04cfd78cac">ManifestItem::GetEncryptionInfo</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_forward_8h.xhtml#a96b279dc4c30984cab89df2ea2d7289b">ContainerPtr</a> container = <a class="code" href="class_manifest_item.xhtml#a3556d3f55bc0435199cbbe794cb0483a">GetPackage</a>()-&gt;GetContainer();</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">string</span> abs = <a class="code" href="class_manifest_item.xhtml#a14237dc57344efab6e083cdeaf762df6">AbsolutePath</a>();</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">if</span> (abs.<a class="code" href="classstring.xhtml#a63f228f3a714fcfdc40d3406443214bf">at</a>(0) == <span class="charliteral">&#39;/&#39;</span>)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        abs = abs.<a class="code" href="classstring.xhtml#a96b9dd2eeff04a39429870238ddb84a6">substr</a>(1, abs.<a class="code" href="classstring.xhtml#a051c72132ba48143bf73150ac29ba665">length</a>()-1);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> container-&gt;EncryptionInfoForPath(abs);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#aa173cd151b54fa04c30d9ec9ed6a2e5d">  234</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="class_manifest_item.xhtml#aa173cd151b54fa04c30d9ec9ed6a2e5d">ManifestItem::CanLoadDocument</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="class_manifest_item.xhtml#a3556d3f55bc0435199cbbe794cb0483a">GetPackage</a>()-&gt;GetContainer()-&gt;FileExistsAtPath(<a class="code" href="class_manifest_item.xhtml#a14237dc57344efab6e083cdeaf762df6">AbsolutePath</a>());</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#ac8bddbf41fc21297f2631444db361a43">  238</a></span>&#160;shared_ptr&lt;xml::Document&gt; <a class="code" href="class_manifest_item.xhtml#ac8bddbf41fc21297f2631444db361a43">ManifestItem::ReferencedDocument</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// TODO: handle remote URLs</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">string</span> path(<a class="code" href="class_manifest_item.xhtml#a73e8287b86676eadda88f5c635be7b83">BaseHref</a>());</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">auto</span> <span class="keyword">package </span>= this-&gt;Owner();</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span> ( !package )</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    shared_ptr&lt;xml::Document&gt; result(<span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">#if EPUB_USE(LIBXML2)</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor"></span>    <span class="comment">// Sometimes, we want to filter the manifest items through</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// the content filter chain when unpacking the Package. For</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// example, with some DRM algorithms, the navigation tables are</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// encrypted and should be filtered before being parsed.</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="_forward_8h.xhtml#abca75900ee37a8e12719c652ba3e23f2">ePub3::ManifestItemPtr</a> manifestRef = std::const_pointer_cast&lt;<a class="code" href="class_manifest_item.xhtml">ManifestItem</a>&gt;(<a class="code" href="class_pointer_type.xhtml#a253402439a2f9b96382596074d2d7271">Ptr</a>());</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">if</span> (!manifestRef)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    shared_ptr&lt;ByteStream&gt; byteStream = package-&gt;GetFilterChainByteStream(manifestRef);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">if</span> (!byteStream)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">void</span> *docBuf = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::size_t resbuflen = byteStream-&gt;ReadAllBytes(&amp;docBuf);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// In some EPUBs, UTF-8 XML/HTML files have a superfluous (erroneous?) BOM, so we either:</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// pass &quot;utf-8&quot; and expect InputBuffer::read_cb (in io.cpp) to skip the 3 erroneous bytes</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// (otherwise the XML parser fails),</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// or we pass NULL (in which case the parser auto-detects encoding)</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> * encoding = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">//const char * encoding = &quot;utf-8&quot;;</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    xmlDocPtr raw;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">if</span> ( <a class="code" href="class_manifest_item.xhtml#a959e7bec82223bae14f301bbe433cc98">_mediaType</a> == <span class="stringliteral">&quot;text/html&quot;</span> ) {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        raw = htmlReadMemory((<span class="keyword">const</span> <span class="keywordtype">char</span>*)docBuf, resbuflen, path.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), encoding, <a class="code" href="class_archive_xml_reader.xhtml#af813defa358f730d9eb39dcd6a105cf7">ArchiveXmlReader::DEFAULT_OPTIONS</a>);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        raw = xmlReadMemory((<span class="keyword">const</span> <span class="keywordtype">char</span>*)docBuf, resbuflen, path.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), encoding, <a class="code" href="class_archive_xml_reader.xhtml#af813defa358f730d9eb39dcd6a105cf7">ArchiveXmlReader::DEFAULT_OPTIONS</a>);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    result = xml::Wrapped&lt;xml::Document&gt;(raw);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">if</span> (docBuf)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        free(docBuf);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">#elif EPUB_USE(WIN_XML)</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor"></span>    <span class="comment">// TODO: filtering referenced document through Content Filters</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// is not yet supported on Windows</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    unique_ptr&lt;ArchiveXmlReader&gt; reader = package-&gt;XmlReaderForRelativePath(path);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">if</span> ( !reader )</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    result = reader-&gt;ReadDocument(path.<a class="code" href="classstring.xhtml#a933a133175c37d014070c21068c514a2">c_str</a>(), <span class="stringliteral">&quot;utf-8&quot;</span>, 0);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="preprocessor"></span>    </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="code" href="class_manifest_item.xhtml#aa62b18ba0b41a105588e6d78d9f30771">  296</a></span>&#160;unique_ptr&lt;ByteStream&gt; <a class="code" href="class_manifest_item.xhtml#aa62b18ba0b41a105588e6d78d9f30771">ManifestItem::Reader</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">auto</span> <span class="keyword">package </span>= GetPackage();</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">if</span> ( !package )</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">auto</span> container = package-&gt;GetContainer();</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">if</span> ( !container )</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> container-&gt;GetArchive()-&gt;ByteStreamAtPath(<a class="code" href="class_manifest_item.xhtml#a14237dc57344efab6e083cdeaf762df6">AbsolutePath</a>());</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">#ifdef SUPPORT_ASYNC</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor"></span>unique_ptr&lt;AsyncByteStream&gt; ManifestItem::AsyncReader()<span class="keyword"> const</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">auto</span> <span class="keyword">package </span>= GetPackage();</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">if</span> ( !package )</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">auto</span> container = package-&gt;GetContainer();</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">if</span> ( !container )</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">return</span> container-&gt;GetArchive()-&gt;AsyncByteStreamAtPath(<a class="code" href="class_manifest_item.xhtml#a14237dc57344efab6e083cdeaf762df6">AbsolutePath</a>());</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* SUPPORT_ASYNC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;EPUB3_END_NAMESPACE</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d81697a4833f1d44a7e9bc8387132cc4.xhtml">ePub</a></li><li class="navelem"><a class="el" href="manifest_8cpp.xhtml">manifest.cpp</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
