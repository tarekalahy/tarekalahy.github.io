<!-- HTML header for doxygen 1.8.3.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>Readium SDK: /Users/rkwright/Documents/github/readium-sdk-D/ePub3/ePub/filter.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/NativeMML"],
});
</script><script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
   <link rel="shortcut icon" type="image/png" href="favicon.png"/>
 </head>
<body>
<div id="page-top-wrapper"><br/><br/></div>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="readiumlogo_128.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Readium SDK
   &#160;<span id="projectnumber">0.23</span>
   </div>
   <div id="projectbrief">An EPUB 3 compliant rendering engine for eBooks</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('filter_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">filter.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="filter_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//  filter.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">//  ePub3</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//  Created by Jim Dovey on 2012-12-21.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//  Copyright (c) 2014 Readium Foundation and/or its licensees. All rights reserved.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//  This program is distributed in the hope that it will be useful, but WITHOUT ANY </span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  </span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">//  Licensed under Gnu Affero General Public License Version 3 (provided, notwithstanding this notice, </span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//  Readium Foundation reserves the right to license this material under a different separate license, </span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">//  and if you have done so, the terms of that separate license control and the following references </span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//  to GPL do not apply).</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//  </span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//  This program is free software: you can redistribute it and/or modify it under the terms of the GNU </span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//  Affero General Public License as published by the Free Software Foundation, either version 3 of </span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">//  the License, or (at your option) any later version. You should have received a copy of the GNU </span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//  Affero General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef __ePub3__filter__</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __ePub3__filter__</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="base_8h.xhtml">ePub3/base.h</a>&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="basic_8h.xhtml">ePub3/utilities/basic.h</a>&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;ePub3/manifest.h&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;ePub3/encryption.h&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="byte__stream_8h.xhtml">ePub3/utilities/byte_stream.h</a>&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;EPUB3_BEGIN_NAMESPACE</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span><a class="code" href="class_package.xhtml">Package</a>;</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">   36</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_container.xhtml">Container</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">typedef</span> std::shared_ptr&lt;Package&gt;    <a class="code" href="filter_8h.xhtml#a5f1ee44b8ec43648eca7bb7049611fa6">PackagePtr</a>;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="code" href="filter_8h.xhtml#a841ee8380970cd004a352a1e3177f902">   40</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_content_filter.xhtml">ContentFilter</a>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">typedef</span> std::shared_ptr&lt;ContentFilter&gt;  <a class="code" href="filter_8h.xhtml#a841ee8380970cd004a352a1e3177f902">ContentFilterPtr</a>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// -------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_byte_range.xhtml">ByteRange</a></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#a894122b1a88dc5d76db0442ea0ab47a2">   48</a></span>&#160;    <a class="code" href="class_byte_range.xhtml#a894122b1a88dc5d76db0442ea0ab47a2">ByteRange</a>()</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="class_byte_range.xhtml#ab47e13c37e47ef5eab1c6821921c50b3">Reset</a>();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    </div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#a514f78efa90b5ea65d4d4c6339fab36b">   53</a></span>&#160;    uint32_t <a class="code" href="class_byte_range.xhtml#a514f78efa90b5ea65d4d4c6339fab36b">Location</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_location; }</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#a94aeebd063015d7f7694424522c56ce3">   54</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_byte_range.xhtml#a94aeebd063015d7f7694424522c56ce3">Location</a>(uint32_t location) { m_isFullRange = <span class="keyword">false</span>; m_location = location; }</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#aafbe9fa6b8291fbdaba0728b6b747772">   55</a></span>&#160;    uint32_t <a class="code" href="class_byte_range.xhtml#aafbe9fa6b8291fbdaba0728b6b747772">Length</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_length; }</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#afb178ea173efbd0a1cacb401b1240b7a">   56</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_byte_range.xhtml#afb178ea173efbd0a1cacb401b1240b7a">Length</a>(uint32_t length) { m_isFullRange = <span class="keyword">false</span>; m_length = length; }</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#a36a0e6a970cc9b490d46aecfd6709056">   57</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="class_byte_range.xhtml#a36a0e6a970cc9b490d46aecfd6709056">IsFullRange</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_isFullRange; }</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#ab47e13c37e47ef5eab1c6821921c50b3">   58</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_byte_range.xhtml#ab47e13c37e47ef5eab1c6821921c50b3">Reset</a>() { m_location = 0; m_length = 0; m_isFullRange = <span class="keyword">true</span>; }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="class_byte_range.xhtml#af9009f132cbf3d10320b9c9964eb8392">   60</a></span>&#160;    <a class="code" href="class_byte_range.xhtml">ByteRange</a> &amp;<a class="code" href="class_byte_range.xhtml#af9009f132cbf3d10320b9c9964eb8392">operator=</a>(<span class="keyword">const</span> <a class="code" href="class_byte_range.xhtml">ByteRange</a> &amp;b)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span> (b.m_isFullRange)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <a class="code" href="class_byte_range.xhtml#ab47e13c37e47ef5eab1c6821921c50b3">Reset</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            m_location = b.m_location;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            m_length = b.m_length;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            m_isFullRange = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="class_byte_range.xhtml#a894122b1a88dc5d76db0442ea0ab47a2">ByteRange</a>(<span class="keyword">const</span> <a class="code" href="class_byte_range.xhtml">ByteRange</a> &amp;b) <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>; <span class="comment">// Delete copy constructor</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="class_byte_range.xhtml#a894122b1a88dc5d76db0442ea0ab47a2">ByteRange</a>(<a class="code" href="class_byte_range.xhtml">ByteRange</a> &amp;&amp;b) <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>; <span class="comment">// Delete move constructor</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="class_byte_range.xhtml">ByteRange</a> &amp;operator=(<a class="code" href="class_byte_range.xhtml">ByteRange</a> &amp;&amp;b) _DELETED_; <span class="comment">// Delete move assignment operator</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    uint32_t m_location;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    uint32_t m_length;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">bool</span> m_isFullRange;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;};</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">// -------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="code" href="class_filter_context.xhtml">  102</a></span>&#160;class <a class="code" href="class_filter_context.xhtml">FilterContext</a></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="code" href="class_filter_context.xhtml#a54d2af66b89b844d1f0c91c5fab4a8e5">  105</a></span>&#160;    <a class="code" href="class_filter_context.xhtml#a54d2af66b89b844d1f0c91c5fab4a8e5">FilterContext</a>() { }</div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="code" href="class_filter_context.xhtml#a7fbc0d977dd199158e1e58e1ffbd3a02">  106</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_filter_context.xhtml#a7fbc0d977dd199158e1e58e1ffbd3a02">~FilterContext</a>() { }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;};</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">// -------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">class </span><a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a>;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml">  125</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_range_filter_context.xhtml">RangeFilterContext</a> : <span class="keyword">public</span> <a class="code" href="class_filter_context.xhtml">FilterContext</a></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#a721c5a5e0f3c58a002bf94129d8f4423">  128</a></span>&#160;    <a class="code" href="class_range_filter_context.xhtml#a721c5a5e0f3c58a002bf94129d8f4423">RangeFilterContext</a>() : <a class="code" href="class_filter_context.xhtml">FilterContext</a>(), m_byteStream(nullptr) { }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#a55e6c277cb2f2fb062f05a74bb4e0916">  130</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_range_filter_context.xhtml#a55e6c277cb2f2fb062f05a74bb4e0916">~RangeFilterContext</a>() {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">if</span> (m_buffer != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            this-&gt;DestroyCurrentTemporaryByteBuffer();</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    uint8_t *m_buffer = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> m_buffer_size = 0;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> m_allocated_buffer_size = 0;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">void</span> DestroyCurrentTemporaryByteBuffer()</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keyword">delete</span>[] m_buffer; <span class="comment">//reinterpret_cast&lt;uint8_t *&gt;(m_buffer);</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        m_buffer = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        m_buffer_size = 0;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        m_allocated_buffer_size = 0;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#a913e703b2848f9b7f4971e432d7e8fd9">  150</a></span>&#160;    uint8_t * GetCurrentTemporaryByteBuffer()</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> m_buffer;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#ac57629384188114fd592c247d27fe8bc">  155</a></span>&#160;    <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> GetCurrentTemporaryByteBufferSize()</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> m_buffer_size;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#adeb527ce9609b95f9939c13caee13ad7">  161</a></span>&#160;    <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> GetCurrentTemporaryByteBufferAllocatedSize()</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> m_allocated_buffer_size;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#a2b5b3102fc72c946521fd24808a3cf67">  166</a></span>&#160;    uint8_t * GetAllocateTemporaryByteBuffer(<a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> bytesToRead)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> (m_buffer == <span class="keyword">nullptr</span> || m_buffer_size &lt; bytesToRead)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">if</span> (m_buffer != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                this-&gt;DestroyCurrentTemporaryByteBuffer();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            m_buffer = <span class="keyword">new</span> uint8_t[bytesToRead];</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            m_allocated_buffer_size = bytesToRead;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_allocated_buffer_size; i++)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            m_buffer[i] = 0;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        m_buffer_size = bytesToRead;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">return</span> m_buffer;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#a5b203d21fe6f5cab96b3de61f8fb7c08">  189</a></span>&#160;    <a class="code" href="class_byte_range.xhtml">ByteRange</a> &amp;<a class="code" href="class_range_filter_context.xhtml#a5b203d21fe6f5cab96b3de61f8fb7c08">GetByteRange</a>() { <span class="keywordflow">return</span> m_byteRange; }</div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#a5d7c81a963360f2ea7648fe9f63b1fae">  190</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_range_filter_context.xhtml#a5d7c81a963360f2ea7648fe9f63b1fae">SetSeekableByteStream</a>(<a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a> *byteStream) { m_byteStream = byteStream; }</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#af55a23c2bf5512b2e776e9158cfd48a4">  191</a></span>&#160;    <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a> *<a class="code" href="class_range_filter_context.xhtml#af55a23c2bf5512b2e776e9158cfd48a4">GetSeekableByteStream</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_byteStream; }</div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="code" href="class_range_filter_context.xhtml#ae4b98164d398fd8c659be1f917660190">  192</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_range_filter_context.xhtml#ae4b98164d398fd8c659be1f917660190">ResetSeekableByteStream</a>() { m_byteStream = <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="class_byte_range.xhtml">ByteRange</a> m_byteRange;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a> *m_byteStream;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">// -------------------------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml">  229</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_content_filter.xhtml">ContentFilter</a></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;#if <a class="code" href="__platform_8h.xhtml#a34ebb2c17c03dd85efc5bed561bda851">EPUB_PLATFORM</a>(WINRT)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    : <span class="keyword">public</span> NativeBridge</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor"></span>{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// using &#39;enum class&#39; means you can ONLY use these exact values, grr</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// so I&#39;m just making them constants</span></div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a4fd517f83738ad5d9c9f4b30da92acf3">  238</a></span>&#160;    <span class="keyword">typedef</span> uint32_t <a class="code" href="class_content_filter.xhtml#a4fd517f83738ad5d9c9f4b30da92acf3">FilterPriority</a>;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    </div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#af0e276ae17c536ad61c9a3ec628fb457">  242</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_content_filter.xhtml#a4fd517f83738ad5d9c9f4b30da92acf3">FilterPriority</a> MustAccessRawBytes      = 1000;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    </div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#addc2ead15c88dab7f8d99cbbd8d24c95">  246</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_content_filter.xhtml#a4fd517f83738ad5d9c9f4b30da92acf3">FilterPriority</a> EPUBDecryption          = 750;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    </div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a03425cfdc04a2e83bef5a749e5acac9d">  250</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_content_filter.xhtml#a4fd517f83738ad5d9c9f4b30da92acf3">FilterPriority</a> SwitchStaticHandling    = 500;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    </div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a6f383015a966a0b34e4f2931698a0162">  254</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_content_filter.xhtml#a4fd517f83738ad5d9c9f4b30da92acf3">FilterPriority</a> ObjectPreprocessing     = 250;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    </div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#aa2282d928c5853f5a81d769bfc099a8b">  259</a></span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="class_content_filter.xhtml#a4fd517f83738ad5d9c9f4b30da92acf3">FilterPriority</a> ValidationComplete      = 100;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    </div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#aedcadc249282507c40aac5472f7806d5">  268</a></span>&#160;    <span class="keyword">typedef</span> std::function&lt;bool(ConstManifestItemPtr item)&gt; <a class="code" href="class_content_filter.xhtml#aedcadc249282507c40aac5472f7806d5">TypeSnifferFn</a>;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    </div>
<div class="line"><a name="l00270"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#af7fe1ee6076a9e6f49a5defb050f3026">  270</a></span>&#160;    <span class="keyword">typedef</span> std::function&lt;ContentFilterPtr(ConstPackagePtr package)&gt; <a class="code" href="class_content_filter.xhtml#af7fe1ee6076a9e6f49a5defb050f3026">TypeFactoryFn</a>;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    </div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a6cce703196fc2057d3f525a628ecf301">  278</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="class_content_filter.xhtml#a6cce703196fc2057d3f525a628ecf301">OperatingMode</a></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        Standard,              </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        RequiresCompleteData,  </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        SupportsByteRanges     </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    };</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="class_content_filter.xhtml">ContentFilter</a>() <a class="code" href="__config_8h.xhtml#ac12c242fbf92718c8469d07768efde7d">_DELETED_</a>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;public:</div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a49024f581e2bc2521ff18ce488ae5d8b">  293</a></span>&#160;    <a class="code" href="class_content_filter.xhtml">ContentFilter</a>(const <a class="code" href="class_content_filter.xhtml">ContentFilter</a>&amp; o) : _sniffer(o._sniffer) {}</div>
<div class="line"><a name="l00296"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a8becf0d6e27f673e8d486c60ad754085">  296</a></span>&#160;    <a class="code" href="class_content_filter.xhtml#a8becf0d6e27f673e8d486c60ad754085" title="C++11 move constructor.">ContentFilter</a>(<a class="code" href="class_content_filter.xhtml">ContentFilter</a>&amp;&amp; o) : _sniffer(std::move(o._sniffer)) {}</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    </div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a51a87c1648a3fe9b50cfec9b9084ebb3">  311</a></span>&#160;    <a class="code" href="class_filter_context.xhtml">FilterContext</a> *MakeFilterContext(<a class="code" href="_forward_8h.xhtml#a80a490c130036fd569bff5aec893ed7e">ConstManifestItemPtr</a> item)<span class="keyword"> const</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <a class="code" href="class_filter_context.xhtml">FilterContext</a> *filterContext = InnerMakeFilterContext(item);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">if</span> (filterContext != <span class="keyword">nullptr</span> &amp;&amp;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            GetOperatingMode() == OperatingMode::SupportsByteRanges &amp;&amp;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            dynamic_cast&lt;RangeFilterContext *&gt;(filterContext) == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">throw</span> std::logic_error(<span class="stringliteral">&quot;A ContentFilter object that supports byte ranges should only make RangeFilterContext objects.&quot;</span>);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">return</span> filterContext;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    </div>
<div class="line"><a name="l00329"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a44dc17b6440d234b6d561dc4e36ac506">  329</a></span>&#160;    <a class="code" href="class_content_filter.xhtml#a44dc17b6440d234b6d561dc4e36ac506">ContentFilter</a>(<a class="code" href="class_content_filter.xhtml#aedcadc249282507c40aac5472f7806d5">TypeSnifferFn</a> sniffer) : _sniffer(sniffer) {}</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#ab6942bbce4241aede0bc821a59ffa8f4">  330</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_content_filter.xhtml#ab6942bbce4241aede0bc821a59ffa8f4">~ContentFilter</a>() {}</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        </div>
<div class="line"><a name="l00334"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a2d6d53d93ede81862dc6408d2c61bab6">  334</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_content_filter.xhtml#a6cce703196fc2057d3f525a628ecf301">OperatingMode</a> <a class="code" href="class_content_filter.xhtml#a2d6d53d93ede81862dc6408d2c61bab6" title="Subclasses should override this method if they want to specify different modes of operation...">GetOperatingMode</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> OperatingMode::Standard; }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a20957b25224e319025b0d51f202d6eb3">  336</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_byte_stream.xhtml#a0a922b9db3d4870668c4766c4951cf0d" title="The type for all byte-counts used with the ByteStream API.">ByteStream::size_type</a> <a class="code" href="class_content_filter.xhtml#a20957b25224e319025b0d51f202d6eb3">BytesAvailable</a>(<a class="code" href="class_filter_context.xhtml">FilterContext</a> *context, <a class="code" href="class_seekable_byte_stream.xhtml">SeekableByteStream</a> *byteStream)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> byteStream-&gt;<a class="code" href="class_byte_stream.xhtml#a67138ac605386433a40d76b5ccce426a" title="Returns the number of bytes that can be read at this time.">BytesAvailable</a>(); };</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#aa836d6024c7c2b8345f232ada65e3628">  340</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_content_filter.xhtml#aedcadc249282507c40aac5472f7806d5">TypeSnifferFn</a> <a class="code" href="class_content_filter.xhtml#aa836d6024c7c2b8345f232ada65e3628" title="Obtains the type-sniffer for this filter.">TypeSniffer</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _sniffer; }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    </div>
<div class="line"><a name="l00344"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a70ecda0fb063b5b3c5101cea58b5bed9">  344</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="class_content_filter.xhtml#a70ecda0fb063b5b3c5101cea58b5bed9" title="Assigns a new type-sniffer to this filter.">SetTypeSniffer</a>(<a class="code" href="class_content_filter.xhtml#aedcadc249282507c40aac5472f7806d5">TypeSnifferFn</a> fn) { _sniffer = fn; }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> *FilterData(<a class="code" href="class_filter_context.xhtml">FilterContext</a>* context, <span class="keywordtype">void</span> *data, <span class="keywordtype">size_t</span> len, <span class="keywordtype">size_t</span> *outputLen) = 0;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a33e2639dc6cd667e630250580b5ca941">  368</a></span>&#160;    <a class="code" href="class_content_filter.xhtml#aedcadc249282507c40aac5472f7806d5">TypeSnifferFn</a>       <a class="code" href="class_content_filter.xhtml#a33e2639dc6cd667e630250580b5ca941">_sniffer</a>;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    </div>
<div class="line"><a name="l00389"></a><span class="lineno"><a class="code" href="class_content_filter.xhtml#a938387f37fcc9f4e5d57fe65be798270">  389</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="class_filter_context.xhtml">FilterContext</a> *<a class="code" href="class_content_filter.xhtml#a938387f37fcc9f4e5d57fe65be798270">InnerMakeFilterContext</a>(<a class="code" href="_forward_8h.xhtml#a80a490c130036fd569bff5aec893ed7e">ConstManifestItemPtr</a> item)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;};</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;EPUB3_END_NAMESPACE</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ePub3__filter__) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.3.1-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_99f496c3a760cbc050f4a6d0965ed892.xhtml">ePub3</a></li><li class="navelem"><a class="el" href="dir_d81697a4833f1d44a7e9bc8387132cc4.xhtml">ePub</a></li><li class="navelem"><a class="el" href="filter_8h.xhtml">filter.h</a></li>
    <li class="footer">Generated on Mon Jun 6 2016 09:56:40 for Readium SDK by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
